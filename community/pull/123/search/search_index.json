{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gradle Community Site","text":"<p>This is an open-source site for all Gradle community matters, including governance, artwork, events, and public infrastructure. Anyone is welcome to participate and to extend the website and the underlying gradle/community repository, which is also used for tracking of community initiatives.</p> <p>DISCLAIMER: This website is experimental, and under active development. Please report any issues to gradle/community/issues, any pull requests will be appreciated too!</p>"},{"location":"#key-sections","title":"Key sections","text":"<ul> <li>Gradle Cookbook</li> <li>Participate and Contribute - Kernel parts, core plugins, and documentation</li> <li>Key Projects</li> <li>Events and Mentorship programs</li> <li>Code of Conduct</li> </ul>"},{"location":"#community-channels","title":"Community Channels","text":"<ul> <li><code>gradle-community</code> Slack workspace   (Slack History Archive)</li> <li>Gradle Forums (Discourse)</li> <li>Stack Overflow (<code>#gradle</code> tag)</li> <li>GitHub (<code>@gradle</code>)</li> <li>Social media: see the list here</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Gradle Community Resources - Official listing on the website</li> <li>Other Resources</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>All contributions are welcome! We invite everyone to join our community channels and to participate. See the Contributing Guidelines for the links to specific resources and guidelines.</p> <p>If you want to contribute anything to this <code>gradle/community</code> repository, see this page.</p>"},{"location":"CONTRIBUTING/","title":"Community Site Docs","text":""},{"location":"CONTRIBUTING/#contributing-to-the-gradle-community-site","title":"Contributing to the Gradle Community Site","text":"<p>Contributing to this site is easy! While we may not have many issues for newcomers, we welcome all contributions, big or small. </p> <p>Many minor changes can be made directly from your browser. Just submit a pull request to the respective repository. On the rop right corner you can also see the Edit icons that will normally get you right to the content page.</p> <p>For bigger changes, you can develop locally.  Detailed instructions are provided below.</p>"},{"location":"CONTRIBUTING/#communication-channels","title":"Communication channels","text":"<ul> <li><code>#docs</code> on the Gradle Community Slack</li> </ul>"},{"location":"CONTRIBUTING/#contributing-content","title":"Contributing Content","text":"<p>The Gradle community website is in the early stages of development, and we do not have fixed processes and practices yet. Just submit a pull request with your change. If you have any concerns, let's discuss them on Slack or in a GitHub issue.</p>"},{"location":"CONTRIBUTING/#developing-the-site","title":"Developing the site","text":"<p>It is possible to deploy the site instance locally or inside a Dev Container. The latter is the recommended approach.</p>"},{"location":"CONTRIBUTING/#technology-under-the-hood","title":"Technology under the hood","text":"<p>The community site is built with MkDocs, MkDocs Multirepo Plugin, and Material for MkDocs. So, it uses the Python technology stack instead of Gradle, but on the other hand we're leveraging one of the most powerful documentation engines.</p>"},{"location":"CONTRIBUTING/#setting-up-the-environment","title":"Setting up the environment","text":""},{"location":"CONTRIBUTING/#dev-containers","title":"Dev Containers","text":"<p>This repository includes the Dev Container definition that you can use in Visual Studio Code or in IntelliJ Platform to spin up the local development environment. The same Dev Container is used for CI/CD, and it is the recommended way for local development.</p>"},{"location":"CONTRIBUTING/#running-locally","title":"Running locally","text":"<p>Requirements:</p> <ul> <li>Python3 and PiP (Python's package manager), recent versions</li> <li>Linux, macOS or Windows WSL-2 environment.   Windows native may work but it is not tested.</li> </ul> <p>For now, you need to install the dependencies:</p> <pre><code>pip install -r .devcontainer/requirements.txt\nmkdocs build\n</code></pre>"},{"location":"CONTRIBUTING/#local-development","title":"Local development","text":"<p>Once you have the ready to build environment, you can use <code>mkdocs build</code> to build the static site.</p> <p>To do live development, use the following command to provision the site on <code>http://localhost:8000/community</code>:</p> <pre><code>mkdocs serve\n</code></pre> <p>Note that the MkDocs Multi-Repo plugin is quite slow, and it may take up to 10 seconds to rebuild the website on configuration changes. If you develop the local part within this repository (design, content, etc.), you can run the <code>build</code> and the <code>serve</code> commands with the <code>FULL_BUILD=false</code> variable, e.g.:</p> <pre><code>FULL_BUILD=false mkdocs serve\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-cookbook-pdf","title":"Building the Cookbook PDF","text":"<p>Run <code>BUILD_PDF=1 mkdocs build</code> to generate the PDF file in _site/pdf/cookbook.pdf.</p>"},{"location":"CONTRIBUTING/#cicd","title":"CI/CD","text":"<p>This site is built and deployed by GitHub Actions, as well as previews in the pull requests. We have continuous delivery, so your patches will be delivered just a few minutes after the change is merged.</p>"},{"location":"contributing/","title":"Contributing to Gradle","text":""},{"location":"contributing/#contributing-to-gradle","title":"Contributing to Gradle","text":"<p>As in any open-source project, contributions to Gradle are welcome! Gradle Build Tool itself, its documentation, many plugins and tools within Gradle's ecosystem are open-source, and you can contribute anywhere. Regardless of how much time you can dedicate and your level of expertise, there are opportunities to contribute!</p> <p>See the links on the left for particular contributing guidelines.</p>"},{"location":"contributing/#types-of-contribution","title":"Types of Contribution","text":"<ul> <li>Code Contributions - new features, bug fixes, test automation, etc.<ul> <li>Contributing to Gradle Build Tool - Contributing to Gradle Build Tool and the core plugins.</li> <li>Contributing to Plugins</li> </ul> </li> <li>Contributing to Documentation</li> <li>Spread the Word about Gradle - advocacy, public speaking and sharing your experiences</li> <li>Join community channels, help Gradle users and share your experiences.</li> </ul>"},{"location":"contributing/#for-newcomers","title":"For Newcomers","text":"<p>If you are a newcomer contributor, note that Gradle Build Tool and core plugins (components under gradle/gradle) have a quite steep learning curve. As the foundational developer tool used by millions, there are high expectations about stability and maintainability of the submitted code and documentation. and it may take a while till your changes are merged and released.</p> <p>If you are just starting your journey in open source and do not aim fixing a specific issue impacting you, it is highly recommended to start from plugins and smaller repositories where the entry bar is much lower.</p>"},{"location":"contributing/#key-communication-channels","title":"Key Communication Channels","text":""},{"location":"contributing/#community-slack","title":"Community Slack","text":"<p>We have a community Slack on the <code>gradle-community</code> workspace. This is a main channel for Q&amp;A and quick discussions.</p> <ul> <li>Join the Community Slack</li> <li>Use the <code>#contributing</code> channel if you need any help with contributing   changes to gradle and getting them over the line.</li> <li>We have a searchable Slack archive here.</li> </ul> <p>Learn more about Slack and the communication best practices on this page.</p>"},{"location":"contributing/#gradle-forums","title":"Gradle Forums","text":"<p>We run Gradle Forums on Discourse: discuss.gradle.org. This channel is designed for long-term conversations, e.g. project and architecture proposals.</p>"},{"location":"contributing/#github","title":"GitHub","text":"<p>We use GitHub Issues and Projects to cooperate. You may find GitHub Issues on all public repositories. For the Gradle Build Tool as whole, we use issues in the main gradle/gradle repository.</p> <p>Quick links:</p> <ul> <li>Good First Issues -   Issues for newcomers who want to start contributing to Gradle</li> <li>Help Wanted -   Issues for more experienced contributors that are open for grabs</li> </ul> <p>At the moment we do not have GitHub Discussions and Wiki in the main repositories, most of the discussions are expected to happen in GitHub Issues. Other repositories may offer different discussion channels.</p>"},{"location":"contributing/#resources","title":"Resources","text":"<ul> <li>Code of Conduct</li> <li>Community Resources</li> <li>Public Roadmap</li> </ul>"},{"location":"contributing/community-slack/","title":"Gradle Community Slack","text":"<p>If you need help with Gradle Build Tool, its ecosystem or integrations, or with Gradle Build Scan, we have a <code>gradle-community</code> workspace on Slack. The same workspace is used for real-time technical discussions and contributions coordination. So, if you are interested in contributing to Gradle, join our Slack too!</p> <p>The community Slack is intended to be a safe and welcoming environment, and hence the Gradle Code of Conduct applies to all participants and conversations on this resource.</p>"},{"location":"contributing/community-slack/#join-us-on-slack","title":"Join us on Slack","text":"<p>To join the Slack, you can get a sign-up link here.</p>"},{"location":"contributing/community-slack/#key-channels","title":"Key Channels","text":"<p>Below you can find the list of the key channels, with the archive link for convenience</p> <ul> <li>#community-news Stay up to date with general news and updates from the Gradle community, including announcements and events.</li> <li>#community-support A general help channel where you can ask questions about Gradle, seek troubleshooting tips, and get advice from fellow community members.</li> <li>#general A catch-all channel for general discussions that don\u2019t fit into other specific topics.</li> <li>#contributing For those interested in contributing to Gradle\u2019s development. Share tips, ask questions, and discuss contribution best practices.</li> <li>#docs For any documentation discussions and feedback.</li> <li>#roadmap Follow and discuss Gradle\u2019s future roadmap, including planned features and upcoming enhancements.</li> <li>#releases-discussion Discuss new Gradle releases, share feedback, and explore the latest features and improvements.</li> <li>#plugin-development A space for developers working on Gradle plugins. Share knowledge, ask questions, and collaborate on plugin development.</li> </ul> Other technology and feature specific channels  [#github-integrations](https://www.linen.dev/s/gradle-community/c/github-integrations) Discuss how Gradle integrates with GitHub, from Actions to Issues, and share best practices for smooth workflows.  [#kotlin-dsl](https://www.linen.dev/s/gradle-community/c/kotlin-dsl) For developers working with Gradle\u2019s Kotlin DSL. Share tips, ask questions, and discuss migrating from Groovy to Kotlin.  [#maven](https://www.linen.dev/s/gradle-community/c/maven) A place for discussing Maven\u2019s integration with Gradle, dependency resolution, and migrating builds between the two tools.  [#migrating-from-maven](https://www.linen.dev/s/gradle-community/c/migrating-from-maven) Help and discussions about migrating from Maven to Gradle, including configuration tips and resolving compatibility issues.  [#native](https://www.linen.dev/s/gradle-community/c/native) A channel for discussions about using Gradle for native development (C/C++, Rust, etc.) including build setups and performance tips. Focus on integrating Gradle with Play Framework projects, including build configurations, performance, and troubleshooting.  [#android](https://www.linen.dev/s/gradle-community/c/android) Dedicated to Android development using Gradle. Discuss build issues, configurations, and Gradle integration with Android projects.  [#caching](https://www.linen.dev/s/gradle-community/c/caching) Focus on caching strategies in Gradle, including build cache optimization and troubleshooting.  [#gradleup](https://www.linen.dev/s/gradle-community/c/gradleup) Discussions and updates about the GradleUp project, including user feedback, releases, and collaboration.  [#gradlex](https://www.linen.dev/s/gradle-community/c/gradlex) Discuss the GradleX project, which provides additional Gradle tools and plugins to extend Gradle\u2019s capabilities."},{"location":"contributing/community-slack/#best-practices","title":"Best Practices","text":""},{"location":"contributing/community-slack/#slack-or-other-channels","title":"Slack or other channels?","text":"<p>We recommend using Slack as a channel for real-time communications that are relatively short term, and can be safely archived after 1-2 months. For other cases, other channels might be preferable:</p> <ol> <li>If you suspect a security issue in Gradle Build Tool, plugins, its infrastructure, or other components,    please avoid discussing it in public.    Follow the Gradle Vulnerability Disclosure Policy so that we can triage the issue and protect other Gradle users.</li> <li>If you want to report a confirmed and reproducible issue with Gradle Build Tool or other component,    use GitHub Issues of the respective GitHub repository associated with the component.</li> <li>For getting feedback on large-size proposals that will take many months to implement,    it is better to make proposals on Gradle Forums on Discourse: discuss.gradle.org.    You can still use Slack to facilitate the discussion</li> </ol>"},{"location":"contributing/community-slack/#avoid-direct-messages-for-qa","title":"Avoid direct messages for Q&amp;A","text":"<p>We operate in a public community and encourage sharing of information and feedback, so that everyone can benefit from the question and answer. We do not normally provide individual and private support in the community channels. If you need that, consider contacting one of the professional services providers.</p> <p>Please abstain from sending direct messages (DMs) unless you have a confidential issue, for example, if you suspect a Code of Conduct violation, or want to discuss something personal. DMing someone with a generic question is not considered appropriate in the community, and regular misuse of DMs may be a subject for a Code of Conduct review.</p> <p>The same recommendation goes for pending pull requests. It is better to send reminders in public group channels unless there is a specific reviewer or maintainer who took an action item.</p>"},{"location":"contributing/community-slack/#asking-questions-on-slack","title":"Asking questions on Slack","text":"<p>Most of the support requests are handled by volunteers. Hence, let's help them to navigate and respond to questions. And, as everywhere, please be kind and patient!</p> <ul> <li>Use threads for discussions and responding to questions.</li> <li>Avoid posting the same question on multiple channels.   One channel is enough, and if needed to repost to another channel, post the link to avoid duplication.</li> <li>Avoid sending welcome/hi messages without a question.   We all try to be polite here, but you do not need to wait for an initial response before   asking the actual questions.</li> <li>To preserve the vertical space, in the first message, just briefly describe the problem.   Put all details/samples/logs in the thread responses.</li> <li>For short messages, use emojis when convenient: <code>:+1:</code>, <code>:-1:</code>, <code>:ok:</code>, etc.</li> <li>Do not hesitate to edit an opening message or the context messages based on the discoveries   It is better than reposting the whole message.</li> <li>Do NOT ping to get an answer faster and avoid individual mentions,   unless it is a very special topic that really needs an answer from specifically that person.   It may easily take 1-2 days to get a response for a substantial problem.</li> </ul> <p>Slack moderators may warn you and ask to amend the messages, and, in some cases, they may also edit or delete the messages as a last resort, for example, when they appear as spam.</p>"},{"location":"contributing/community-slack/#conversation-archive","title":"Conversation Archive","text":"<p>We use a free account, so the Slack history is limited to 3 months. To mitigate that, we keep the searchable Slack archive here.</p> <p>You can also search across Slack history and multiple other channels on gradle.org/help.</p>"},{"location":"contributing/community-slack/#alternative-channels","title":"Alternative Channels","text":"<p>See the list of other community channels here</p>"},{"location":"contributing/plugins/","title":"Contributing to Gradle Plugins","text":""},{"location":"contributing/plugins/#contributing-to-gradle-plugins","title":"Contributing to Gradle Plugins","text":"<p>In this section we focus on Community Plugins which are published on the Gradle Plugin Portal.</p>"},{"location":"contributing/plugins/#contributing-to-existing-plugins","title":"Contributing to Existing Plugins","text":"<p>Many plugins are open source and can be found on GitHub or Gitlab. you can find source code references on the plugin portal. For these plugins, you should be able to contribute via pull requests (or merge requests on Gitlab). Most of those plugins exist outside the <code>gradle</code> organization on GitHub.</p> <p>On the Gradle Plugin portal, each plugin has an Owner which may represent an individual or an organization. These owners fully define the maintenance and contributing policies, as well as lifecycle of the components they own. Hence, the contributing policy may differ. If specified, it can normally be found in <code>CONTRIBUTING.md</code> files in the repository.</p>"},{"location":"contributing/plugins/#creating-new-plugins","title":"Creating New Plugins","text":"<p>New Gradle plugins are welcome! If you develop a new integration or functionality for Gradle that might be useful to a wider community, we encourage you to do it in open source and to publish the plugin on our Plugin Portal.</p> <ul> <li>Writing Plugins</li> <li>Testing Plugins</li> <li>Publishing Plugins</li> </ul> <p>If you are looking for some Gradle Integration ideas, check out the Integrations Wishlist</p>"},{"location":"contributing/plugins/#references","title":"References","text":"<ul> <li>Understanding Plugins -   common types pf the plugins.</li> <li>Gradle Plugin Portal</li> </ul>"},{"location":"contributing/spread-the-word/","title":"Spread the Word","text":"<p>As any open source project, we rely on Gradle community members to share news and learnings on social media, blogs and other public channels. All content contributions are welcome!</p>"},{"location":"contributing/spread-the-word/#channels","title":"Channels","text":""},{"location":"contributing/spread-the-word/#social-media","title":"Social Media","text":"<p>When sharing on social media, consider using the <code>#gradle</code> hashtag or tagging Gradle directly. Our accounts are:</p> <ul> <li>LinkedIn company page</li> <li>X/Twitter (<code>@gradle</code>)</li> <li>YouTube (<code>@GradleInc</code>)</li> <li>Mastodon (<code>@gradle</code>)</li> <li>Facebook (<code>@gradleinc</code>)</li> </ul> <p>We also monitor the <code>#gradle</code> hashtag across major social media and blog platforms, and we will do our best to promote quality content there.</p>"},{"location":"contributing/spread-the-word/#community-news-on-slack","title":"Community News on Slack","text":"<p>On the Gradle Community Slack, we have a <code>#community-news</code> channel. Everyone is invited to share their highlights there, whether it is a new presentation, blog, or a plugin release!</p>"},{"location":"contributing/spread-the-word/#newsletter","title":"Newsletter","text":"<p>Gradle Build Tool has a Monthly Newsletter that is maintained by the team. This newsletter is formed based on the news we discover in the community channels. Every month, we also start a public Call for Proposals as a GitHub issue in gradle/community.</p>"},{"location":"contributing/spread-the-word/#gradle-fellowship","title":"Gradle Fellowship","text":"<p>The Gradle Fellowship are distinguished engineers from the Gradle community who, through collaboration and advocacy, encourage build tooling best practices. In addition to large scale community support, Fellows donate their time and talent to help the next generation of Gradle Fellowship members through direct one-on-one mentoring.</p> <p>See the list of people on the Gradle Fellows Page.</p>"},{"location":"contributing/documentation/","title":"Contributing to Gradle Documentation","text":"<p>Documentation is essential part of developer experience for Gradle Build Tool users. All contributions are welcome!</p>"},{"location":"contributing/documentation/#get-started","title":"Get Started","text":"<ul> <li>Join the community Slack workspace</li> <li>Use the <code>#docs</code> channel to discuss any documentation matters</li> <li>If your pull request gets stuck, do not hesitate to ask in the <code>#docs</code> or <code>#contributing</code> channels</li> </ul>"},{"location":"contributing/documentation/#overview","title":"Overview","text":"<p>In October 2024, we recorded a video overview about contributing to Gradle Documentation. You can watch it on YouTube, and see the slides below.</p> <p></p>"},{"location":"contributing/documentation/#locations","title":"Locations","text":"<ul> <li>Gradle Build Tool - User Manual on docs.gradle.org/     - This site includes main Gradle documentation sources, including but not limited to: User Manual, DSL Reference, documentation for core plugins and Javadoc     - Implementation: Asciidoc + custom documentation engine     - Contributor Guide</li> <li>Gradle Cookbook - a collection of recipes, guides and examples for the Gradle Build Tool.     - This is an additional solution-based documentation     - Implementation: MkDocs + Material for MkDocs     - Contributor Guide</li> <li>Plugin documentation - Documentation for the key plugins is provided by the Gradle Build Tool repo.   For other plugins, see their repositories for the docs and contributing guidelines.     - Implementation: most plugins use simple documentation pages in GitHub-flavored Markdown (<code>README.md</code>).</li> <li>Gradle Community Site -   Community resources and and top-level Gradle Contributor Guide     - Implementation - Markdown + MkDocs     - Contributor Guide</li> </ul>"},{"location":"contributing/documentation/#tools","title":"Tools","text":"<p>In Gradle we use a diverse set of tooling for documentation development. We use both Markdown and Asciidoc for writing, with MkDocs, Jekyll, and the Gradle Asciidoc Plugin as our main tools for documentation. Additionally, we utilize other tools such as Dokka, Javadoc, and OpenAPI specifications.</p> <p>Many small patches can be just submitted from the GitHub web editor. For bigger patches and local development, see the referenced contributing guidelines.</p>"},{"location":"contributing/documentation/#private-source-locations","title":"Private source locations","text":"<p>Please note that some of <code>gradle.org</code> locations are private source at the moment. It includes:</p> <ul> <li>The main site (gradle.org)</li> <li>The official blog (blog.gradle.org)</li> <li>The newsletter archive (newsletter.gradle.org)</li> <li>Gradle guides and most of the training courses (gradle.org/guides/)</li> </ul> <p>If you want to submit patches to any of those locations, please reach out to us on the <code>#docs</code> channel.</p>"},{"location":"events/","title":"Gradle Community Events","text":""},{"location":"events/#gradle-community-events","title":"Gradle Community Events","text":"<p>In Gradle, we organize multiple online events, and also often attend Java and open source community conferences like Devoxx or FOSDEM. We are happy to meet at those events. You can learn about the key upcoming events in our newsletter.</p> <p></p>"},{"location":"events/#gradle-events-calendar","title":"Gradle Events Calendar","text":""},{"location":"events/#mentorship-programs","title":"Mentorship Programs","text":"<p>In Gradle, we participate in mentorship programs and look for potential mentors and mentees to join us to learn together and create something new for Gradle Build Tool or integrations.</p>"},{"location":"events/#google-summer-of-code","title":"Google Summer of Code","text":"<p>Google Summer of Code (GSoC) is a global, online program focused on bringing new contributors into open source software development. GSoC Contributors work with an open source organization on a 12+ week programming project under the guidance of mentors. Gradle has participated in GSoC since 2023.</p> <p>See Google Summer of Code for more information</p>"},{"location":"events/#gradle-mentorship-program","title":"Gradle Mentorship Program","text":"<p>The Gradle Mentorship program links newer software engineers with Gradle Fellows to increase diversity in the Gradle community.</p> <p>In 2022, we ran the first cohort with 6 mentees participating. The program was open to everyone, but we prioritized mentees from underrepresented segments of the developer community, including women, and Black and Hispanic individuals, who wanted support and professional development assistance from members of the Gradle Build Tool community. Thanks to Gradle Fellows for mentoring!</p> <p>We consider continuing this program in the future.</p>"},{"location":"events/#ad-hoc-mentorship","title":"Ad-hoc Mentorship","text":"<p>Even if there are no active mentorship programs in Gradle Build Tool, we might be able to host something in the community for a particular initiative. If you are a maintainer or an active contributor interested in doing mentorship, reach out to us on the <code>#contributing</code> channel.</p>"},{"location":"events/#hacktoberfest","title":"Hacktoberfest","text":"<p>Hacktoberfest is a month-long celebration of open-source projects, their maintainers, and the entire community of contributors. Many component maintainers from the Gradle ecosystem, e.g. the Gradle plugin for Jenkins, already include their projects in Hacktoberfest.</p> <p>In 2024, we plan to participate as an organization, and to offer nice special-edition swag to the key contributors.</p>"},{"location":"events/#events-archive","title":"Events Archive","text":"<p>In the past we also hosted or participated in the following events:</p> <ul> <li>Major League Hacking Fellowship Program 2023</li> <li>Gradle Configuration Cache Hackathon 2022</li> </ul>"},{"location":"events/#stay-informed","title":"Stay Informed","text":"<p>Subscribe to the newsletter for updates about the upcoming community events and mentorship programs.</p>"},{"location":"events/gsoc/","title":"Gradle in Google Summer of Code","text":"<p>Google Summer of Code (GSoC) is a global, online program focused on bringing new contributors into open source software development. GSoC Contributors work with an open source organization on a 12+ week programming project under the guidance of mentors. Gradle has participated in GSoC since 2023.</p>"},{"location":"events/gsoc/#gsoc-2024","title":"GSoC 2024","text":"<p>Gradle participated in GSoC 2024 under the umbrellas of the Kotlin Foundation and the Eclipse Foundation. We started with 3 projects, but two of them didn't pass the midterm evaluation.</p> <p>Completed projects:</p> <ul> <li>Gradle Build Server \u2013 support for Android projects by Tanish Ranjan</li> </ul> <p>Aborted projects:</p> <ul> <li>Gradle Build Server - DevX and Language Support in Buildship by Sidhaarth Saraswathi Ramalingam</li> <li>Declarative Syntax and Enhancements for the Checkstyle Plugin by Hongjie (Jay) Wei</li> </ul>"},{"location":"events/gsoc/#communication-channels","title":"Communication channels","text":"<p>Project channels:</p> <ul> <li><code>#gradle-build-server</code> on the Gradle Community Slack</li> <li><code>#checkstyle-plugin</code> on the Gradle Community Slack</li> </ul> <p>Coordination:</p> <ul> <li><code>#gsoc</code> on the Gradle Community Slack</li> <li><code>#gsoc</code> on the Kotlin Foundation Slack</li> <li>The Eclipse Foundation uses Matrix for instant messaging. The service is available at chat.eclipse.org.</li> </ul>"},{"location":"events/gsoc/#mid-term-project-demos","title":"Mid-Term Project Demos","text":""},{"location":"events/gsoc/#resources","title":"Resources","text":"<ul> <li>Coordination Meeting Notes and Recordings</li> </ul>"},{"location":"events/gsoc/#for-contributorsmentees","title":"For Contributors/Mentees","text":"<p>See the project descriptions for references to particular newcomer-friendly issues or learning scenarios. If nothing is available there, it is recommended to start learning Gradle basics, if you aren't already familiar with them. Then, we recommend looking into some of the newcomer-friendly issues in the target project or in Gradle as whole. Prior track of contributions during the application phase is important during the project proposal reviews, because it helps us to build impression about the candidate.</p> <p>To get started:</p> <ol> <li>Join the <code>#gsoc</code> channel on the Gradle community Slack.   If there are such channels in the foundations, please join them too</li> <li>Explore the Getting Started with Gradle and the relevant topic-specific Gradle Guides</li> <li>Check out the contributing guidelines, try addressing some of the newcomer friendly issues</li> <li>Discuss the project ideas with your mentors on the public channels</li> </ol> <p>References:</p> <ul> <li>Official GSoC website -   all official guidelines are here. Please refer there about eligibility, stipend, and other similar matters managed by Google during the GSoC program</li> <li>Best practices for GSoC contributors,   by the Jenkins community - we will be using a similar framework</li> </ul>"},{"location":"events/gsoc/#for-mentors","title":"For Mentors","text":"<p>We invite Gradle community members, if they are interested in mentoring, to submit their project ideas.</p> <p>Mentoring requires a time commitment of several hours a week. It is a great opportunity to have someone prototyping your idea that it is not on the short term roadmap but remains interesting to you and valuable to the Gradle community.</p> <p>References:</p> <ul> <li>GSoC website</li> <li>Jenkins mentor guide -   Realistic expectations from mentors which we maintain in the Jenkins project</li> <li>Mentorship Programs. Growing new community leaders -   a presentation by Oleg Nenashev on mentorship programs</li> </ul>"},{"location":"events/gsoc/#archive","title":"Archive","text":""},{"location":"events/gsoc/#previous-years","title":"Previous Years","text":"<ul> <li>GSoC 2023 - 1 projects</li> </ul>"},{"location":"events/gsoc/2023/","title":"Gradle in Google Summer of Code 2023","text":""},{"location":"events/gsoc/2023/#gradle-in-google-summer-of-code-2023","title":"Gradle in Google Summer of Code 2023","text":"<p>In the summer of 2023, The Kotlin Foundation sponsored four projects for the Google Summer of Code 2023. The Gradle Kotlin Script Support for Eclipse and BuildShip project by Nikolai Vladimirov was one of them! Gradle, a Kotlin Foundation member, and Don\u00e1t Csik\u00f3s provided mentoring support for this project.</p> <p>The project's initial goal was to improve user interaction with Gradle Kotlin scripts inside the Eclipse IDE. The project aimed to implement several key functionalities, including syntax highlighting for Kotlin scripts, content assistance, go-to-definition, accurate diagnostics for syntax errors, signature help, and hovering. Nikolai successfully delivered these features by implementing support for Kotlin scripts based on the existing kotlin-language-server project, creating a new system to separate compilation environments for each build script. Read more about this project by Nikolai and the team.</p> <p></p>"},{"location":"events/gsoc/2024/","title":"Gradle in Google Summer of Code 2024","text":""},{"location":"events/gsoc/2024/#gradle-in-google-summer-of-code-2024","title":"Gradle in Google Summer of Code 2024","text":"<p>This is an active program.</p>"},{"location":"events/gsoc/2024/#current-status","title":"Current Status","text":"<p>See the main GSoC page for the status and more information.</p>"},{"location":"events/gsoc/2024/#archive","title":"Archive","text":""},{"location":"events/gsoc/2024/#2024-project-ideas","title":"2024 Project Ideas","text":"<p>Not all project applications were accepted in 2024, and we have some project ideas that are open for contributions. Consider them for GSoC 2025 or other open source mentorship program!</p> <ul> <li>Kotlin DSL improvements for Declarative Gradle -   Kotlin Foundation, Medium difficulty, 175 hrs</li> <li>Gradle build server \u2013 support for Android projects -   Kotlin Foundation, Medium or Hard difficulty, 175 hrs or 350 hrs</li> <li>Kotlin DSL documentation samples test framework -   Kotlin Foundation, Easy or Medium difficulty, 90 hrs or 175 hrs</li> <li>Improve Buildship project and classpath generation -   Eclipse Foundation, Easy difficulty, 175 hrs or 350 hrs</li> <li>Make Buildship independent from the Eclipse Gradle plugin -   Eclipse Foundation, Medium or Hard difficulty, 175 hrs or 350 hrs</li> <li>Eclipse and Gradle Build Server -   Eclipse Foundation, Medium or Hard difficulty, 175 hrs or 350 hrs</li> </ul>"},{"location":"events/gsoc/2024/checkstyle-plugin/","title":"Declarative Syntax and enhancements for the Checkstyle plugin","text":""},{"location":"events/gsoc/2024/checkstyle-plugin/#gsoc-2024-declarative-syntax-and-enhancements-for-the-checkstyle-plugin","title":"GSoC 2024. Declarative Syntax and Enhancements for the Checkstyle Plugin","text":""},{"location":"events/gsoc/2024/checkstyle-plugin/#goal","title":"Goal","text":"<ul> <li>Enhanced Functionality: Enhance the Checkstyle plugin to support more of Checkstyle's features.</li> <li>Better Declarativity: improve the declarative nature of Kotlin DSL when integrating plugins.</li> </ul>"},{"location":"events/gsoc/2024/checkstyle-plugin/#status","title":"Status","text":"<p>Stopped (after mid-term evaluation)</p>"},{"location":"events/gsoc/2024/checkstyle-plugin/#team","title":"Team","text":""},{"location":"events/gsoc/2024/checkstyle-plugin/#authors","title":"Authors","text":"<ul> <li>Hongjie Wei - <code>@JayWei1215</code></li> </ul>"},{"location":"events/gsoc/2024/checkstyle-plugin/#mentors","title":"Mentors","text":"<ul> <li>@oleg-nenashev</li> </ul>"},{"location":"events/gsoc/2024/checkstyle-plugin/#background","title":"Background","text":"<ul> <li>Checkstyle is a powerful tool, but currently, the Checkstyle plugin in Gradle may not support all of Checkstyle's features.</li> <li>Kotlin DSL does not provide good declarative support when it comes to integrating plugins.</li> </ul>"},{"location":"events/gsoc/2024/checkstyle-plugin/#implementation","title":"Implementation","text":"<ul> <li>Enhanced Functionality - The CheckstyleExtension class is the extension class of the Gradle Checkstyle plugin.It is used to configure various options of the Checkstyle plugin.By Creating a new subclass of CheckstyleExtension and add some new properties, we can make the Checkstyle plugin support more of Checkstyle's features.</li> </ul> <ul> <li>Better Declarativity - Create a Kotlin class to serve as the entry point for the DSL. This class can inherit from CheckstyleExtension. Within the DSL class, define properties and methods specific to the DSL, allowing for the configuration of Checkstyle's various options.</li> </ul>"},{"location":"events/gsoc/2024/checkstyle-plugin/#target-repositories","title":"Target Repositories","text":""},{"location":"events/gsoc/2024/checkstyle-plugin/#deliverables","title":"Deliverables","text":"<ul> <li>Create a new branch in the project repository specifically for developing the Checkstyle plugin functionality, which will contain the code necessary for implementing and testing the Checkstyle plugin.</li> </ul> <ul> <li>Provide an enhanced version of the Gradle Checkstyle plugin. It will support additional Checkstyle features, such as code complexity, duplication, and dependency checks.</li> </ul> <ul> <li>Provide an improved Kotlin DSL, particularly enhancing its declarativity when integrating plugins.</li> </ul>"},{"location":"events/gsoc/2024/checkstyle-plugin/#mid-term-project-demo","title":"Mid-Term Project Demo","text":""},{"location":"events/gsoc/2024/checkstyle-plugin/#links","title":"Links","text":"<ul> <li>Contributor Proposal</li> <li>Project Proposal</li> <li>Declarative Gradle</li> <li>Checkstyle</li> <li>Checkstyle Plugin</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-android/","title":"Gradle Build Server - support for Android projects","text":""},{"location":"events/gsoc/2024/gradle-build-server-android/#gsoc-2024-gradle-build-server-support-for-android-projects","title":"GSoC 2024. Gradle Build Server \u2013 support for Android projects","text":"<p>This project aims to enhance Gradle Build Server project from Microsoft by integrating powerful Android Studio features. Bridging the build process gap between Android Studio and Gradle Build Server, will significantly improve the development experience for many Android developers using Text Editors/IDEs which utilize the Build Server Protocol (BSP).</p>"},{"location":"events/gsoc/2024/gradle-build-server-android/#status","title":"Status","text":"<p>Passed end-term evaluation with successful completion of composite build support, <code>JAVA_HOME</code> handling and Android support PRs all merged.</p>"},{"location":"events/gsoc/2024/gradle-build-server-android/#goal","title":"Goal","text":"<ol> <li>Add support for composite builds. (vscode-gradle issue #1435)</li> <li>Java Home detection and sending notification on incompatibility. (issue #75 &amp; issue #76)</li> <li>Add Android support with resolution of Android Java projects.</li> </ol>"},{"location":"events/gsoc/2024/gradle-build-server-android/#team","title":"Team","text":""},{"location":"events/gsoc/2024/gradle-build-server-android/#contributor","title":"Contributor","text":"<ul> <li>@Tanish-Ranjan</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-android/#mentors","title":"Mentors","text":"<ul> <li>@donat</li> <li>@hegyibalint</li> <li>@jdneo</li> <li>@reinsch82</li> <li>@oleg-nenashev as community advisor</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-android/#rationale","title":"Rationale","text":"<p>As the popularity of Android development grows, the need for efficient build automation tools like the Gradle Build Server becomes increasingly important. However, current limitations in identifying and managing common Gradle functionalities used in Android projects within the server can hinder developer workflows. This project aims to bridge this gap by introducing functionalities specifically tailored to Android development.</p>"},{"location":"events/gsoc/2024/gradle-build-server-android/#deliverables","title":"Deliverables","text":""},{"location":"events/gsoc/2024/gradle-build-server-android/#composite-build-support-vscode-gradle-issue-1435","title":"Composite-Build Support (vscode-gradle issue #1435)","text":"<p>Status: Complete (Merged) </p> <p>Pull Requests: #154, #160</p> <p>Objectives:</p> <ul> <li>Add support for building projects with composite builds.</li> </ul> <p>Pre-requisites:</p> <ul> <li>Understanding Gradle API and Gradle Tooling API</li> </ul> <p>Implemented Features:</p> <ul> <li> Took over some work already done by @Arthurm1 in PR#122, into PR#154.</li> <li> Utilized build actions to retrieve source sets from composite build projects which allowed for dependency substitution.</li> <li> Fixed language extension downcast issue in PR#160 which was breaking composite builds.</li> </ul> Supporting Diagrams:"},{"location":"events/gsoc/2024/gradle-build-server-android/#improved-gradle-java-home-handling-issue-75-and-issue-76","title":"Improved Gradle Java Home Handling (issue #75 and issue #76)","text":"<p>Status: Complete (Merged) </p> <p>Pull Request: #165</p> <p>Objectives:</p> <ul> <li>Build the project with default configurations, if Java Home is incompatible try and find a suitable Java Home.</li> <li>If incompatible Java Home is detected notify client of the incompatibility. </li> </ul> <p>Implemented Features:</p> <ul> <li> Probe build the project to find if default Java Home configuration is compatible.</li> <li> In case of incompatibility try to find a compatible Java Home in the given order:     1. GradleJavaHome (Gradle Properties)     2. UserJavaHome (Retrieved from preferences)</li> <li> If project's default Java Home was incompatible, notify client we switched to a different Java Home for compatibility.</li> <li> Notify client, if the fallback logic couldn't find a compatible Java Home.</li> </ul> Supporting Diagrams:"},{"location":"events/gsoc/2024/gradle-build-server-android/#android-java-project-support","title":"Android Java Project Support","text":"<p>Status: Complete (Merged) </p> <p>Pull Request: #173</p> <p>Objectives:</p> <ul> <li>Providing build targets for Android Java projects to the client</li> </ul> <p>Pre-requisites:</p> <ul> <li>Understanding the entire Android build process and changes to the Android Gradle Plugin.</li> </ul> <p>Implemented Features:</p> <ul> <li> Extracted Build Variants and their properties from Android projects via reflection.</li> <li> Populated GradleSourceSet (build target model) with build variant properties.</li> <li> Provided Android SDK components and R file via dependency modules of the build target.</li> </ul> <p>Limitations:</p> <ul> <li>Android generates a lot of intermediate sources such as AIDL, Render script, C/CPP, etc. Unfortunately AGP doesn't provide any APIs to retrieve these files. <code>R.jar</code> is one of these intermediate sources which is crucial for Android development so as a workaround I have retrieved the file using the process task for the build variant however, in some cases the task may not be registered during the sync in which case the dependency for <code>R.jar</code> is not provided. (Issue #181)</li> <li>There various kinds of projects that come under Android development such as Application, Library, Instant App, Dynamic Modules, Android Test, etc. I have added support for the most commonly used projects - Application and Library but the current implementation may require further enhancements to support other kinds of projects. (Issue #182)</li> <li>My implementation takes into account all configured build variants except the default test variants - <code>test</code> and <code>androidTest</code>. (Issue #183)</li> <li>Android Components to be used by an Android project is configured via <code>ANDROID_HOME</code> environment variable. If the property doesn't exist then we are not providing the dependency. This implementation can be improved via fallback logic similar to what we did for <code>JAVA_HOME</code> in PR #165. (Issue #184)</li> </ul> Supporting Diagrams:"},{"location":"events/gsoc/2024/gradle-build-server-android/#documentation","title":"Documentation:","text":"<p>Status: Complete </p> <p>All my code is properly documented with JavaDocs and developer documentation is available in the Gradle Build Server with the following contents:</p> <ul> <li>Documentation for implemented functionalities (composite-build support, Java Home handling, Android Java project support).</li> <li>Usage instructions and troubleshooting steps for the added functionalities.</li> <li>Clear examples and diagrams to enhance understanding.</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-android/#unit-and-integration-tests","title":"Unit and Integration Tests:","text":"<p>Status: Complete </p> <p>Within the Gradle Build Server I have added unit tests and integration tests to ensure the accuracy and reliability of the implemented functionalities.</p> <ul> <li><code>testCompositeBuild1</code> and <code>testCompositeBuild2</code> unit tests ensure all the source sets from the composite build test projects are retrieved and the build target dependencies are mapped properly.</li> <li><code>testCompatibleDefaultJavaHomeProjectServer</code>, <code>testCompatibleUserJavaHomeProjectServer</code> and <code>testIncompatibleUserJavaHomeProjectServer</code> integration tests ensures the robustness of Gradle Java Home handling logic in different scenarios:<ol> <li>Default configuration is compatible</li> <li>Compatible JDK available in User Preferences</li> <li>No compatible JDK supplied by any mechanism</li> </ol> </li> <li><code>testGetJavaVersionFromFile</code>, <code>testGetJavaVersionFromFile_SimulatedException</code> and <code>testGetJavaVersionFromFile_NonExistentExecutable</code> unit tests ensure the Java version is successfully extracted from the given JDK file while handling possible failure scenarios.</li> <li><code>testIsCompatible_Valid</code>, <code>testIsCompatible_OldestInvalid</code> and <code>testIsCompatible_LatestInvalid</code> unit tests ensures the reliability of the compatibility checks for different java versions.</li> <li><code>testAndroidSourceSets</code> unit test ensures all the source sets(converted from android build variants) are correctly retrieved from the model builder and all the module dependencies are present.</li> <li><code>testAndroidBuildTargets</code> integration test ensures the Android Components is added to the module dependency of the build targets.</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-android/#demos","title":"Demos","text":""},{"location":"events/gsoc/2024/gradle-build-server-android/#mid-term-progress","title":"Mid-Term progress","text":""},{"location":"events/gsoc/2024/gradle-build-server-android/#collaboration-and-learning","title":"Collaboration and Learning","text":"<p>Throughout the program I have collaborated with all of my mentors and gained invaluable insights into open source development - best practices, project management and contributions. They also helped me learn how to explore large project repositories for research.</p> <p>My work on this project, significantly expanded my skill set, encompassing JSON-RPC, Language Server Protocol, Build Server Protocol, Gradle, Gradle API, Gradle Tooling API, AGP, testing methodologies and merging techniques with git. I successfully applied these learnings to produce the mentioned outcomes.</p> <p>If anyone is interested to continue the work and bring further support for Android projects in Gradle Build Server then you can get started with the following issues mentioned in this comment:</p> <ul> <li>Improve support for Android intermediate generated sources #181</li> <li>Support for different types of Android projects #182</li> <li>Test variants discovery for Android projects #183</li> <li>ANDROID_HOME fallback logic #184</li> </ul> <p>You can view all Android support related issues here.</p>"},{"location":"events/gsoc/2024/gradle-build-server-android/#post-gsoc-progress","title":"Post GSoC progress","text":"<p>The following progress has been made after final evaluation for this GSoC project was complete.</p>"},{"location":"events/gsoc/2024/gradle-build-server-android/#1-updated-gradle-for-java-vscode-extension","title":"1. Updated Gradle for Java vscode extension","text":"<p>With #1594 in vscode-gradle, it can now extract <code>classes.jar</code> file from the given android library (.aar) file.</p>"},{"location":"events/gsoc/2024/gradle-build-server-android/#2-android-test-variants-recognition","title":"2. Android test variants recognition","text":"<p>Recognizing default android test variants - <code>test</code> and <code>androidTest</code> with #194.</p>"},{"location":"events/gsoc/2024/gradle-build-server-android/#links","title":"Links","text":"<ul> <li>Project page on the GSoC site</li> <li>Contributor Proposal</li> <li>Gradle Build Server</li> <li>Mid-Term Project Demo</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-devx/","title":"DevX and Language support in Buildship","text":""},{"location":"events/gsoc/2024/gradle-build-server-devx/#gsoc-2024-gradle-build-server-devx-and-language-support-in-buildship","title":"GSoC 2024. Gradle Build Server - DevX and Language Support in Buildship","text":""},{"location":"events/gsoc/2024/gradle-build-server-devx/#goalobjective","title":"Goal/Objective","text":"<ul> <li>Implement a fully powered version of Gradle BSP for Eclipse Buildship to support DevX &amp; Language Support in Buildship.</li> <li>We will add more functionalities to the existing BSP Implementation for providing the required support in Eclipse Buildship.</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#status","title":"Status","text":"<p>Stopped (after mid-term evaluation)</p>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#team","title":"Team","text":""},{"location":"events/gsoc/2024/gradle-build-server-devx/#authors","title":"Authors","text":"<ul> <li>@Sidhaarthsr</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#mentors","title":"Mentors","text":"<ul> <li>@donat</li> <li>@jdneo</li> <li>@hegyibalint</li> <li>@reinsch82</li> <li>@oleg-nenashev (as community advisor)</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#rationale","title":"Rationale","text":"<p>The Eclipse buildship currently orchestrates the Gradle Build Tasks directly without using the BSP Interface. The Build Server Protocol promises excellent, pluggable, IDE agnostic tooling for build systems. Recently, a new Build Server for Gradle (Gradle BSP) has been published. Its current functionality, however, is focused only on the Visual Studio Code integration to provide correct classpath for Java projects and optimal support for Code Generation, such as Annotation Processing. However, There\u2019s a lot of potential in extending this build server. </p> <p>A more complete implementation should be able to: - Describe the Gradle build structure, allowing easy integration to project import - Execute tasks with cancellation support - Execute tests - Support additional languages</p>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#implementation","title":"Implementation","text":"<p>Eclipse Buildship - In the updated implementation, the Eclipse Buildship plugin will use the fully-powered BSP Gradle interface to orchestrate all the Gradle Build tasks. In order to leverage Gradle BSP interface, the Eclipse Buildship plugin will use the requests defined in the BSP interface to orchestrate build tasks in Gradle and will process notifications returned by the Build Server for those BSP requests accordingly.</p> <p>Extending Gradle Build Server Capabilities - We will extend the capabilities of the Gradle BSP Server by implementing the requests that are unsupported in the current BSP Implementation for VS Code.</p>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#target-repositories","title":"Target Repositories","text":"<ul> <li>Eclipse Buildship</li> <li>Microsoft Build Server For Gradle</li> </ul>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#deliverables","title":"Deliverables","text":"<p>The Eclipse Buildship plugin with updated code that uses the requests implemented in the BSP Interface to orchestrate the Build Tasks in Gradle projects. We'll reuse the existing BSP requests and implement the newer BSP requests in microsoft's build-server-for-gradle repository.</p> <p>The following BSP requests implemented in microsoft's build-server-for-gradle repository:  - buildTarget/run - buildTarget/test - buildTarget/inverseSources - debugSession/start</p> <p>The Eclipse buildship client will be equipped with capabilities to process all possible BSP notifications returned by the Build Server to facilitate support for the targeted requirements.</p>"},{"location":"events/gsoc/2024/gradle-build-server-devx/#links","title":"Links","text":"<ul> <li>Contributor Proposal</li> <li>Project Proposal</li> <li>Eclipse Buildship</li> </ul>"},{"location":"events/hacktoberfest/","title":"Gradle in Hacktoberfest","text":""},{"location":"events/hacktoberfest/#gradle-in-hacktoberfest","title":"Gradle in Hacktoberfest","text":"<p>Hacktoberfest is a month-long celebration of open-source projects, their maintainers, and the global community of contributors. Many maintainers within the Gradle ecosystem, such as those behind the Gradle plugin for Jenkins, already include their projects in Hacktoberfest.</p> <p>In 2024, we\u2019re excited to join as an organization and will be offering special-edition swag to key contributors.</p> <p>Sign Up for Updates </p>"},{"location":"events/hacktoberfest/#years","title":"Years","text":"<ul> <li>2024</li> </ul>"},{"location":"events/hacktoberfest/2024/","title":"Gradle in Hacktoberfest 2024","text":"<p>Hacktoberfest is a month-long celebration of open-source projects, their maintainers and contributors. Many component maintainers from the Gradle ecosystem, such as the Gradle plugin for Jenkins, already include their projects in Hacktoberfest.</p> <p>This year, Gradle is participating in Hacktoberfest! We are looking forward to collaborating with all contributors on the featured projects, hosting online events for new open-source contributors, and sending custom Gradle goodies for those who do substantial contributions to the Gradle ecosystem.</p>"},{"location":"events/hacktoberfest/2024/#quick-start","title":"Quick Start","text":"<ol> <li>Sign-up for Hacktoberfest on hacktoberfest.com</li> <li>Sign-up in this form for Gradle so that   we can contact you and distribute swag</li> <li>Join the <code>#hacktoberfest</code> channel on the Gradle Community Slack</li> <li>Check out the Featured Projects below, or choose something on your own</li> <li>Enjoy, and send some pull requests! </li> </ol> <p>Also, consider joining us for Hacktoberfest events! There, we plan to provide some tips on contributing to various aspects of Gradle.</p>"},{"location":"events/hacktoberfest/2024/#featured-projects","title":"Featured Projects","text":"<p>During Hacktoberfest, you are welcome to work on any project marked with the <code>hacktoberfest</code> topic on GitHub or Gitlab. Of course, we invite you to work on the following Gradle related projects: plugins, tools, documentation and examples.</p> <p>Below, there are a few project ideas we have in mind for the event, with different levels of complexity:</p> <ul> <li>\ud83c\udf93 Beginner: Learn Gradle - Gradle Basics, Java, Kotlin, Android</li> <li>\u2705 Easy: Adopt Gradle Best Practices in your projects with GitHub Actions -   GitHub Actions, Scripting, Documentation</li> <li>\ud83d\udcd6 Easy/Medium: Expand the Gradle Cookbook -   Documentation, Markdown, tech of your choice</li> <li>\ud83c\udf10 Easy/Medium: Improve the Gradle Community Site (this one!) -   MkDocs, Web Design, Documentation</li> <li>\ud83d\udc18 Medium: Contribute to GradleUp Plugins -   Java, Kotlin, Android, Documentation</li> <li>\ud83d\ude0e Medium: Stabilize support for ViteJS -   Kotlin, JavaScript ecosystem, Gradle</li> <li>\ud83d\udee0\ufe0f Medium/Advanced: Configuration Cache Compatibility in Plugins -   Java, Kotlin, Gradle</li> </ul> <p></p>"},{"location":"events/hacktoberfest/2024/#learn-gradle","title":"\ud83c\udf93 Learn Gradle","text":"<p>If you are just starting out with Gradle, you can learn through common Java, Kotlin or Android projects.</p> <ul> <li>Learn Gradle Build Tool with free courses on DPE University. Learn Gradle features, create new repositories while learning, and make sure to mark them with <code>#hacktoberfest</code>!</li> <li>If you see any issues with the documentation or samples,   please submit issues or pull requests. They count towards Hacktoberfest.</li> </ul> <p>More advanced users can also experiment with Declarative Gradle and share their feedback. See the Getting Started Guide for the pointers.</p> <p>To discuss your learning experiences, use the <code>#docs</code> channel on the Community Slack.</p> <p></p>"},{"location":"events/hacktoberfest/2024/#adopt-gradle-best-practices-in-your-github-actions","title":"\u2705 Adopt Gradle Best Practices in your GitHub Actions","text":"<p>We invite everyone to adopt Gradle &amp; GitHub Actions best practices. You can:</p> <ul> <li>Make them safer by enabling the Dependency Submission Action to detect vulnerable dependencies with -   How To</li> <li>Adopt the <code>setup-gradle</code> action to enable Build Caching in your builds</li> <li>Connect them to Gradle Build Scan to get better insights and troubleshooting experience - How To</li> <li>Update documentation for the Actions, based on your experiences   (GitHub Repo, GRadle Cookbook Pages)</li> </ul> <p>To tag your patches for Hacktoberfest, please reference this ticket in the pull requests, and add the <code>hacktoberfest</code> topic.</p> <p>References:</p> <ul> <li>GitHub Repository</li> <li>Discuss: <code>#github-integrations</code> channel on the Community Slack</li> </ul> <p></p>"},{"location":"events/hacktoberfest/2024/#configuration-cache-compatibility-in-plugins","title":"\ud83d\udee0\ufe0f Configuration Cache Compatibility in Plugins","text":"<p>In the upcoming Gradle 9.0 release, we plan to recommend enabling the Gradle Configuration Cache by default. It will greatly speed up all aspects of Gradle by caching the Gradle work graph created during the configuration phase. There have been compatibility issues in plugins, and some are yet to be discovered and fixed. Hence, we invite contributors to work on updating the plugin ecosystem, and to test your builds for Configuration Cache compatibility.</p> <p>References:</p> <ul> <li>List of plugin statuses and open issues,   including known issues up for grabs</li> <li>How To: Fixing Configuration Cache issues</li> <li>Discuss: <code>#configuration-cache</code> channel on the Community Slack</li> </ul> <p></p>"},{"location":"events/hacktoberfest/2024/#expand-the-gradle-cookbook","title":"\ud83d\udcd6 Expand the Gradle Cookbook","text":"<p>We are working on the Gradle Cookbook - a new community resource with recipes for cases that are not included in the main Gradle documentation, including tool integrations, solutions for specific languages, and tech stacks (e.g. Android), tips on troubleshooting and plugin development.</p> <p>You are welcome to create new recipes, or to update the existing ones. For example, we know that some CI recipes are dated, and contributions are needed!</p> <p>References:</p> <ul> <li>Contributing to the Gradle Cookbook</li> <li>Open Issues</li> <li>Discuss: <code>#docs</code> channel on the Community Slack</li> </ul> <p></p>"},{"location":"events/hacktoberfest/2024/#contribute-to-gradleup-plugins","title":"\ud83d\udc18 Contribute to GradleUp Plugins","text":"<p>GradleUp is a new GitHub organization focusing on simplifying Java, Kotlin and Android development with Gradle. The team nominated a few projects for Hacktoberfest: Shadow Plugin, Static Analysis Plugin, Gratatouille, etc. Contributions to other projects are welcome, too!</p> <p>References:</p> <ul> <li>Contributing to GradleUp</li> <li>Suggested GitHub Issues</li> <li>Discuss: <code>#gradleup</code> channel on the Community Slack</li> </ul> <p></p>"},{"location":"events/hacktoberfest/2024/#improve-the-community-site","title":"\ud83c\udf10 Improve the Community Site","text":"<p>We created this community site in early 2024, and there are many improvements to be done! Improving the look &amp; feel, creating new content, etc... All patches are welcome!</p> <p>References:</p> <ul> <li>Contributing to the Community Site</li> <li>Open Issues</li> </ul>"},{"location":"events/hacktoberfest/2024/#stabilize-support-for-vitejs","title":"\ud83d\ude0e Stabilize support for ViteJS","text":"<p>OpenSavvy is working on bringing the ViteJS bundler to the Gradle Build Tool, in particular for the Kotlin Multiplatform stack. The initial version works on simple projects, but breaks when used with some configurations or libraries. We're searching for contributors who can help us understand what goes wrong so we can stabilize and release the project.</p> <p>References:</p> <ul> <li>Repository</li> <li>Documentation</li> <li>Suggested GitLab issues</li> <li>Discuss: <code>#opensavvy</code> in the Kotlin Slack, or by commenting on issues</li> </ul>"},{"location":"events/hacktoberfest/2024/#more-featured-projects","title":"\u00bfMore Featured Projects?","text":"<p>During the Hacktoberfest, maintainers are welcome to add their project if they provide contributor guidelines and issues that can be worked on by contributors. If you want to add your project, add a <code>hacktoberfest</code> topic to it and submit a pull request to this page. It counts as a contribution, too </p>"},{"location":"events/hacktoberfest/2024/#swag","title":"Swag","text":"<p>In addition to our Hacktoberfest swag, we plan to send something nice to those who make substantial contributions to Gradle Build Tool and its ecosystem. Make sure to register in Our Sign-Up Form so that we can discover your contributions.</p> <p></p>"},{"location":"events/hacktoberfest/2024/#events","title":"Events","text":"<p>We plan some online events during October, with a goal to help with contributions. Those events will be recorded:</p> <ul> <li>October 02, 14:00 UTC - Opening Office Hours and Q&amp;A.   The link will be shared soon.</li> </ul> <p>Info</p> <p>More events are coming soon! We plan a few presentations and office hours for new contributors to open source.</p>"},{"location":"events/hacktoberfest/2024/#stay-informed","title":"Stay Informed","text":"<p>Join the <code>#hacktoberfest</code> channel on the Gradle Community Slack where we will be posting key updates and answering questions.</p> <p>For future events, subscribe to the newsletter for updates about the upcoming community events and mentorship programs, and also follow them on the <code>#community-news</code> channel.</p>"},{"location":"projects/","title":"Key Gradle Projects","text":""},{"location":"projects/#key-gradle-projects","title":"Key Gradle Projects","text":"<p>On this site, we list a few key projects within the Gradle Build Tool ecosystem. See the links on the left.</p> <p>DISCLAIMER: The list below is an experimental one. It does not represent an actual list of the project considered key ones by Gradle Inc. or by the Gradle community. No endorsement of one project over another is implied. Please feel free to add your projects to the list!</p>"},{"location":"projects/#core-projects","title":"Core Projects","text":"<p>NOTE: There will be a quick-nav grid layout, so we do not bother with a look&amp;feel for now</p> <ul> <li>Gradle Build Tool</li> <li>Declarative Gradle</li> <li>Gradle Profiler</li> <li>GitHub Actions for Gradle</li> </ul>"},{"location":"projects/#independent-community-projects","title":"Independent Community Projects","text":"<p>Here are some projects we would like to highlight</p> <ul> <li>Gradle X - provides high quality extensions for Gradle Build Tool that make it more pleasant to use</li> <li>Gradle Build Server - an implementation of Build Server Protocol (BSP) for Gradle</li> </ul>"},{"location":"projects/#adding-your-projects","title":"Adding your projects","text":"<p>Just submit a pull request with a patch to this page!</p>"},{"location":"resources/","title":"Gradle Community Resources","text":"<p>Below you can see the list of the Gradle community resources available to all users and contributors.</p>"},{"location":"resources/books/","title":"Gradle Books","text":"<p>Below you can see an incomplete list of Gradle related books. Got a book recommendation? Add it here!</p>"},{"location":"resources/social-media/","title":"Gradle on Social Media","text":""},{"location":"resources/social-media/#gradle-on-social-media","title":"Gradle on Social Media","text":""},{"location":"resources/social-media/#our-channels","title":"Our channels","text":"<p>The open source project and Gradle Inc. social media channels are currently combined. Nevertheless, there is plenty of Gradle Build Tool content there, make sure to subscribe!</p> <ul> <li>LinkedIn (<code>@Gradle</code>)</li> <li>X/Twitter (<code>@gradle</code>)</li> <li>YouTube (<code>@GradleInc</code>)</li> <li>Mastodon (<code>@gradle</code>)</li> <li>Facebook (<code>@gradleinc</code>)</li> </ul> <p>P.S: When sharing on social media, consider using the <code>#gradle</code> hashtag or tagging Gradle directly.</p>"},{"location":"resources/social-media/#contributing","title":"Contributing","text":"<p>Any content contributions are welcome and appreciated! See Spread the Word.</p>"},{"location":"surveys/developer-survey/","title":"Gradle Build Tool - 2024 Software Developer Survey","text":""},{"location":"surveys/developer-survey/#gradle-build-tool-software-developer-survey","title":"Gradle Build Tool - Software Developer Survey","text":"<p>The Gradle team is committed to enhancing developer experience, as one of the top priorities on the Gradle Roadmap. Your feedback is crucial in helping us prioritize our efforts! The survey will be open for responses until the end of the year, and we intend to make it a recurrent event.</p>"},{"location":"surveys/developer-survey/#take-the-survey","title":"Take the Survey","text":"<p>You can take the survey below. If it does not load, use this direct link.</p> <p> Create your own user feedback survey </p>"},{"location":"surveys/developer-survey/#swag","title":"Swag","text":"<p>We offer a gift card raffle for anonymous responses. The most active participants, who provide substantial feedback and participate in follow-up interviews with us, will get special edition Gradle swag. To participate in the raffle, submit your feedback by October 31st, 2024.</p>"},{"location":"surveys/developer-survey/#results","title":"Results","text":"<p>Once we collect enough data for processing, we will publish the initial survey results on this page. Thanks everyone!</p> <p></p>"},{"location":"dotgithub/","title":"Gradle's .github Project","text":""},{"location":"dotgithub/#gradles-github-project","title":"Gradle's .github Project","text":"<p>This project sets the default policies for all repositories.</p> <p>For more information, see this GitHub guide: Creating a default community health file for your organization</p>"},{"location":"dotgithub/CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"dotgithub/CODE_OF_CONDUCT/#code-of-conduct","title":"Code of Conduct","text":"<p>In order to foster a more inclusive community, Gradle has adopted the Contributor Covenant.</p> <p>Contributors must follow the Code of Conduct outlined at https://gradle.org/conduct/.</p>"},{"location":"dotgithub/SECURITY/","title":"Reporting Vulnerabilities","text":""},{"location":"dotgithub/SECURITY/#gradle-vulnerability-disclosure-policy","title":"Gradle Vulnerability Disclosure Policy","text":""},{"location":"dotgithub/SECURITY/#introduction","title":"Introduction","text":"<p>The Gradle Security Vulnerability Disclosure Policy (the \u201cPolicy\u201d) is designed to foster an environment where security researchers are encouraged to disclose vulnerabilities and work with us to mitigate potential security vulnerabilities. We value the contributions of security researchers acting in good-faith to help us maintain a high standard for the security and privacy for our users. This includes encouraging responsible vulnerability research. This Policy describes the systems and types of research that we authorize researchers to use with respect to our software and services, provides guidelines on how to send us vulnerability reports, and summarizes what you can expect from us in return.</p>"},{"location":"dotgithub/SECURITY/#expectations","title":"Expectations","text":"<p>Except for with regard to vulnerability types listed below under the subheading \u201cVulnerability Types Not Eligible for Reward\u201d, when working with us and reporting a vulnerability in accordance with this Policy, you can expect us to: Work with you to understand and validate your report, including a timely initial response to the submission; Work to remediate discovered vulnerabilities in a timely manner; and Recognize your contribution to improving our security if you are the first to report a unique vulnerability, and your report triggers a code or configuration change.</p>"},{"location":"dotgithub/SECURITY/#scope-software-and-services","title":"Scope: Software and Services","text":"<p>This Policy applies to the below listed software and services (the \u201cScope\u201d). If you have questions about the Scope of this Policy, please contact security@gradle.com.</p> <p>Though we develop and maintain other internet-accessible systems or services, we ask that active research and testing only be conducted on the systems and services covered by the Scope of this document. If there is a particular system not in Scope that you think merits testing, please contact us to discuss it first. We may increase the Scope of this Policy over time.</p>"},{"location":"dotgithub/SECURITY/#software","title":"Software","text":""},{"location":"dotgithub/SECURITY/#scope","title":"Scope","text":"<ul> <li>Gradle Build Tool (Code)</li> <li>Develocity (fka. Gradle Enterprise)</li> <li>Gradle Build Cache (Docker Image)</li> <li>Official Gradle Plugins published under the Gradle organization, or by our current team</li> <li>Any non-example (ie. sample code) and non-archived repositories under the Gradle GitHub Organization</li> <li>Third party dependencies of any of the above; however, the report must demonstrates how the vulnerability impacts Gradle\u2019s use of that dependency</li> </ul>"},{"location":"dotgithub/SECURITY/#services","title":"Services","text":""},{"location":"dotgithub/SECURITY/#scope_1","title":"Scope","text":"<ul> <li>*.gradle.org</li> <li>*.gradle.com</li> <li>*.grdev.net</li> </ul>"},{"location":"dotgithub/SECURITY/#out-of-scope","title":"Out-of-Scope","text":""},{"location":"dotgithub/SECURITY/#domains-out-of-scope","title":"Domains Out-of-Scope","text":"<p>If a DNS Record is pointing to a third party SaaS provider, it's likely out of scope of our Vulnerability Disclosure Policy on the basis that it's pointing to a third party that we can't authorize testing against. Such as;  </p> <ul> <li>t.gradle.com</li> <li>go.gradle.com</li> <li>tv.gradle.com</li> <li>www2.gradle.org</li> <li>www2.gradle.com</li> <li>email.gradle.org</li> <li>k1._domainkey.gradle.com</li> <li>status.gradle.com</li> <li>email.gradle.org</li> <li>mail.gradle.com</li> <li>calendar.gradle.com </li> <li>support.gradle.com</li> <li>repo.gradle.org </li> <li>event.gradle.com</li> <li>share.gradle.com</li> <li>static-share.gradle.com</li> </ul>"},{"location":"dotgithub/SECURITY/#rewards","title":"Rewards","text":"<p>At this time, we do not offer financial \u201cBug Bounties\u201d. However, for previously unreported vulnerability reports that trigger a code or configuration change, you will be eligible to receive swag as a thank you for your contribution.</p> <p>To be eligible for a reward under this program:</p> <ul> <li>The security bug must be original and previously unreported.</li> <li>You must not have written the buggy code or otherwise been involved in contributing the buggy code to the Gradle project.</li> <li>You must not be on a US sanctions list or in a country on the US sanctions list (e.g. Cuba, Iran, North Korea, Crimea region of Ukraine, Sudan, and Syria).</li> </ul>"},{"location":"dotgithub/SECURITY/#vulnerability-types-not-eligible-for-reward","title":"Vulnerability Types Not Eligible for Reward","text":"<ul> <li>SSL/TLS scan reports (this means output from sites such as SSL Labs) and SSL/TLS version related vulnerabilities</li> <li>Self-XSS</li> <li>CSRF for non-significant actions (logout, etc.)</li> <li>Clickjacking attacks without a documented series of clicks that produce a vulnerability</li> <li>Spam (including issues related to SPF/DKIM/DMARC)</li> <li>Denial-of-service attacks or issues related to rate limiting</li> <li>Content injection, such as reflected text or HTML tags</li> <li>Missing HTTP headers, except as where their absence fails to mitigate an existing attack</li> <li>Authentication bypasses that require access to software/hardware tokens</li> <li>Vulnerabilities that only affect users with specific browsers (must work either in Firefox, Chrome or Safari)</li> <li>Vulnerabilities that require access to passwords, tokens, or the local system (e.g. session fixation)</li> <li>Source code disclosures of already open-source code; much of our code is open source</li> <li>Vulnerabilities discovered shortly after their public release unless you are the original author</li> <li>Outdated TLS configurations which remain to support downloads from Windows XP system</li> <li>Assumed vulnerabilities based upon version numbers only</li> <li>\"Scanner output\" or scanner-generated reports without an analysis of that report in context</li> <li>Non-technical attacks such as social engineering, phishing, or physical attacks against our employees, users, or infrastructure.</li> </ul> <p>Gradle plugins that are not officially published by Gradle or current members of the Gradle Team are also out-of-Scope for a reward. However, we encourage security researchers and plugin authors who need disclosure assistance to reach out to us at security@gradle.com </p>"},{"location":"dotgithub/SECURITY/#vulnerability-types-of-interest","title":"Vulnerability Types of Interest","text":"<p>For the Gradle Build Tool and for Gradle Plugins we are particularly interested in research into the following areas:</p> <ul> <li>Logging of sensitive information above the \u2018debug\u2019 log level</li> <li>Dependency confusion types of vulnerabilities</li> <li>Vulnerabilities in Gradle security features like dependency verification and repository filtering</li> </ul>"},{"location":"dotgithub/SECURITY/#guidelines","title":"Guidelines","text":"<p>The below rules have been developed to encourage vulnerability research and to distinguish between legitimate research and malicious attacks. We ask that you comply with this Policy by adhering to the following guidelines:</p> <ul> <li>Play by the rules. This includes following this Policy and any other relevant agreements;</li> <li>Report any vulnerability you\u2019ve discovered to us promptly and in accordance with this policy;</li> <li>Avoid violating the privacy of others, disrupting our systems, destroying or manipulating data, and/or harming user experience;</li> <li>Use only the Official Channels (as described below) to discuss vulnerability information with us;</li> <li>Provide us with a reasonable amount of time to remedy the vulnerability before sharing the details of the vulnerability with the public, and in any event, avoid sharing any details of the vulnerability publicly until you have at least received an acknowledgement from us regarding the reported vulnerability;</li> <li>Perform testing only on in-Scope systems, and respect systems and activities which are out-of-Scope;</li> <li>Only use exploits to the extent necessary to confirm a vulnerability\u2019s presence. Do not use an exploit to compromise or exfiltrate data, establish persistent command line access, or use the exploit to pivot to other systems;</li> <li>If a vulnerability provides you with access to non-public data, limit the amount of data you access to the minimum required to effectively demonstrate a proof of concept; and cease testing and submit a report immediately if you encounter any user data during testing, such as Personally Identifiable Information (PII), Personal Healthcare Information (PHI), credit card data, or proprietary information;</li> <li>You should only interact with test accounts you own or that you access with explicit permission from the account holder;</li> <li>You must not exploit the security vulnerability for your own gain; and</li> <li>You must not engage in extortion.</li> </ul>"},{"location":"dotgithub/SECURITY/#safe-harbor","title":"\u00a7Safe Harbor","text":"<p>If you make a good faith effort to comply with this Policy, we will not pursue legal action against you with respect to  your research conducted in compliance with this Policy. We consider research conducted in accordance with this Policy to be:</p> <ul> <li>Authorized in view of any applicable anti-hacking laws (including by not limited to Computer Fraud and Abuse Act (CFAA) (and/or similar state laws)), and we will not initiate or pursue legal action against you for accidental, good faith violations of this Policy;</li> <li>Authorized in view of relevant anti-circumvention laws, and we will not bring a claim against you for circumvention of technology controls;</li> <li>Exempt from Digital Millennium Copyright Act (DMCA) with respect to the circumvention of the technological measures and controls we have used to protect our applications;</li> <li>Exempt from any restrictions in our Terms of Use that would prohibit such research, and we waive those restrictions on a limited basis for research conducted in accordance with this Policy; and</li> <li>Conducted in good faith.</li> </ul> <p>You are expected, as always, to comply with all applicable laws.</p> <p>We understand that many Gradle systems and services are interconnected with third-party systems and services. While we have the ability to authorize your research on Gradle\u2019s systems and services, we cannot authorize any research  on third-party products. If legal action is initiated by a third party against you and you have complied with this Policy, we will take steps to make it known that your actions were conducted in compliance with this Policy.</p> <p>If at any time you have concerns or are uncertain whether your security research is consistent with this Policy, please submit a report through one of our Official Channels before proceeding with such research.</p>"},{"location":"dotgithub/SECURITY/#third-party-safe-harbor","title":"Third Party Safe Harbor","text":"<p>If you submit a report in accordance with this Policy which affects a third party service we may be required or have an obligation to share certain information with the affected third party. For example, we may share non-identifying content from your report with an affected third party. Except as required by law, we will not share your identifying information with any affected third party without first notifying you.</p> <p>Please note that we cannot authorize out-of-Scope testing in the name of third parties, and such testing is beyond the Scope of our Policy. Please contact any third party either directly or through a legal representative, or refer to such third party\u2019s vulnerability disclosure Policy before initiating any testing on that third party or their services. This is not, and should not be understood as, any agreement on our part to defend, indemnify, or otherwise protect you from any third party action based on your actions.</p>"},{"location":"dotgithub/SECURITY/#official-channels","title":"Official Channels","text":"<p>Please submit all security bug reports to security@gradle.com. The more details you provide, the easier it will be for us to triage and fix the issue.</p> <p>Suggestions of useful information include:</p> <ul> <li>Thorough description of the vulnerability.</li> <li>Links to source code if the project is open source.</li> <li>Proof of concepts demonstrating the vulnerability.</li> <li>A list of impacted endpoints or resources.</li> </ul>"},{"location":"dotgithub/SUPPORT/","title":"Getting Help with Gradle","text":""},{"location":"dotgithub/SUPPORT/#getting-help-with-gradle","title":"Getting Help with Gradle","text":"<p>You can search for help across our website, forums and StackOverflow.</p> <p>You can attend one of our FREE online classes.</p> <p>You can subscribe to our monthly newsletter.</p> <p>We have lots of other resources to help you learn more about Gradle.</p>"},{"location":"gradle/","title":"Index","text":""},{"location":"gradle/#gradle-build-tool","title":"\ud83d\udc18 Gradle Build Tool","text":"<p>Gradle is a highly scalable build automation tool designed to handle everything from large, multi-project enterprise builds to quick development tasks across various languages. Gradle\u2019s modular, performance-oriented architecture seamlessly integrates with development environments, making it a go-to solution for building, testing, and deploying applications on Java, Kotlin, Scala, Android, Groovy, C++, and Swift.</p> <p>For a comprehensive overview, please visit the official Gradle project homepage.</p>"},{"location":"gradle/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Starting with Gradle is easy with these essential resources. Follow these to install Gradle, set up initial projects, and explore supported platforms:</p> <ul> <li>Installing Gradle</li> <li>Build Projects for Popular Languages and Frameworks:<ul> <li>Java Applications</li> <li>Java Modules</li> <li>Android Apps</li> <li>Groovy Applications</li> <li>Kotlin Libraries</li> <li>Scala Applications</li> <li>Spring Boot Web Apps</li> <li>C++ Libraries</li> <li>Swift Apps</li> <li>Swift Libraries</li> </ul> </li> </ul> <p>\ud83d\udcd8 Explore Gradle\u2019s full array of resources through the Gradle Documentation.</p>"},{"location":"gradle/#seamless-ide-ci-integration","title":"\ud83d\udee0 Seamless IDE &amp; CI Integration","text":"<p>Gradle is built to work smoothly with a variety of Integrated Development Environments (IDEs) and Continuous Integration (CI) systems, providing extensive support for a streamlined workflow:</p> <ul> <li>Supported IDEs: Quickly integrate Gradle with Android Studio, IntelliJ IDEA, Eclipse, NetBeans, and Visual Studio Code.</li> <li>Continuous Integration: Gradle easily connects with popular CI tools, including Jenkins, GitHub Actions, GitLab CI, CircleCI, and more, to streamline build and deployment pipelines.</li> </ul>"},{"location":"gradle/#learning-resources-for-gradle","title":"\ud83c\udf93 Learning Resources for Gradle","text":"<p>Kickstart your Gradle knowledge with courses, guides, and community support tailored to various experience levels:</p> <ul> <li>DPE University Free Courses: A collection of hands-on courses for learning Gradle, complete with project-based tasks to improve real-world skills.</li> <li>Gradle Community Resources: Discover a range of resources, tutorials, and guides to support your Gradle journey, from foundational concepts to advanced practices.</li> <li>Gradle Cookbook: Access a practical collection of Gradle recipes and best practices to help you work efficiently with Gradle in various scenarios.</li> </ul>"},{"location":"gradle/#community-support-resources","title":"\ud83d\udcac Community Support &amp; Resources","text":"<p>The Gradle community offers a range of forums, documentation, and direct help to guide you through every step of your Gradle journey:</p> <ul> <li>Documentation: The Gradle User Manual covers everything from basic to advanced configurations.</li> <li>Community Forum: Engage with others on the Gradle Forum for discussions, tips, and best practices.</li> <li>Community Slack: Join our Slack Channel for real-time discussions, with specialized channels like <code>#github-integrations</code> for integration topics.</li> <li>Newsletter: Subscribe to the Gradle Newsletter for news, tutorials, and community highlights.</li> </ul> <p>Quick Tip: New contributors to Gradle projects are encouraged to ask questions in the Slack <code>#community-support</code> channel.</p>"},{"location":"gradle/#contributing-to-gradle","title":"\ud83c\udf31 Contributing to Gradle","text":"<ul> <li>Contribution Guide: Contribute to Gradle by submitting patches or pull requests for code or documentation improvements.</li> <li>Code of Conduct: Gradle enforces a Code of Conduct to ensure a welcoming and supportive community for all contributors.</li> </ul>"},{"location":"gradle/#additional-resources","title":"\ud83d\udd17 Additional Resources","text":"<p>To make the most out of Gradle, take advantage of these additional resources:</p> <ul> <li>Gradle Documentation - Your go-to guide for all Gradle-related documentation.</li> <li>DPE University - Explore tutorials designed to get you started quickly.</li> <li>Community Resources - Find more community-contributed materials to expand your knowledge.</li> </ul> <p>\ud83c\udf1f Stay connected with the Gradle Community and access the latest news, training, and updates via Slack, Forum, and our Newsletter.</p> <p></p>"},{"location":"gradle/CONTRIBUTING/","title":"Overview","text":""},{"location":"gradle/CONTRIBUTING/#contributing-to-the-gradle-build-tool","title":"Contributing to the Gradle Build Tool","text":"<p>Thank you for your interest in contributing to Gradle! This guide explains how to contribute to the core Gradle components,  extensions and documentation located in this repository. For other extensions and components, see the  Gradle Community Resources.</p> <p>This guide will help you to...</p> <ul> <li>maximize the chance of your changes being accepted</li> <li>work on the Gradle code base</li> <li>get help if you encounter trouble</li> </ul>"},{"location":"gradle/CONTRIBUTING/#before-you-start","title":"Before you start","text":"<p>Before starting to work on a feature or a bug fix, please open an issue to discuss the use case or bug with us. This can save everyone a lot of time and frustration.</p> <p>For any non-trivial change, we need to be able to answer these questions:</p> <ul> <li>Why is this change done? What's the use case?</li> <li>For user facing features, what will the API look like?</li> <li>What test cases should it have? What could go wrong?</li> <li>How will it roughly be implemented? We'll happily provide code pointers to save you time.</li> </ul> <p>We may ask you to answer these questions directly in the GitHub issue or (for large changes) in a shared Google Doc.</p> <p>If you are looking for good first issues, take a look at the list of good first issues that should be actionable and ready for a contribution.</p>"},{"location":"gradle/CONTRIBUTING/#security-vulnerabilities","title":"Security vulnerabilities","text":"<p>Do not report security vulnerabilities to the public issue tracker. Follow our Security Vulnerability Disclosure Policy.</p>"},{"location":"gradle/CONTRIBUTING/#follow-the-code-of-conduct","title":"Follow the Code of Conduct","text":"<p>Contributors must follow the Code of Conduct outlined at https://gradle.org/conduct/.</p>"},{"location":"gradle/CONTRIBUTING/#additional-help","title":"Additional help","text":"<p>If you run into any trouble, please reach out to us on the issue you are working on. There is a <code>#contributing</code> channel on the community Slack which you can use to ask any questions.</p>"},{"location":"gradle/CONTRIBUTING/#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>In order to make changes to Gradle, you'll need:</p> <ul> <li>Adoptium JDK (Java Development Kit) version 17. Fixed version is required to use remote cache.</li> <li>A text editor or IDE. We use and recommend IntelliJ IDEA CE. IntelliJ Ultimate will also work. You'll need IntelliJ 2021.2.2 or newer.</li> <li>git and a GitHub account.</li> </ul> <p>Gradle uses pull requests for contributions. Fork gradle/gradle and clone your fork. Configure your Git username and email with:</p> <pre><code>git config user.name 'First Last'\ngit config user.email user@example.com\n</code></pre>"},{"location":"gradle/CONTRIBUTING/#import-gradle-into-intellij","title":"Import Gradle into IntelliJ","text":"<p>To import Gradle into IntelliJ: - Open the <code>build.gradle.kts</code> file in root of the project with IntelliJ and choose \"Open as Project\" - Select a Adoptium Java 17 VM as \"Gradle JVM\" - Revert the Git changes to files in the <code>.idea</code> folder</p> <p>NOTE: Due to the project size, the very first import can take a while and IntelliJ might become unresponsive for several seconds during this period.</p> <p>IntelliJ automatically hides stacktrace elements from the <code>org.gradle</code> package, which makes running/debugging tests more difficult. You can disable this behavior by changing IntelliJ Preferences under Editor -&gt; General -&gt; Console. In the \"Fold lines that contain\" section, remove the <code>org.gradle</code> entry.</p> <p>If you did not have a Adoptium Java 17 SDK installed before importing the project into IntelliJ and after adding Adoptium Java 17 SDK your IntelliJ still uses the wrong SDK version, you might need to invalidate IntelliJ's caches before reloading the project.</p>"},{"location":"gradle/CONTRIBUTING/#making-your-change","title":"Making your change","text":""},{"location":"gradle/CONTRIBUTING/#code-change-guidelines","title":"Code change guidelines","text":"<p>All code contributions should contain the following:</p> <ul> <li>Create unit tests using Spock for new classes or methods that you introduce.</li> <li>Create integration tests that exercise a Gradle build for the bug/feature. </li> <li>Annotate tests that correspond to a bug on GitHub (<code>@Issue(\"https://github.com/gradle/gradle/issues/2622\")</code>).</li> <li>Add documentation to the User Manual and DSL Reference (under platforms/documentation/docs/src/docs).</li> <li>For error messages related changes, follow the ErrorMessages Guide.</li> <li>For Javadocs, follow the Javadoc Style Guide.</li> <li>For new features, the feature should be mentioned in the Release Notes.</li> </ul> <p>Your code needs to run on all versions of Java that Gradle supports and across all supported operating systems (macOS, Windows, Linux). The Gradle CI system will verify this, but here are some pointers that will avoid surprises:</p> <ul> <li>Be careful when using features introduced in Java 1.7 or later. Some parts of Gradle still need to run on Java 6.</li> <li>Normalize file paths in tests. The <code>org.gradle.util.internal.TextUtil</code> class has some useful functions for this purpose.</li> </ul> <p>You can consult the Architecture documentation to learn about some of the architecture of Gradle.</p>"},{"location":"gradle/CONTRIBUTING/#contributing-to-documentation","title":"Contributing to documentation","text":"<p>This repository includes Gradle documentation sources, including but not limited to: User Manual, DSL Reference and Javadoc. This information is used to generate documentation for each Gradle version on docs.gradle.org. The documentation is mostly implemented in Asciidoc though we use GitHub-flavored Markdown for internal documentation too.</p> <p>You can generate docs by running <code>./gradlew :docs:docs</code>. This will build the whole documentation locally in platforms/documentation. For more commands and examples, including local development, see this guide.</p>"},{"location":"gradle/CONTRIBUTING/#creating-commits-and-writing-commit-messages","title":"Creating commits and writing commit messages","text":"<p>The commit messages that accompany your code changes are an important piece of documentation. Please follow these guidelines when creating commits:</p> <ul> <li>Write good commit messages.</li> <li>Sign off your commits to indicate that you agree to the terms of Developer Certificate of Origin. We can only accept PRs that have all commits signed off.</li> <li>Keep commits discrete. Avoid including multiple unrelated changes in a single commit.</li> <li>Keep commits self-contained. Avoid spreading a single change across multiple commits. A single commit should make sense in isolation.</li> </ul>"},{"location":"gradle/CONTRIBUTING/#testing-changes","title":"Testing changes","text":"<p>After making changes, you can test your code in 2 ways:</p> <ol> <li>Run tests. - Run <code>./gradlew :&lt;subproject&gt;:quickTest</code> where <code>&lt;subproject&gt;</code> is the name of the subproject you've changed.  - For example: <code>./gradlew :launcher:quickTest</code>.</li> <li>Install Gradle locally and try out a change in behavior manually.  - Install: <code>./gradlew install -Pgradle_installPath=/any/path</code> - Use: <code>/any/path/bin/gradle taskName</code>.</li> </ol> <p>It's also a good idea to run <code>./gradlew sanityCheck</code> before submitting your change because this will help catch code style issues.</p> <p>NOTE: Do NOT run <code>gradle build</code> on the local development environment, even if you have Gradle or Develocity build caching enabled for the project. The Gradle Build Tool repository is massive, and it will take ages to build on a local machine without necessary parallelization and caching. The full test suites are executed on the CI instance for multiple configurations, and you can rely on it after doing initial sanity check and targeted local testing.</p>"},{"location":"gradle/CONTRIBUTING/#submitting-your-change","title":"Submitting Your Change","text":"<p>After you submit your pull request, a Gradle developer will review it. It is normal for this to take several iterations, so don't get discouraged by change requests. They ensure the high quality that we all enjoy.</p> <p>If you need to check on CI status as an external contributor, you can click \"Log in as guest\".</p>"},{"location":"gradle/CONTRIBUTING/#useful-tips","title":"Useful tips","text":""},{"location":"gradle/CONTRIBUTING/#how-gradle-works","title":"How Gradle Works","text":"<p>We have a series of blog that explains how Gradle works. This may help you better understand and contribute to Gradle.</p>"},{"location":"gradle/CONTRIBUTING/#debugging-gradle","title":"Debugging Gradle","text":"<p>You can debug Gradle by adding <code>-Dorg.gradle.debug=true</code> to the command-line. Gradle will wait for you to attach a debugger at <code>localhost:5005</code> by default.</p> <p>If you made changes to build logic in the <code>build-logic</code> included build, you can run its tests by executing <code>./gradlew :build-logic:check</code>.</p>"},{"location":"gradle/CONTRIBUTING/#fixing-dco-failuressigning-off-commits-after-submitting-a-pull-request","title":"Fixing DCO failures/Signing Off Commits After Submitting a Pull Request","text":"<p>You must agree to the terms of Developer Certificate of Origin by signing off your commits. We automatically verify that all commit messages contain a <code>Signed-off-by:</code> line with your email address. We can only accept PRs that have all commits signed off.</p> <p>If you didn't sign off your commits before creating the pull request, you can fix that after the fact.</p> <p>To sign off a single commit:</p> <p><code>git commit --amend --signoff</code></p> <p>To sign off one or multiple commits:</p> <p><code>git rebase --signoff origin/master</code></p> <p>Then force push your branch:</p> <p><code>git push --force origin test-branch</code></p>"},{"location":"gradle/CONTRIBUTING/#fixing-sanity-check-failures-after-public-api-changes","title":"Fixing sanity check failures after public API changes","text":"<p>If your PR includes any changes to the Gradle Public API, it will cause the binary compatibility check to fail. The binary compatibility check runs as a part of the broader sanity check. The latter runs on every PR and is a prerequisite for merging.</p> <p>If you run the sanity check locally with the <code>./gradlew sanityCheck</code>, you can see the binary compatibility error in the output. It looks like the following:</p> <pre><code>Execution failed for task ':architecture-test:checkBinaryCompatibility'.\n&gt; A failure occurred while executing me.champeau.gradle.japicmp.JApiCmpWorkAction\n   &gt; Detected binary changes.\n         - current: ...\n         - baseline: ...\n\n     See failure report at file:///&lt;path to Gradle checkout&gt;/subprojects/architecture-test/build/reports/binary-compatibility/report.html\n</code></pre> <p>Here are the steps to resolve the issue:</p> <ol> <li> <p>Open the failure report mentioned in the output.\\ If you don't see the report link in the output in the IDE, make sure to select the top-level node in the structured output panel. The report will explain the errors in detail. Perhaps, you forgot to add an <code>@Incubating</code> annotation or <code>@since</code> in the javadoc.</p> </li> <li> <p>Accept the changes.\\ If you are sure that the changes are intentional, follow the steps described in the report. This includes adding the description of the changes to the <code>accepted-public-api-changes.json</code> file, and providing a reason for each change. You can add the changes to any place in the file, e.g. at the top.</p> </li> <li> <p>Make sure the file with accepted changes is sorted.\\ Use the <code>./gradlew :architecture-test:sortAcceptedApiChanges</code> task to sort the file.</p> </li> <li> <p>Validate your changes before committing.\\ Run the <code>./gradlew sanityCheck</code> task again to make sure there are no more errors.</p> </li> </ol>"},{"location":"gradle/CONTRIBUTING/#filtering-changes-by-severity","title":"Filtering changes by severity","text":"<p>There is a somewhat non-obvious filter present on the page that allows you to control which type of messages are displayed. The filter is a dropdown box that appears when you click the <code>Severity \u2b07\ufe0f</code> label in the black header bar to the immediate right of the Gradle version.</p> <p>If you have a large number of messages of different types, filtering by severity to see only <code>Error</code>s can be helpful when processing the report. Errors are the only type of issues that must be resolved for the <code>checkBinaryCompatibility</code> task to succeed.</p> <p>You can set the 'bin.cmp.report.severity.filter' property in your <code>gradle.properties</code> to one of the available values in the dropdown box to automatically filter issues to that severity level upon opening this report.</p>"},{"location":"gradle/CONTRIBUTING/#accepting-multiple-changes","title":"Accepting multiple changes","text":"<p>If you have multiple changes to accept (and you're sure they ought to be accepted instead of corrected), you can use the <code>Accept Changes for all Errors</code> button to speed the process. This button will cause a Javascript alert dialog to appear asking you to type a reason for accepting the changes, e.g. \"Added new API for Gradle 8.x\".</p> <p>Clicking okay on the dialog will cause a copy of the <code>accepted-public-api-changes.json</code> containing your (properly sorted) addition to be downloaded. You can then replace the existing file with this new downloaded version. </p>"},{"location":"gradle/CONTRIBUTING/#java-toolchain","title":"Java Toolchain","text":"<p>The Gradle build uses Java Toolchain support to compile and execute tests across multiple versions of Java.</p> <p>Available JDKs on your machine are automatically detected and wired for the various compile and test tasks. Some tests require multiple JDKs to be installed on your computer, be aware of this if you make changes related to anything toolchains related.</p> <p>If you want to explicitly run tests with a different Java version, you need to specify <code>-PtestJavaVersion=#</code> with the major version of the JDK you want the tests to run with (e.g. <code>-PtestJavaVersion=14</code>).</p>"},{"location":"gradle/CONTRIBUTING/#configuration-cache-enabled-by-default","title":"Configuration cache enabled by default","text":"<p>The build of Gradle enables the configuration cache by default as a dogfooding experiment.</p> <p>Most tasks that are used to build Gradle support the configuration cache, but some don't. For example, building the documentation currently requires you to disable the configuration cache.</p> <p>To disable the configuration cache, run the build with <code>--no-configuration-cache</code>.</p> <p>Tasks known to have problems are listed in the build logic. You can find this list at:</p> <pre><code>build-logic/root-build/src/main/kotlin/gradlebuild.internal.cc-experiment.gradle.kts\n</code></pre> <p>If you discover a task that doesn't work with the configuration but it not in this list, please add it.</p> <p>For more information on the configuration cache, see the user manual.</p>"},{"location":"gradle/CONTRIBUTING/#remote-build-cache","title":"Remote build cache","text":"<p>Gradle, Inc runs a set of remote build cache nodes to speed up local builds when developing Gradle. By default, the build is configured to use the build cache node in the EU region.</p> <p>The build cache has anonymous read access, so you don't need to authenticate in order to use it. You can use a different build cache node by specifying <code>-DcacheNode=us</code> for a build cache node in the US or <code>-DcacheNode=au</code> for a build cache node in Australia.</p> <p>If you are not getting cache hits from the build cache, you may be using the wrong version of Java. A fixed version (Java 11) is required to get remote cache hits.</p>"},{"location":"gradle/CONTRIBUTING/#building-a-distribution-from-source","title":"Building a distribution from source","text":"<p>To create a Gradle distribution from the source tree you can run either of the following:</p> <pre><code>./gradlew :distributions-full:binDistributionZip\n</code></pre> <p>This will create a minimal distribution at <code>subprojects/distributions-full/build/distributions/gradle-&lt;version&gt;-bin.zip</code>, just what's needed to run Gradle (i.e. no sources nor docs).</p> <p>You can then use it as a Gradle Wrapper local distribution in a Gradle based project by using a <code>file:/</code> URL pointing to the built distribution:</p> <pre><code>./gradlew wrapper --gradle-distribution-url=file:/path/to/gradle-&lt;version&gt;-bin.zip\n</code></pre> <p>To create a full distribution (includes sources and docs):</p> <pre><code>./gradlew :distributions-full:allDistributionZip\n</code></pre> <p>The full distribution will be created at <code>subprojects/distributions-full/build/distributions/gradle-&lt;version&gt;-all.zip</code>. You can then use it as a Gradle Wrapper local distribution:</p> <pre><code>./gradlew wrapper --gradle-distribution-url=file:/path/to/gradle-&lt;version&gt;-all.zip\n</code></pre>"},{"location":"gradle/CONTRIBUTING/#our-thanks","title":"Our thanks","text":"<p>We deeply appreciate your effort toward improving Gradle. For any contribution, large or small, you will be immortalized in the release notes for the version you've contributed to.</p> <p>If you enjoyed this process, perhaps you should consider getting paid to develop Gradle?</p>"},{"location":"gradle/architecture/","title":"Gradle Build Tool Architecture","text":""},{"location":"gradle/architecture/#gradle-architecture-documentation","title":"Gradle architecture documentation","text":"<p>This directory contains documentation that describes Gradle's architecture and how the various pieces fit together and work.</p>"},{"location":"gradle/architecture/#architecture-decision-records-adrs","title":"Architecture decision records (ADRs)","text":"<p>The Gradle team uses ADRs to record architectural decisions that the team has made.</p> <p>See Architecture decisions records for the list of ADRs. Be aware these are very technical descriptions of the decisions, and you might find the documentation below more useful as an introduction to the internals of Gradle.</p>"},{"location":"gradle/architecture/#platform-architecture","title":"Platform architecture","text":"<p>Gradle is arranged into several coarse-grained components called \"platforms\". Each platform provides support for some kind of automation, such as building JVM software or building Gradle plugins. Most platforms typically build on the features of other platforms.</p> <p>By understanding the Gradle platforms and their relationships, you can get a feel for where in the Gradle source a particular feature might be implemented.</p> <p>See Gradle platform architecture for a list of the platforms and more details.</p>"},{"location":"gradle/architecture/#gradle-runtimes","title":"Gradle runtimes","text":"<p>Gradle is also made up of several different processes that work together to \"run the build\", such as the Gradle daemon and the <code>gradlew</code> command.</p> <p>Each process, or \"runtime\", applies different constraints to the code that runs in that process. For example, each process has different supported JVMs and a different set of services available for dependency injection. While a lot of Gradle source code runs only in the Gradle daemon, not all of it does and so, when working on some source code it is important to be aware of the runtimes in which it will run.</p> <p>See Gradle runtimes for a list of these runtimes and more details.</p>"},{"location":"gradle/architecture/#build-state-model","title":"Build state model","text":"<p>As Gradle executes, it acts on various pieces of the build definition, such as each project in the build. Gradle tracks the state of each piece and transitions each piece through its lifecycle as the build runs.</p> <p>A central part of the Gradle architecture is the \"build state model\", which holds the state for each piece and coordinates state transitions and other mutations.  Most source code in Gradle is arranged by which part(s) of the build state model it acts on. This affects the lifecycle of the code and the set of services available for dependency injection. When working on some source code it is important to be aware of the model it acts on.  </p> <p>See build state model for more details.</p>"},{"location":"gradle/architecture/build-state-model/","title":"Build state model","text":""},{"location":"gradle/architecture/build-state-model/#build-state-model","title":"Build state model","text":"<p>The Gradle daemon tracks state for various elements. These are arranged in a hierarchy:</p> <pre><code>  graph TD\n\n  process[\"build process\"]\n\n  session[\"build session\"]\n  process --&gt; session\n\n  build_tree[\"build tree\"]\n  session --&gt; build_tree\n\n  build1[\"root build\"]\n  build_tree --&gt; build1\n\n  project1[\"root project\"]\n  build1 --&gt; project1\n\n  project2[\"project\"]\n  build1 --&gt; project2\n\n  build2[\"included build\"]\n  build_tree --&gt; build2\n\n  project3[\"root project\"]\n  build2 --&gt; project3\n\n  project4[\"project\"]\n  build2 --&gt; project4\n</code></pre>"},{"location":"gradle/architecture/build-state-model/#build-process-state","title":"Build process state","text":"<p>The \"build process state\" holds the global state of the build process and manages all the other state.</p> <p>The build process state also includes state that is tied to a particular Gradle user home directory. When that directory changes between Gradle invocations, the state is discarded and recreated. Typically, the Gradle user home directory does not change for a given process, so this is effectively process state.</p> <p>The build process state is managed by the <code>BuildProcessState</code> class. An instance is created once for a given process.</p>"},{"location":"gradle/architecture/build-state-model/#build-session-state","title":"Build session state","text":"<p>A \"build session\" represents a single invocation of Gradle, for example when you run <code>gradlew build</code>. A session runs the build one or more times. For example, when continuous build is enabled, the session may run the build many times, but when it is disabled, the session will run the build once only.</p> <p>The build session state is managed by the <code>BuildSessionState</code> class. An instance is created at the start of a Gradle invocation and discarded at the end of that invocation.</p> <p>The build session state also includes \"cross session\" state that is shared with any \"nested\" sessions that need to be created. This only happens when the <code>GradleBuild</code> task is used. You can mostly ignore the distinction between \"cross session\" and \"build session\" state.</p>"},{"location":"gradle/architecture/build-state-model/#build-tree-state","title":"Build tree state","text":"<p>\"Build tree\" is another name for the build definition. The \"build tree state\" holds the state for the entire build definition for a single build execution within a session.</p> <p>The build tree state is managed by the <code>BuildTreeState</code> class. An instance is created at the start of a build execution and discarded at the end of the execution.</p>"},{"location":"gradle/architecture/build-state-model/#build-state","title":"Build state","text":"<p>The \"build state\" holds the state for a build within the build definition for a single build execution, and is contained by the build tree state.</p> <p>The build state is managed by the <code>BuildState</code> class. An instance is created for each build in the build definition, once per build execution and is discarded at the end of the execution. </p> <p>The build state also includes what is currently called the \"Gradle state\". The Gradle state is being merged into the build state and is mostly empty.</p>"},{"location":"gradle/architecture/build-state-model/#project-state","title":"Project state","text":"<p>The \"project state\" holds the state for a project for a single build execution, and is contained by the build state (and not the state of the parent project).</p> <p>The project state is managed by the <code>ProjectState</code> class. It is created for each project in the build definition, once per build execution and is discarded at the end of the execution.</p>"},{"location":"gradle/architecture/build-state-model/#composition-by-architecture-modules","title":"Composition by architecture modules","text":"<p>Each architecture module and platform can contribute code to any of the elements. Not every module contributes to every element.</p> <p>A module does this by providing an implementation of <code>GradleModuleServices</code> that registers the services that the module contributes to each element. </p>"},{"location":"gradle/architecture/platforms/","title":"Platforms","text":""},{"location":"gradle/architecture/platforms/#gradle-platform-architecture","title":"Gradle platform architecture","text":"<p>Gradle is arranged into coarse-grained components called \"architecture modules\" and \"platforms\". See ADR4 for a definition of these terms.</p> <p>The diagram below shows the current set of architecture modules and platforms:</p> <pre><code>    graph TD\n\n    subgraph core[\"core platform\"]\n\n        core_runtime[\"core-runtime module\"]\n        style core_runtime stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n        core_configuration[\"core-configuration module\"]\n        style core_configuration stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n        core_execution[\"core-execution module\"]\n        style core_execution stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n    end\n    style core fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n\n    documentation[\"documentation module\"]\n    style documentation stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n    ide[\"ide module\"]\n    style ide stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n\n    subgraph software[\"software platform\"]\n    end\n    style software fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    software --&gt; core\n\n    subgraph jvm[\"jvm platform\"]\n    end\n    style jvm fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    jvm --&gt; core\n    jvm --&gt; software\n\n    subgraph extensibility[\"extensibility platform\"]\n    end\n    style extensibility fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    extensibility --&gt; core\n    extensibility --&gt; jvm\n\n    subgraph native[\"native platform\"]\n    end\n    style native fill:#c2e0f4,stroke:#3498db,stroke-width:2px,color:#000;\n    native --&gt; core\n    native --&gt; software\n\n    enterprise[\"enterprise module\"]\n    style enterprise stroke:#1abc9c,fill:#b1f4e7,stroke-width:2px,color:#000;\n</code></pre>"},{"location":"gradle/architecture/platforms/#platforms","title":"Platforms","text":""},{"location":"gradle/architecture/platforms/#core-automation-platform","title":"Core automation platform","text":"<p>This is a general-purpose automation platform which takes care of the efficient definition and execution of work, such as tasks. This platform is agnostic to what exactly the purpose of the work is. It might be creating an application, setting up development environments, orchestrating deployments, running simulations, etc.</p> <p>This platform does not provide special support for a particular kind of automation. This is the responsibility of other platforms.</p> <p>It is made up of 3 architecture modules:</p> <ul> <li>core-runtime: Provides the runtimes or \"containers\" in which code runs. These runtimes include the Gradle client, the daemon and the worker processes. This is the base module on which all other architecture modules depend.</li> <li>core-configuration: Allows the build structure and work, such as tasks, to be specified. This includes the project model, the DSL and so on.</li> <li>core-execution: Runs the work efficiently. This includes scheduling, execution, caching and so on.</li> </ul>"},{"location":"gradle/architecture/platforms/#software-development-platform","title":"Software development platform","text":"<p>This is a general purpose platform that builds on the core automation platform to add support for the automation of software development. This includes work such as compiling, testing and documenting software, plus sharing that software via publishing and dependency management. This platform is agnostic to what kind of software is being developed. It might be Java or Kotlin libraries running on the JVM, Gradle plugins, Android or iOS applications, C++ libraries, and so on.</p> <p>This platform does not provide special support for a particular language or ecosystem.</p>"},{"location":"gradle/architecture/platforms/#jvm-platform","title":"JVM platform","text":"<p>This is a platform that builds on the core and software platforms to add support for developing software that runs on the JVM. This includes software that is implemented using Java, Kotlin or some other JVM language.</p> <p>This platform provides specific support for Java, Groovy and Scala, and includes the foojay toolchain plugin.</p>"},{"location":"gradle/architecture/platforms/#extensibility-platform","title":"Extensibility platform","text":"<p>This is a platform that builds on the core, software and JVM platforms to add support for extending Gradle by implementing and applying plugins.</p> <p>This platform includes the plugin publishing plugin and the plugin portal.</p>"},{"location":"gradle/architecture/platforms/#native-platform","title":"Native platform","text":"<p>This is a platform that builds on the core and software platforms to add support for developing native software.</p> <p>This platform provides specific support for Swift, C++ and C.</p>"},{"location":"gradle/architecture/platforms/#cross-cutting-architecture-modules","title":"Cross-cutting architecture modules","text":"<p>There are some additional cross-cutting architecture modules that aren't platforms:</p>"},{"location":"gradle/architecture/platforms/#enterprise-integration","title":"Enterprise integration","text":"<p>Provides cross-cutting integration with Gradle's commercial product.</p>"},{"location":"gradle/architecture/platforms/#ide-integration","title":"IDE integration","text":"<p>Provides cross-cutting integration with IDEs and other tooling.</p>"},{"location":"gradle/architecture/platforms/#build-infrastructure","title":"Build infrastructure","text":"<p>Provides build logic, libraries, test suites and infrastructure to support developing and releasing Gradle.</p>"},{"location":"gradle/architecture/platforms/#documentation","title":"Documentation","text":"<p>Provides cross-cutting Gradle documentation and samples, along with the infrastructure to write, test, publish and host the documentation.</p>"},{"location":"gradle/architecture/platforms/#structure","title":"Structure","text":"<p>Each platform and module has its own source directory under platforms/. In these source directories, you will find the Gradle projects that make up the platform or module.</p> <p>The platforms and modules are defined using a DSL in settings.gradle.kts</p> <p>Each platform and module can contribute code to the Gradle runtimes and Build state model.</p>"},{"location":"gradle/architecture/runtimes/","title":"Gradle runtimes","text":""},{"location":"gradle/architecture/runtimes/#gradle-runtimes","title":"Gradle runtimes","text":"<p>Gradle is made up of the following processes that work together to \"run the build\":</p> <ul> <li>Gradle daemon. This is the process that actually runs the build. It hosts build logic and coordinates the lifecycle of the build. It is a long-running daemon process.</li> <li>CLI client. This is the <code>gradle</code> or <code>gradlew</code> command, and is responsible for locating, starting and interacting with the Gradle daemon, potentially downloading the Gradle distribution. </li> <li>Tooling API client. This a library that is embedded into applications, such as IDEs or CI agents, that allows them to act as a Gradle client.</li> <li>Worker processes. Long-running daemon processes that the Gradle daemon starts to run specific kinds of work, such as compilation or test execution.</li> </ul> <p>The diagram below shows the relationships between the different processes:</p> <pre><code>    graph LR\n\n        gradle[\"Gradle CLI client\"]\n\n        gradlew[\"Gradlew CLI client\"]\n\n        subgraph IDE    \n            tapi[\"Tooling API client\"]\n        end\n\n        daemon[\"Gradle daemon\"]\n        gradle --&gt; daemon\n        gradlew --&gt; daemon\n        tapi --&gt; daemon\n\n        worker[\"Worker process\"]\n        daemon --&gt; worker\n\n        worker2[\"Worker process\"]\n        daemon --&gt; worker2\n\n        worker3[\"Worker process\"]\n        daemon --&gt; worker3\n</code></pre> <p>These are all Java processes. Each process has a corresponding \"runtime\". All source code in Gradle is written to target one or more of these runtimes. Most source code targets the daemon and the remaining code either targets a single runtime, for example the Gradle client, or is shared across multiple runtimes.</p>"},{"location":"gradle/architecture/runtimes/#composition-by-architecture-modules","title":"Composition by architecture modules","text":"<p>Each architecture module and platform can contribute code to any of the runtimes. Not every module contributes to every runtime.</p> <p>The core-runtime module defines each runtime:</p> <ul> <li>The target JVM for the runtime. Each runtime has its own JVM compatibility constraints.</li> <li>Some base services that are available to code hosted by the runtime. This varies by runtime.</li> <li>Additional constraints. For example, the CLI client runtimes limit the libraries that are available to the code in that runtime, for performance reasons. </li> </ul> <p>Other modules and platforms define the services that they contribute to the runtime.</p> <p>The build script for each project declares which runtime the project targets.</p>"},{"location":"gradle/architecture/standards/","title":"Index","text":""},{"location":"gradle/architecture/standards/#architecture-standards","title":"Architecture Standards","text":"<p>Experimental!</p> <p>We'd like to capture our architectural decisions about the build tool as Architectural Decision Records (ADRs). For now we just have this global repository of ADRs. If we see fit, we can break these out to per-platform ones, or keep a hybrid approach to having global and platform-specific ADSs.</p> <p>Our aim is to keep the process lightweight and approachable.</p> <p>For this reason we adopt a lightweight Markdown ADR template.</p>"},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/","title":"ADR-0001 - Use Architectural Decision Records","text":""},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/#adr-0001-use-architectural-decision-records","title":"ADR-0001 - Use Architectural Decision Records","text":""},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/#date","title":"Date","text":"<p>2023-12-01</p>"},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/#context","title":"Context","text":"<p>In a distributed team with many subteams, the best solution to communicate decisions is to use a format accessible by everyone in charge of development.</p> <p>We use Specification and Discovery documents stored in Google Drive, but they present some downsides:</p> <ul> <li>They are rarely updated after creation and initial review, and then become hard to follow, especially after important decisions are made</li> <li>They are not synced with the code to reflect the eventual solution that is committed</li> <li>Google Docs is not a \"code-oriented\" tool, like asciidoc can be</li> <li>Review in Google Docs is not as simple as a PR code review in GitHub</li> </ul>"},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/#decision","title":"Decision","text":"<p>The Build Tool Team has decided to use Architectural Decision Records (aka ADR) to track decisions we want to follow.</p> <p>The main logic with ADRs is to describe (architectural) decisions made:</p> <ul> <li>To provide best practices and solutions we (as the build tool team) want to promote.</li> <li>To avoid asking the same thing multiple times during code review.</li> <li>To explain rejected solutions, for now, and future development, in case they are proposed again.</li> </ul> <p>ADRs can be written by any team. Like code, they should be reviewed by any other relevant teams. The goal is not to own a decision, but to share it with other teams, and improve the build tool together.</p>"},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/#format","title":"Format","text":"<p>The format for ADR should follow this template:</p> <pre><code># ADR-000X - Title\n\n## Date\n\n20YY-MM-DD\n\n## Context\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\noccaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n## Decision\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\noccaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n## Status\n\n[PROPOSED, ACCEPTED, REJECTED, DEPRECATED, REPLACED]\n\n## Consequences\n\n* X\n* Y\n* Z\n</code></pre>"},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/#status","title":"Status","text":"<p>ACCEPTED</p>"},{"location":"gradle/architecture/standards/0001-use-architectural-decision-records/#consequences","title":"Consequences","text":"<ul> <li>We start to use Architectural Decision Records</li> <li>We use the proposed template from this ADR</li> <li>We locate <code>.md</code> files in the folder <code>/architecture-standards</code></li> <li>We highly encourage usage of ADR to communicate decisions</li> <li>We use links to ADRs in Specifications, Discoveries and Pull-Requests to simplify communication</li> </ul>"},{"location":"gradle/architecture/standards/0002-avoid-using-java-serialization/","title":"ADR-0002 - Avoid using Java serialization","text":""},{"location":"gradle/architecture/standards/0002-avoid-using-java-serialization/#adr-0002-avoid-using-java-serialization","title":"ADR-0002 - Avoid using Java serialization","text":""},{"location":"gradle/architecture/standards/0002-avoid-using-java-serialization/#date","title":"Date","text":"<p>2012-12-01</p>"},{"location":"gradle/architecture/standards/0002-avoid-using-java-serialization/#context","title":"Context","text":"<p>In Gradle we often need to serialize in-memory objects for caching, or to transmit them across process barriers, etc. Java serialization is one way to implement this, however, despite its simplicity of implementation, it has several drawbacks:</p> <ul> <li>Performance: Java's built-in serialization mechanism is often slower compared to other serialization solutions. This is due to Java's use of reflection and the need to maintain a lot of metadata.</li> </ul> <ul> <li>Size of Serialized Data: Java serialization tends to produce larger serialized objects because it includes class metadata and other overhead.</li> </ul> <ul> <li>Flexibility and Control: Java serialization offers limited control over the serialization process, such as excluding certain fields, customizing naming conventions, and handling complex data structures more gracefully.</li> </ul> <ul> <li>Security: Java serialization poses security risks, especially related to deserialization vulnerabilities.</li> </ul> <ul> <li>Version Compatibility: With Java serialization, even minor changes to a class (like adding a field) can break compatibility.</li> </ul> <ul> <li>Cross-Language Compatibility: Java serialization is inherently Java-centric and does not support cross-language scenarios well.</li> </ul> <ul> <li>Type Safety: Java serialization does not enforce type safety as strictly as some alternatives, potentially leading to runtime errors.</li> </ul>"},{"location":"gradle/architecture/standards/0002-avoid-using-java-serialization/#decision","title":"Decision","text":"<p>We do not use Java serialization. Instead, we use custom serialization where we explicitly describe how data objects should be serialized and deserialized.</p> <p>For internal purposes, we use binary formats for their brevity. We use the <code>Serializer</code> abstraction to separate the actual implementation of serialization from its uses.</p> <p>When sharing data with external tools, we use JSON.</p>"},{"location":"gradle/architecture/standards/0002-avoid-using-java-serialization/#status","title":"Status","text":"<p>ACCEPTED</p>"},{"location":"gradle/architecture/standards/0002-avoid-using-java-serialization/#consequences","title":"Consequences","text":"<ul> <li>The configuration cache serialization infrastructure should be used for all serialization.</li> <li>Existing usages of Serializer outside of this infrastructure should be migrated to use it.</li> <li>Existing usages of Java serialization should be migrated to use it.</li> <li>It is ok for Serializer to be used as a replacement for Java serialization as a migration step.</li> <li>The configuration cache uses the <code>Serializer</code>s based on the Kryo framework for most serialization needs.</li> </ul>"},{"location":"gradle/architecture/standards/0003-avoid-introducing-Groovy-types-to-public-api/","title":"ADR-0003 - Avoid introducing Groovy types to public API","text":""},{"location":"gradle/architecture/standards/0003-avoid-introducing-Groovy-types-to-public-api/#adr-0003-avoid-introducing-groovy-types-to-public-api","title":"ADR-0003 - Avoid introducing Groovy types to public API","text":""},{"location":"gradle/architecture/standards/0003-avoid-introducing-Groovy-types-to-public-api/#date","title":"Date","text":"<p>2024-01-12</p>"},{"location":"gradle/architecture/standards/0003-avoid-introducing-Groovy-types-to-public-api/#context","title":"Context","text":"<p>Gradle's public API requires equal access from all JVM-based languages. Kotlin, Groovy, Java, and other JVM-based languages should be able to use the Gradle API without relying on another language's standard library.</p> <p>Historically, Gradle has shipped with some Groovy types in very prominent APIs. This required the Kotlin DSL to add special integration to work with Groovy closures. This has also forced plugins written in languages other than Groovy to use Groovy types for some APIs.</p> <p>When the Kotlin DSL was introduced, we made an effort to add non-Groovy equivalents for all APIs. This has been mostly done, but there remain a few holdouts (fixing these is out of scope).</p> <p>To keep the Groovy DSL ergonomic, we generate methods as necessary from the non-Groovy equivalents.</p> <p>Doing this provides the following specific benefits: - Reduce the API surface - We no longer need to maintain two methods. - Consistency - All languages have consistent access to the same APIs and ergonomics in the DSL. - Reduce the size of the Gradle distribution - We no longer need to carry multiple standard libraries for different languages.</p>"},{"location":"gradle/architecture/standards/0003-avoid-introducing-Groovy-types-to-public-api/#decision","title":"Decision","text":"<p>We do not introduce new public API methods that include Groovy types in their signatures. Existing Groovy methods will not be removed immediately.</p>"},{"location":"gradle/architecture/standards/0003-avoid-introducing-Groovy-types-to-public-api/#status","title":"Status","text":"<p>ACCEPTED</p>"},{"location":"gradle/architecture/standards/0003-avoid-introducing-Groovy-types-to-public-api/#consequences","title":"Consequences","text":"<ul> <li>If we would have used <code>Closure</code>, we must instead use <code>Action&lt;T&gt;</code>, <code>Spec&lt;T&gt;</code>, <code>Callable&lt;T&gt;</code>, or <code>Transformer&lt;OUT, IN&gt;</code>.</li> <li>We need to ensure all APIs that are exposed in the Groovy DSL go through runtime decoration. Runtime decoration mixes in methods that use Groovy Closures to maintain consistent behavior in Groovy DSL. Decoration is performed on objects instantiated by <code>ObjectFactory</code>.</li> </ul>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/","title":"ADR-0004 - Use a platform-oriented architecture for Gradle","text":""},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#adr-0004-use-a-platform-oriented-architecture-for-gradle","title":"ADR-0004 - Use a platform-oriented architecture for Gradle","text":""},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#date","title":"Date","text":"<p>2024-02-07</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#context","title":"Context","text":"<p>The Gradle code base is essentially a large monolith, without strong internal boundaries. This has a number of negative effects on productivity, including:</p> <ul> <li>Unclear ownership of code.</li> <li>Difficult to focus on one particular area.</li> <li>Unintended coupling between areas of the code, including tests.</li> </ul>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#decision","title":"Decision","text":"<p>Organize the Gradle code base into a set of coarse-grained \"architecture modules\". An architecture module is responsible for providing a coherent set of features and:</p> <ul> <li>Provides a set of APIs and services for use from outside the module.</li> <li>Has a private implementation.</li> <li>Is owned by a single team. A team may own multiple architecture modules.</li> </ul> <p>The modules are arranged into several different \"Gradle platforms\". A Gradle platform is a logical distribution that provides support for a specific kind of automation. A typical platform builds on other platforms in order to add more capabilities, for example, to add support for a particular language.</p> <p>See the discovery document (internal document) for more context.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#platforms","title":"Platforms","text":"<p>The platforms and their architecture modules are:</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#core-automation-platform","title":"Core automation platform","text":"<p>This is a general-purpose automation platform which takes care of the efficient definition and execution of work, such as tasks. This platform is agnostic to what exactly the purpose of the work is. It might be creating an application, setting up development environments, orchestrating deployments, running simulations, etc.</p> <p>This platform does not provide special support for a particular kind of automation. This is the responsibility of other platforms. </p> <p>It is made up of 3 architecture modules:</p> <ul> <li>Runtime: Provides the runtimes or \"containers\" in which code runs. These runtimes include the Gradle client, the daemon and the worker processes. This is the base module on which all other architecture modules depend.</li> <li>Configuration: Allows the build structure and work, such as tasks, to be specified. This includes the project model, the DSL and so on.</li> <li>Execution: Runs the work efficiently. This includes scheduling, execution, caching and so on.</li> </ul>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#software-development-platform","title":"Software development platform","text":"<p>This is a general purpose platform that builds on the core automation platform to add support for the automation of software development. This includes work such as compiling, testing and documenting software, plus sharing that software via publishing and dependency management. This platform is agnostic to what kind of software is being developed. It might be Java or Kotlin libraries running on the JVM, Gradle plugins, Android or iOS applications, C++ libraries, and so on.</p> <p>This platform does not provide special support for a particular language or ecosystem.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#jvm-platform","title":"JVM platform","text":"<p>This is a platform that builds on the core and software platforms to add support for developing software that runs on the JVM. This includes software that is implemented using Java, Kotlin or some other JVM language.</p> <p>This platform provides specific support for Java, Groovy and Scala, and includes the foojay toolchain plugin. </p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#extensibility-platform","title":"Extensibility platform","text":"<p>This is a platform that builds on the core, software and JVM platforms to add support for extending Gradle by implementing and applying plugins.</p> <p>This platform includes the plugin publishing plugin and the plugin portal.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#native-platform","title":"Native platform","text":"<p>This is a platform that builds on the core and software platforms to add support for developing native software.</p> <p>This platform provides specific support for Swift, C++ and C.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#cross-cutting-architecture-modules","title":"Cross-cutting architecture modules","text":"<p>There are some additional cross-cutting architecture modules that aren't themselves platforms:</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#enterprise-integration","title":"Enterprise integration","text":"<p>Provides cross-cutting integration with Gradle's commercial product.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#ide-integration","title":"IDE integration","text":"<p>Provides cross-cutting integration with IDEs and other tooling.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#build-infrastructure","title":"Build infrastructure","text":"<p>Provides build logic, libraries, test suites and infrastructure to support developing and releasing Gradle.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#documentation","title":"Documentation","text":"<p>Provides cross-cutting Gradle documentation and samples, along with the infrastructure to write, test, publish and host the documentation.</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#status","title":"Status","text":"<p>ACCEPTED</p>"},{"location":"gradle/architecture/standards/0004-use-a-platform-architecture/#consequences","title":"Consequences","text":"<ul> <li>Assign ownership of each architecture module to one team.</li> <li>Assign each source file to one architecture module.</li> <li>Align the source tree layout with this architecture.</li> <li>Define and enforce the private implementation of each module.</li> </ul>"},{"location":"gradle/architecture/standards/0005-introduce-core-ui-architecture-module/","title":"ADR-0004 - Introduce a UI architecture module to the core platform","text":""},{"location":"gradle/architecture/standards/0005-introduce-core-ui-architecture-module/#adr-0004-introduce-a-ui-architecture-module-to-the-core-platform","title":"ADR-0004 - Introduce a UI architecture module to the core platform","text":""},{"location":"gradle/architecture/standards/0005-introduce-core-ui-architecture-module/#date","title":"Date","text":"<p>2024-02-07</p>"},{"location":"gradle/architecture/standards/0005-introduce-core-ui-architecture-module/#context","title":"Context","text":"<p>The Gradle core platform provides many services to the Gradle platforms and builds logic. One such group of services allows logic to interact with the build user, to provide diagnostics, progress information, prompt for questions, and so on. Currently, these services are part of the core platform runtime architecture module.</p> <p>A downside of this structure is that it is difficult to do focused work on the Gradle UI.</p>"},{"location":"gradle/architecture/standards/0005-introduce-core-ui-architecture-module/#decision","title":"Decision","text":"<p>Introduce a \"UI\" architecture module to the core platform, and move the user interaction services to this new module.</p> <p>This includes:</p> <ul> <li>Logging and progress services.</li> <li>Problem generation services (aka the \"problems API\").</li> <li>User prompting services.</li> <li>Build options infrastructure.</li> <li>The console and CLI, as a specific implementation of these services.</li> </ul> <p>The UI architecture module uses the core runtime architecture module. It provides APIs that are used by the other modules and platforms. </p> <p>This ADR does not specify the owner of this new architecture module. However, as a separate module, it can be assigned ownership independently of the other core services.</p>"},{"location":"gradle/architecture/standards/0005-introduce-core-ui-architecture-module/#status","title":"Status","text":"<p>ACCEPTED</p>"},{"location":"gradle/architecture/standards/0005-introduce-core-ui-architecture-module/#consequences","title":"Consequences","text":"<ul> <li>Introduce the module and move the services and their implementations.</li> <li>Assign ownership of the module.</li> </ul>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/","title":"ADR-0006 - Use of Provider APIs in Gradle","text":""},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#adr-0006-use-of-provider-apis-in-gradle","title":"ADR-0006 - Use of Provider APIs in Gradle","text":""},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#date","title":"Date","text":"<p>2024-06-21</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#context","title":"Context","text":"<p>Modern best practices when developing a Gradle plugin are to use lazy types (ConfigurableFileCollection, Provider API, domain object containers) when defining configurable parts of a plugin (tasks, extensions, domain objects).  The Provider API provides a consistent way to set conventions, wire related configuration together (extension &lt;- domain object &lt;- task) and avoid evaluation ordering problems.</p> <p>The Gradle codebase has evolved over time and has a mixture of simple getter/setter methods, Provider API and things in between.  It can be hard to follow best practices because Gradle provided types are reused in unexpected ways and extended by third party plugins.</p> <p>Given these constraints, we cannot always follow best practices.  This ADR proposes the way we should handle the use of Provider APIs in the gradle/gradle codebase.</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#decision","title":"Decision","text":""},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#types-of-properties-that-should-not-use-lazy-types","title":"Types of properties that should not use lazy types","text":"<p>The guidelines below do not apply to all properties. There are cases where the lazy types should not be used:</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#non-calculated-values","title":"Non-calculated values","text":"<p>These are inappropriate uses of lazy types:</p> <p></p><pre><code>class Example {\n    Property&lt;String&gt; getSomeProperty()\n\n    Example() {\n        getSomeProperty().set(\"value\")\n        getSomeProperty().disallowChanges()\n    }\n}\n\nclass Example2 {\n    Provider&lt;String&gt; getSomeProperty() {\n        return project.provider(() -&gt; \"value\")\n    }\n}\n</code></pre> This is unnecessary because this value is not calculated and cannot be changed."},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#nested-values","title":"Nested values","text":"<p>This is an inappropriate use of lazy types:</p> <pre><code>interface NestedType {\n    Property&lt;String&gt; getSomeProperty()\n}\nclass Example {\n    Property&lt;NestedType&gt; getNestedProperty()\n}\n</code></pre> <p>This is unnecessary because users will have trouble creating instances of <code>NestedType</code> and merging different instances of <code>NestedType</code>. It's also more awkward for users to access the properties in the nested property.</p> <p>If the nested type is a managed type (Gradle can generate its implementation), you can define a nested property with: </p><pre><code>interface NestedType {\n    Property&lt;String&gt; getSomeProperty()\n}\nclass Example {\n    @Nested\n    NestedType getNestedProperty()\n}\n</code></pre> Otherwise, if the nested type requires an implementation class, you'll need to manage the lifecycle of it: <pre><code>interface NestedType {\n    Property&lt;String&gt; getSomeProperty()\n    void notManaged()\n}\nabstract class DefaultNestedType implements NestedType {\n    ...\n}\n\nclass Example {\n    private final NestedType nested\n    Example(ObjectFactory objects) {\n       this.nested = objects.newInstance(DefaultNestedType.class)\n    }\n\n    @Nested\n    NestedType getNestedProperty() {\n        return nested;\n    }\n}\n</code></pre> <p>You should prefer to use managed types when possible. </p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#identity-information","title":"Identity information","text":"<p>This is an inappropriate use of lazy types:</p> <pre><code>class Example {\n    Provider&lt;String&gt; getPath() {\n        return project.provider(() -&gt; path)\n    }\n}\n</code></pre> <p>Like above, this is an immutable part of the identity of the domain object and cannot be changed.</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#properties-in-entirely-new-classes","title":"Properties in entirely new classes","text":"<p>When developing an entirely new class (task, extension, domain object, etc), the API should consist of managed lazy properties.</p> <p>Preferably, these new classes should be 100% managed and have their implementation generated by Gradle at runtime.</p> <p>It's acceptable for implementation classes to be written to fit into existing code, but new classes must not instantiate managed properties or implement getters manually.</p> <p>This is preferred:</p> <pre><code>public interface NewThing {\n    Property&lt;String&gt; getSomeProperty()\n}\n</code></pre> <p>This is acceptable:</p> <pre><code>public interface NewThing {\n    Property&lt;String&gt; getSomeProperty()\n}\n\nabstract class DefaultNewThing implements NewThing {\n    // special logic to integrate with something existing\n}\n</code></pre> <p>or</p> <pre><code>public abstract class NewThing {\n    public abstract Property&lt;String&gt; getSomeProperty()\n    // special logic to integrate with something existing\n}\n</code></pre> <p>This is not acceptable:</p> <pre><code>public interface NewThing {\n    Property&lt;String&gt; getSomeProperty()\n}\n\nabstract class DefaultNewThing implements NewThing {\n    private final Property&lt;String&gt; someProperty\n    DefaultNewThing(ObjectFactory objects) {\n       someProperty = objects.property(String.class)\n    }\n    public Property&lt;String&gt; getSomeProperty() {\n        return someProperty\n    }\n}\n</code></pre> <p>Note that managed classes like these need to be instantiated via ObjectFactory so that runtime decorations are applied. Failure to do this will cause strange usability problems in the Groovy DSL.</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#new-properties-in-an-existing-class","title":"New properties in an existing class","text":"<p>When adding a property to an existing class (task, extension, domain object, etc), the API should consist of managed lazy properties.  However, some exceptions need to be made to keep backwards compatibility with existing builds.</p> <p>This is preferred when the implementation type is internal:</p> <pre><code>public interface ExistingThing {\n    String getOtherProperty()\n    void setOtherProperty(String s)\n\n    Property&lt;String&gt; getSomeProperty()\n}\n\nabstract class DefaultExistingThing implements ExistingThing {\n    private String otherProperty\n    public String getOtherProperty() ...\n    public void setOtherProperty(String s) ...\n\n    // NOTE: No direct implementation of getSomeProperty\n}\n</code></pre> <p>This is acceptable when the implementation type is public and/or has been extended by something outside gradle/gradle:</p> <pre><code>public interface ExistingThing {\n    String getOtherProperty()\n    void setOtherProperty(String s)\n\n    Property&lt;String&gt; getSomeProperty()\n}\n\nabstract class DefaultExistingThing implements ExistingThing {\n    private String otherProperty\n    private final Property&lt;String&gt; someProperty\n\n    DefaultNewThing(ObjectFactory objects) {\n       someProperty = objects.property(String.class)\n    }\n\n    public String getOtherProperty() ...\n    public void setOtherProperty(String s) ...\n\n    public Property&lt;String&gt; getSomeProperty() {\n        return someProperty\n    }\n}\n</code></pre> <p>It is not acceptable to introduce new properties on a task, extension or domain object that use plain getters and setters.  It is also not acceptable to add setters that take a Provider.</p> <p>Note that when adding a lazy property to an existing class, you need to check if instances of the class are instantiated via ObjectFactory. Most classes are instantiated this way, but it's possible that a class without any lazy properties was never updated to use it. A tell-tale sign that an object is not instantiated via the ObjectFactory are direct calls to the constructor with new.</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#existing-properties-in-existing-classes","title":"Existing properties in existing classes","text":"<p>This is out of scope for this ADR.  Migrating an existing property to lazy types is being handled in a different way.</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#conventions","title":"Conventions","text":"<p>Once a new property has been introduced, you need to consider what its conventions will be.</p> <p>A convention is a value for a property that is used when no other opinion has been provided.  Sometimes conventions are called \"default values\", but this can be confusing because no property has a \"default value\" upon creation (except for collection-like properties, which start empty).  Conventions need to be explicitly set on a property.</p> <p>When defining conventions for a property, there are largely three approaches: 1. Do not set a convention at all 2. Set a convention in a plugin 3. Set a convention in a constructor</p> <p>Most properties should have a convention set, so (1) can be treated as a rare case where a value must be provided by a user.</p> <p>Best practice is to set conventions in a plugin (2). This keeps the underlying object \"dumb\", so it can be reused in multiple contexts and doesn't contain any special information about how conventions are calculated or what they could be.  In the wild, we've seen some objects set conventions in the object's constructor (3), but this can lead to unexpected assumptions or coupling between plugins.</p> <p>For external plugins, it's difficult for an object to be used outside the application of a plugin, so following best practices is relatively straightforward.  For core plugins in gradle/gradle, it's easy for an object to be created without applying its associated plugin. For instance, Spring has a plugin that uses the Checkstyle task directly without applying the Checkstyle plugin.</p> <p>Until we can provide the same guarantees for core plugins, we need to be more conservative for existing classes and not follow best practices. This means conventions need to be set in both a plugin and the constructor. This keeps existing builds working, but it may complicate the implementation.</p> <p>This is preferred for entirely new things:</p> <pre><code>public interface NewThing {\n    Property&lt;String&gt; getSomeProperty()\n}\n\n// in plugin\nnewThing = objects.newInstance(NewThing.class)\nnewThing.convention(\"some-value\")\n</code></pre> <p>This is acceptable for existing things:</p> <pre><code>public interface ExistingThing {\n    Property&lt;String&gt; getSomeProperty()\n}\n\nabstract class DefaultExistingThing implements ExistingThing {\n    DefaultExistingThing() {\n        getSomeProperty().convention(\"some-value\")\n    }\n}\n\n// in plugin\nexistingThing = objects.newInstance(DefaultExistingThing.class)\nexistingThing.convention(\"some-value\")\n</code></pre> <p>It's not acceptable to treat an unset Provider as if the convention is requested when the convention could be set elsewhere:</p> <pre><code>public interface NewThing {\n    Property&lt;String&gt; getSomeProperty()\n}\n\n// Unacceptable\nString value\nif (!getSomeProperty().isPresent()) {\n   value = \"convention\"\n} else {\n   value = getSomeProperty().get()\n}\n\n// Also unacceptable\nString value = getSomeProperty().getOrElse(\"convention\")\n\n// This should be always:\nString value = getSomeProperty().get()\n</code></pre>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#status","title":"Status","text":"<p>ACCEPTED</p>"},{"location":"gradle/architecture/standards/0006-use-of-provider-apis-in-gradle/#consequences","title":"Consequences","text":"<ul> <li>We are incurring debt that will need to be paid later via deprecations or breaking changes to existing classes. The implementation for some Gradle types will be more complicated than an equivalent clean-sheet implementation.</li> <li>During code reviews that introduce new APIs, reviewers need to be mindful that all new properties are implemented with lazy types.</li> <li>During code reviews, reviewers need to follow the recommendations here.</li> </ul>"},{"location":"gradle/platforms/documentation/docs/","title":"Gradle Build Tool Docs","text":"<p>The docs project produces the user manual, DSL reference, javadoc and release notes (as well as some other minor bits).</p> <p>The following is some help for working with the docs, all file paths are relative to this directory unless specified otherwise.</p>"},{"location":"gradle/platforms/documentation/docs/#release-notes","title":"Release Notes","text":"<p>The release notes are generated from <code>src/docs/release/notes.md</code>.</p>"},{"location":"gradle/platforms/documentation/docs/#schema","title":"Schema","text":"<p>Every <code>h2</code> tag and <code>h3</code> will be listed in the generated TOC.</p> <p>After every <code>h3</code> all content after the first element (usually a <code>p</code>) will be collapsed/expandable, up until the next <code>h3</code>, or <code>h2</code>.</p> <p>After every <code>h4</code> all content will be collapsed/expandable, up until the next <code>h4</code>, <code>h3</code> or <code>h2</code>.</p> <p>An <code>h3</code> may include an incubating marker <code>(i)</code> at the end of its text to indicate that the feature is incubating.</p> <p>Here's an example:</p> <pre><code>## h2 New and Noteworthy\n\n### h3 Some feature (i)\n\nThis is some incubating feature.\n\n#### h4 Some detail\n\nThis detail about the feature is collapsed. The reader can expand it if they are interested.\n</code></pre>"},{"location":"gradle/platforms/documentation/docs/#generating","title":"Generating","text":"<p>Run the <code>:docs:releaseNotes</code> task to generate the release notes.</p>"},{"location":"gradle/platforms/documentation/docs/#user-manual","title":"User Manual","text":"<p>The source for the user manual lives @ <code>src/docs/userguide</code>, and is authored in Asciidoctor.</p> <p>To generate the user manual for the final preview and see all changes, you normally want to run:</p> <pre><code>./gradlew stageDocs\n</code></pre> <p>That will generate all the docs in the <code>build/docs</code> directory.</p> <p>For development and fast feedback you should use:</p> <pre><code>./gradlew stageDocs -PquickDocs\n</code></pre> <p>Alternatively, if you want to serve the docs in a built-in webserver (http://localhost:8000), you can use:</p> <pre><code>./gradlew serveDocs -PquickDocs\n</code></pre> <p>The flag <code>-PquickDocs</code> disables some slow documentation tasks, like creating the DSL reference or the single page user manual PDF or HTML. This will automatically enter continuous build and rebuild the documentation when you make changes. It takes 30-40 seconds to rebuild the documentation in \"quick mode\".</p> <p>If you really want to generate just the user manual, you can run:</p> <pre><code>./gradlew :docs:userguide\n</code></pre> <p>But note that the generated documentation might not be fully functional (e.g. links will not work). This will generate:</p> <ul> <li>A multi-page HTML manual in <code>build/working/usermanual/render-multi/</code> for each chapter. There is a 1-1 mapping from <code>.adoc</code> file to <code>.html</code> file.</li> <li>A single-page HTML manual at <code>build/working/usermanual/render-single-html/userguide_single.html</code></li> <li>A PDF at <code>build/working/usermanual/render-single-pdf/userguide_single.pdf</code></li> </ul> <p>Note that PNG files in the source are generated from \".graphml\" files in the same directory.  You can edit these files with tools like yEd and then generate the associated PNG.</p>"},{"location":"gradle/platforms/documentation/docs/#authoring-with-asciidoc","title":"Authoring with AsciiDoc","text":"<p>To write a chapter in Asciidoctor format, simply place it in <code>src/docs/userguide</code> called <code>&lt;chapter&gt;.adoc</code>.</p> <p>You will find these references useful when authoring AsciiDoc:</p> <ul> <li>AsciiDoc Syntax Quick Reference</li> <li>Asciidoctor User Manual</li> <li>Asciidoctor Gradle Plugin Reference</li> </ul>"},{"location":"gradle/platforms/documentation/docs/#adding-new-chapters","title":"Adding new chapters","text":"<p>When adding a new chapter to the manual do the following steps: 1. Create a file called <code>&lt;chapter&gt;.adoc</code> in a suitable subdirectory of <code>src/docs/userguide</code> and write the content there. 2. Add the license text to the top of the file and also add an ID for the chapter title. This is required to be able to link directly to the chapter from other chapters, as opposed to linking to a section inside.\\ The ID should preferably match the name of the <code>adoc</code> file.  For instance, linking to <code>toolchains.adoc</code> is possible with <code>&lt;&lt;toolchains.adoc#toolchains,Text&gt;&gt;</code>, and the declaration looks like:     </p><pre><code>[[toolchains]]\n= Toolchains for JVM projects\n</code></pre> 3. Include the new chapter file in the <code>userguide_single.adoc</code>. 4. Include the relative link to the new chapter in the <code>header.html</code>"},{"location":"gradle/platforms/documentation/docs/#code-snippets","title":"Code Snippets","text":"<p>Snippets and output belong under <code>src/snippets</code> and are typically included in the user manual. This is a typical example:</p>"},{"location":"gradle/platforms/documentation/docs/#example-multi-language-sample-file-listing","title":"Example multi-language sample file listing","text":"<p>This shows Groovy and Kotlin sample projects under \"sample-dir\" which is defined as \"$projectDir/src/snippets\".</p> <pre><code>platforms/documentation/docs/src/snippets/\n\u2514\u2500\u2500 initScripts/customLogger/\n \u00a0\u00a0 \u251c\u2500\u2500 customLogger.out\n \u00a0\u00a0 \u251c\u2500\u2500 customLogger.sample.conf\n \u00a0\u00a0 \u251c\u2500\u2500 groovy\n \u00a0\u00a0 \u2502   \u251c\u2500\u2500 build.gradle\n \u00a0\u00a0 \u2502   \u251c\u2500\u2500 init.gradle\n \u00a0\u00a0 \u2502   \u2514\u2500\u2500 settings.gradle\n \u00a0\u00a0 \u2514\u2500\u2500 kotlin\n \u00a0\u00a0     \u251c\u2500\u2500 build.gradle.kts\n \u00a0\u00a0     \u251c\u2500\u2500 customLogger.init.gradle.kts\n \u00a0\u00a0     \u2514\u2500\u2500 settings.gradle.kts\n</code></pre> <p>Note here that there are 2 sample projects under <code>initScripts/customLogger/</code>: one for the Groovy DSL and one for Kotlin DSL. Also note that there is only 1 <code>customLogger.sample.conf</code> file that tells Exemplar how to execute both groovy and kotlin samples, with 1 <code>customLogger.out</code> file proving the output is identical between the two.</p>"},{"location":"gradle/platforms/documentation/docs/#example-asciidoctor-multi-language-sample-declaration","title":"Example Asciidoctor multi-language sample declaration","text":"<pre><code>.Customizing what Gradle logs\n====\ninclude::sample[dir=\"snippets/initScripts/customLogger/kotlin\",files=\"customLogger.init.gradle.kts[]\"]\ninclude::sample[dir=\"snippets/initScripts/customLogger/groovy\",files=\"init.gradle[]\"]\n====\n\n[.multi-language-text.lang-kotlin]\n----\n$ gradle -I customLogger.init.gradle.kts build\ninclude::{snippetsPath}/initScripts/customLogger/tests/customLogger.out[]\n----\n[.multi-language-text.lang-groovy]\n----\n$ gradle -I init.gradle build\ninclude::{snippetsPath}/initScripts/customLogger/tests/customLogger.out[]\n----\n</code></pre> <p>Let's break down this example to explain:</p> <ul> <li>Enclosing <code>====</code> around the sample includes groups these samples and collapses them</li> <li><code>include::sample</code>: invokes the <code>SampleIncludeProcessor</code> asciidoctor extension, with a <code>dir</code> relative to <code>src/snippets/</code>, and a list of <code>files</code> separated by <code>;</code> (only 1 in this example), each with optional <code>tags=...</code> (like Asciidoctor's tags mechanism). We write this once for each DSL dialect. This notes to our front-end code to group these 2 samples and show them with selector tabs.</li> <li><code>[.multi-language-text.lang-groovy]</code>: Most times the gradle command is identical between Groovy and Kotlin samples, but in this case we need to use <code>[.multi-language-text.lang-*]</code> that our CSS will collapse and switch for the DSL of choice. This is case-sensitive. You can use this construct for any 2 sibling blocks!</li> </ul> <p>It is possible to embed sample sources, commands, and expected output directly in the Asciidoc (or a mixture of embedded and <code>include</code>d), but we don't use this for the user manual yet. See the Exemplar documentation if you're interested in this.</p>"},{"location":"gradle/platforms/documentation/docs/#testing-docs","title":"Testing docs","text":"<p>Currently, <code>docs</code> is tested by <code>docs:docsTest</code>, which covers three kinds of code: </p> <ul> <li>The code generated by Build Init Plugin, i.e. <code>gradle init</code> task.<ul> <li><code>generate-samples.gradle.kts</code> registers multiple generator tasks that generate the same sample project code as you manually run <code>gradle init</code>.</li> <li>These sample projects will also be published beside the user manual.</li> </ul> </li> <li>The code samples under <code>platforms/documentation/docs/src/samples</code>. They are published beside the user manual.</li> <li>The code snippets under <code>platforms/documentation/docs/src/snippets</code>, which are typically included in the user manual.</li> </ul> <p>Note: the terminology <code>sample</code> could refer to different things depending on the context:</p> <ul> <li>The code samples under <code>platforms/documentation/docs/src/samples</code>. We'll call them \"code samples.\"</li> <li>The test unit used by exemplar framework. We'll call them \"exemplar sample\".</li> </ul> <p>The build script of the <code>docs</code> subproject (<code>supprojects/docs/build.gradle</code>) eventually assembles the three kinds of docs code above to exemplar samples and then tests them with exemplar.</p>"},{"location":"gradle/platforms/documentation/docs/#orggradlesamples-plugin","title":"<code>org.gradle.samples</code> plugin","text":"<p><code>platforms/documentation/docs/build.gradle</code> applies <code>generate-samples.gradle.kts</code>, which further applies an opinionated plugin called <code>org.gradle.samples</code>. The source code of this plugin is here. This plugin adds a <code>Samples</code> extension named <code>samples</code>.</p> <p>This <code>samples</code> extension is configured in both <code>platforms/documentation/docs/build.gradle</code> and <code>generate-samples.gradle.kts</code>: all docs code to be tested will be assembled into <code>samples.publishedSamples</code>, as follows:</p> <pre><code>This graph is generated by [asciiflow.com](https://asciiflow.com/). You can copy-paste it to the website to modify it. \n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 documentation/docs/build.gradle    \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2502 generate-samples.gradle.kts    \u251c\u2500\u253c\u2500\u2500\u2500\u25ba\u2502 code generated by init tasks    \u251c\u2500\u2500\u2500\u2510\n\u2502 \u2502                                \u2502 \u2502    \u2502                                 \u2502   \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                    \u2502                                          \u2502\n\u2502  samples {                         \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502    ...                             \u2502    \u2502 code snippets in src/snippets   \u251c\u2500\u2500\u2500\u2524\n\u2502    publishedSamples {  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u252c\u2500\u25ba\u2502                                 \u2502   \u2502\n\u2502      ...                           \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                                        \u2502\n                                       \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n                                       \u2514\u2500\u25ba\u2502 code samples in src/samples     \u251c\u2500\u2500\u2500\u2524\n                                          \u2502                                 \u2502   \u2502\n                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n                                                                                \u2502\n                                                                                \u2502\n                                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n                                        \u2502 org.gradle.samples plugin         \u2502   \u2502\n                                        \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   Install samples to    \u2502 \u2502 Samples.publishedSamples    \u2502   \u2502   \u2502\n\u2502  Exemplar   \u2502   local directory and   \u2502 \u2502                             \u2502   \u2502   \u2502\n\u2502             \u2502   test with exemplar    \u2502 \u2502                             \u2502   \u2502   \u2502\n\u2502             \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502                             \u25c4\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2518\n\u2502             \u2502                         \u2502 \u2502                             \u2502   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2502 \u2502                             \u2502   \u2502\n                                        \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n                                        \u2502                                   \u2502\n                                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The elements in <code>samples.publishedSamples</code> container will later be installed into a local directory (by default <code>docs/build/working/samples/install</code>) as exemplar samples.</p> <p>After the exemplar examples are installed, <code>docs:docsTest</code> will start testing them (see <code>BaseSamplesTest</code>).</p>"},{"location":"gradle/platforms/documentation/docs/#code-samples","title":"Code samples","text":"<p>To run the samples tests: </p><pre><code>./gradlew :docs:docsTest --tests \"org.gradle.docs.samples.*.*\"\n</code></pre> <p>To run tests for a single sample, let's say from <code>samples/java/application</code>: </p><pre><code>./gradlew :docs:docsTest --tests \"org.gradle.docs.samples.DependencyManagementSnippetsTest.java-application*\"\n</code></pre> <p>Note that the samples are also used in <code>samples</code> subproject, see <code>@UsesSample</code> and <code>Sample</code>.</p>"},{"location":"gradle/platforms/documentation/docs/#code-snippets_1","title":"Code snippets","text":"<p>As an example, you can run Kotlin and Groovy snippets tests from <code>src/snippets/java/toolchain-task/</code> using: </p><pre><code>./gradlew :docs:docsTest --tests \"*.snippet-java-toolchain-task_*\"\n</code></pre> <p>You can also filter the tests for a specific DSL like this: </p><pre><code>./gradlew :docs:docsTest --tests \"*.snippet-java-toolchain-task_kotlin_*\"\n</code></pre>"},{"location":"gradle/platforms/documentation/docs/#testing-with-configuration-cache","title":"Testing with configuration cache","text":"<p>It is possible to run samples and snippets with the configuration cache enabled to ensure compatibility. You can do that by setting the Gradle property <code>enableConfigurationCacheForDocsTests</code> in the command line or in the <code>gradle.properties</code> file. </p><pre><code>./gradlew :docs:docsTest --tests \"*.snippet-java-toolchain-task_*\" -PenableConfigurationCacheForDocsTests=true\n</code></pre>"},{"location":"gradle/platforms/documentation/docs/#groovy-dsl-reference","title":"Groovy DSL Reference","text":"<p>The DSL reference is authored in Docbook syntax, with sources under <code>src/docs/dsl</code>. Much of the content is extracted from code doc comments.</p> <p>To build it, run:</p> <pre><code>./gradlew :docs:dslHtml\n</code></pre> <p>The output is available under <code>build/working/dsl</code>.</p>"},{"location":"gradle/platforms/documentation/docs/#useful-docbook-tags","title":"Useful docbook tags","text":"<p>See the docbook reference for a list of all available tags.</p>"},{"location":"gradle/platforms/documentation/docs/#custom-tags","title":"Custom Tags","text":""},{"location":"gradle/platforms/documentation/docs/#apilink","title":"<code>&lt;apilink&gt;</code>","text":"<p>This is an inline element which adds a link to the API documentation for a particular class or method.</p> <pre><code>You can use the &lt;apilink class='org.gradle.api.Project' /&gt; interface to do stuff.\n</code></pre> <p>The link will point to the DSL reference for the specified class, if available. Otherwise, it will point to the javadoc for the class.</p> <p>To link to a method:</p> <pre><code>&lt;apilink class='org.gradle.api.Project' method=\"apply(java.util.Map)\" /&gt;\n</code></pre>"},{"location":"gradle/platforms/documentation/docs/#javadocs","title":"Javadocs","text":"<p>To build these, run:</p> <pre><code>./gradlew :docs:javadocAll\n</code></pre> <p>The output is available within <code>build/javadoc</code>.</p>"},{"location":"gradle/platforms/documentation/docs/#building-all-the-docs","title":"Building all the docs","text":"<p>There is a convenience task to build all of the documentation:</p> <pre><code>./gradlew :docs:docs\n</code></pre>"},{"location":"roadmap/","title":"Public Roadmap","text":""},{"location":"roadmap/#gradle-build-tool-roadmap","title":"Gradle Build Tool Roadmap","text":""},{"location":"roadmap/#about-this-roadmap","title":"About this Roadmap","text":"<p>You can see the current projects on our project board:</p> <p></p> <p>The Gradle Build Tool roadmap provides a clear, high-level overview of key engineering projects and user-facing features planned for future Gradle releases. Our goal is to offer the Gradle community greater transparency about what to expect in upcoming versions and to illustrate how the tool is evolving to meet users' needs.</p> <p>Gradle regularly delivers releases packed with enhancements, bug fixes, and new features. Historically, we communicated these changes through release notes, blog posts, issue trackers, forums, and community Slack. However, we recognized the need for a more organized and comprehensive overview of what\u2019s on the horizon. This roadmap addresses that need, providing users with a clearer picture of where the Gradle Build Tool is headed.</p> <p>The roadmap board is hosted on GitHub and organizes major projects and user-facing improvements by quarter and target release. Each item includes a brief description and links to relevant issues in the issue tracker, allowing you to follow the progress of specific features.</p> <p>The board also shows the past two quarters so that you can see what we delivered in recent Gradle releases. </p> <p>Each roadmap item provides a brief description and links to related issues in the issue tracker.</p> <p></p> <p>For a summary of recent updates, please refer to the Recent Releases.</p> <p>While the roadmap highlights key initiatives, every Gradle release also includes numerous smaller improvements and bug fixes. For a full breakdown of these changes, visit the issue tracker, milestones, and release notes.</p>"},{"location":"roadmap/#feedback","title":"Feedback","text":"<p>To maintain clarity and organization, comments are disabled directly on the roadmap board. However, we welcome your feedback and questions on the community Slack in the #roadmap channel.</p>"},{"location":"roadmap/#disclaimer","title":"Disclaimer","text":"<p>A few words of caution from our lawyers </p> <p>The information contained in this Gradle Build Tool Roadmap (the \"Roadmap\") is intended to outline our general product direction, which is subject to change at any time. The content provided in this Roadmap is provided for informational purposes only and is not a commitment, promise or legal obligation to deliver any material, code, or functionality and should not be relied upon in making purchasing or other decisions. The development, release and timing of any features or functionality described in this Roadmap remains at the sole discretion of Gradle, Inc. Product capabilities, timeframes and features are subject to change and should not be viewed as commitments.</p>"},{"location":"gradle-profiler/","title":"Gradle Profiler","text":""},{"location":"gradle-profiler/#gradle-profiler","title":"Gradle Profiler","text":"<p>A tool to automate the gathering of profiling and benchmarking information for Gradle builds.</p> <p>Profiling information can be captured using several different tools:</p> <ul> <li>Using Gradle build scans</li> <li>Using Async Profiler</li> <li>Using JProfiler</li> <li>Using YourKit profiler</li> <li>Using Java flight recorder</li> <li>Producing a heap dump in HPROF format</li> <li>Producing Chrome Trace output</li> </ul>"},{"location":"gradle-profiler/#installing","title":"Installing","text":""},{"location":"gradle-profiler/#sdkman","title":"SDKMAN!","text":"<p>SDKMAN! is a tool for managing parallel versions of multiple Software Development Kits on most Unix-based systems.</p> <pre><code>&gt; sdk install gradleprofiler\n&gt; gradle-profiler --benchmark help\n</code></pre>"},{"location":"gradle-profiler/#homebrew","title":"Homebrew","text":"<p>Homebrew is the easiest and most flexible way to install the UNIX tools Apple didn\u2019t include with macOS.</p> <pre><code>&gt; brew install gradle-profiler\n&gt; gradle-profiler --benchmark help\n</code></pre>"},{"location":"gradle-profiler/#download-binaries","title":"Download binaries","text":"<p>Binaries are available and linked from the releases page.</p>"},{"location":"gradle-profiler/#build-from-source","title":"Build from source","text":"<p>First, build and install the <code>gradle-profiler</code> app using:</p> <pre><code>&gt; ./gradlew installDist\n</code></pre> <p>This will install the executable into <code>./build/install/gradle-profiler/bin</code>. The examples below assume that you add this location to your PATH or create a <code>gradle-profiler</code> alias for it.</p> <p>NOTE: You have to use Java 11 or later to build this project.</p>"},{"location":"gradle-profiler/#benchmarking-a-build","title":"Benchmarking a build","text":"<p>Benchmarking simply records the time it takes to execute your build several times and calculates a mean and standard error for it. It has zero impact on the execution time, so it is ideal for making before/after comparisons for new Gradle versions or changes to your build.</p> <p>Run the <code>gradle-profiler</code> app using:</p> <pre><code>&gt; gradle-profiler --benchmark --project-dir &lt;root-dir-of-build&gt; &lt;task&gt;...\n</code></pre> <p>Where <code>&lt;root-dir-of-build&gt;</code> is the directory containing the build to be benchmarked, and <code>&lt;task&gt;</code> is the name of the task to run, exactly as you would use for the <code>gradle</code> command.</p> <p>Results will be written to a file called <code>profile-out/benchmark.html</code> and <code>profile-out/benchmark.csv</code>.</p> <p>When the profiler runs the build, it will use the tasks you specified. The profiler will use the default Gradle version, Java installation and JVM args that have been specified for your build, if any. This generally works the same way as if you were using the Gradle wrapper. For example, the profiler will use the values from your Gradle wrapper properties file, if present, to determine which Gradle version to run.</p> <p>You can use the <code>--gradle-version</code> option to specify a Gradle version or installation to use to benchmark the build. You can specify multiple versions and each of these is used to benchmark the build, allowing you to compare the behaviour of several different Gradle versions.</p> <p>You can also use the <code>--measure-config-time</code> option to measure some additional details about configuration time.</p> <p>You can use <code>--measure-build-op</code> together with the fully qualified class name of the enveloping type of the <code>Details</code> interface to benchmark cumulative build operation time. For example, for Gradle 5.x there is a <code>org.gradle.api.internal.tasks.SnapshotTaskInputsBuildOperationType</code> which can be used to capture snapshotting time. The time recorded is cumulative time, so the wall clock time spent on executing the measured build operations is probably smaller. If the build operation does not exists in a benchmarked version of Gradle, it is gracefully ignored. In the resulting reports it will show up with 0 time.</p>"},{"location":"gradle-profiler/#regression-detection","title":"Regression detection","text":"<p>If multiple versions are tested, then Gradle profiler determines whether there is an statistically significant difference in the run times by using a Mann-Whitney U-Test. The result files contain the confidence if a sample has a different performance behavior - i.e. it is faster or slower - than the baseline.</p>"},{"location":"gradle-profiler/#profiling-a-build","title":"Profiling a build","text":"<p>Profiling allows you to get deeper insight into the performance of your build.</p> <p>To run the <code>gradle-profiler</code> app to profile a build use:</p> <pre><code>&gt; gradle-profiler --profile &lt;name-of-profiler&gt; --project-dir &lt;root-dir-of-build&gt; &lt;task&gt;...\n</code></pre> <p>The app will run the build several times to warm up a daemon, then enable the profiler and run the build. Once complete, the results are available under <code>profile-out/</code>.</p> <p>If you use Async profiler or JFR for profiling, Gradle profiler will also create flame graphs for each scenario. If you profile multiple scenarios or multiple versions, then Gradle profiler will create differential flame graphs as well.</p>"},{"location":"gradle-profiler/#gradle-build-scans","title":"Gradle build scans","text":"<p>Gradle build scans are a powerful tool to investigate the structure of your build and quickly find bottlenecks.  You can use the timeline view to see which tasks ran, how long they took, whether they were cached, how well your build parallelized etc.  The performance tab will show you details about configuration time and other hints on how to make your build faster.</p> <p>In order to create a build scan of your build, use <code>--profile buildscan</code>. The build scan URL is reported on the console and is also available in <code>profile-out/profile.log</code>. </p>"},{"location":"gradle-profiler/#async-profiler","title":"Async Profiler","text":"<p>Async profiler provides low-overhead CPU, allocation and perf event sampling on Linux and MacOS.  It also correctly handles native method calls, making it preferable to JFR on these operating systems. </p> <p>You can use async profiler to profile a Gradle build using <code>--profile async-profiler</code>. By default, this will profile CPU usage, with some reasonable default settings. These settings can be configured using various command-line options, listed below.</p> <p>Alternatively, you can also use <code>--profile async-profiler-heap</code> to profile heap allocations, with some reasonable default settings.</p> <p>Finally, you can also use <code>--profile async-profiler-all</code> to profile cpu, heap allocations, and locks with some reasonable default settings.</p> <p>By default, an Async profiler release will be downloaded from Github and installed, if not already available.</p> <p>The output are flame and icicle graphs which show you the call tree and hotspots of your code.</p> <p>The following options are supported and closely mimic the options of Async profiler. Have a look at its readme to find out more about each option:</p> <ul> <li><code>--async-profiler-event</code>: The event to sample, e.g. <code>cpu</code>, <code>wall</code>, <code>lock</code> or <code>alloc</code>. Defaults to <code>cpu</code>. Multiple events can be profiled by using this parameter multiple times.</li> <li><code>--async-profiler-count</code>: The count to use when aggregating event data. Either <code>samples</code> or <code>total</code>. <code>total</code> is especially useful for allocation profiling. Defaults to <code>samples</code>. Corresponds to the <code>--samples</code> and <code>--total</code> command line options for Async profiler.</li> <li><code>--async-profiler-interval</code>: The sampling interval in ns, defaults to 10_000_000 (10 ms).</li> <li><code>--async-profiler-alloc-interval</code>: The sampling interval in bytes for allocation profiling, defaults to 10 bytes. Corresponds to the <code>--alloc</code> command line option for Async profiler.</li> <li><code>--async-profiler-lock-threshold</code>: lock profiling threshold in nanoseconds, defaults to 250 microseconds. Corresponds to the <code>--lock</code> command line option for Async profiler.</li> <li><code>--async-profiler-stackdepth</code>: The maximum stack depth. Lower this if profiles with deep recursion get too large. Defaults to 2048.</li> <li><code>--async-profiler-system-threads</code>: Whether to show system threads like GC and JIT compilation in the profile. Usually makes them harder to read, but can be useful if you suspect problems in that area. Defaults to <code>false</code>. </li> </ul> <p>You can also use either the <code>ASYNC_PROFILER_HOME</code> environment variable or the <code>--async-profiler-home</code> command line option to point to the Async profiler install directory.</p>"},{"location":"gradle-profiler/#jprofiler","title":"JProfiler","text":"<p>JProfiler is a powerful commercial profiler, which provides both sampling and instrumentation capabilities. You can tailor its settings in the JProfiler UI and then instruct the Gradle profiler to use these settings for full control over what you want to investigate. For instance, you could split calls to a dependency resolution rule by argument to find out if the rule is slow for a specific dependency.</p> <p>In order to work with JProfiler, use the <code>--profile jprofiler</code> option.</p> <p>This will use JProfiler's CPU sampling by default. JProfiler supports several other options:</p> <ul> <li>Enable CPU sampling of all methods by adding <code>--jprofiler-config sampling-all</code> (by default only packages containing the word <code>gradle</code> are sampled)</li> <li>Switch to CPU instrumentation by adding <code>--jprofiler-config instrumentation</code></li> <li>Enable memory allocation recording by adding <code>--jprofiler-alloc</code></li> <li>Enable monitor usage recording by adding <code>--jprofiler-monitors</code></li> <li>Enable probes with <code>--jprofiler-probes:&lt;probe ids, separated by comma&gt;</code> (e.g. <code>--jprofiler-probes builtin.FileProbe</code>)</li> <li>Enable heapdump after build with <code>--jprofiler-heapdump</code></li> <li>Use a specific profiler session (for full control over filters, sampling intervals etc.) by adding <code>--jprofiler-session &lt;sessionId&gt;</code></li> <li>use a different JProfiler installation with <code>--jprofiler-home /path/to/jprofiler</code></li> </ul>"},{"location":"gradle-profiler/#yourkit","title":"YourKit","text":"<p>YourKit is a powerful commercial profiler, which provides both sampling and instrumentation capabilities. Its integration in the Gradle profiler is currently limited, e.g. support for probes and other custom settings is missing. If you are using YourKit and would like to see better support, pull requests are welcome.</p> <p>In order to work with YourKit, make sure the <code>YOURKIT_HOME</code> environment variable is set and then use the <code>--profile yourkit</code> option. This will use YourKit's CPU sampling instrumentation by default. </p> <p>You can switch to CPU tracing using the <code>--profile yourkit-tracing</code> option.  You can switch to memory allocation profiling by using the <code>--profile yourkit-heap</code> option.  All probes are disabled when using sampling or memory allocation profiling.</p>"},{"location":"gradle-profiler/#java-flight-recorder","title":"Java Flight Recorder","text":"<p>JFR provides low overhead CPU, allocation, IO wait and lock profiling and runs on all major operating systems. It is available on Oracle JDK since Java 7 and on OpenJDK since Java 11 (make sure you have at least 11.0.3).</p> <p>To our knowledge, it is the only low-overhead allocation profiler for Windows. However, be aware of its shortcomings, e.g. it will not sample native method calls, so you will get misleading CPU results if your code does a lot of system calls (like reading files). </p> <p>You will get both the JFR file and flame graph visualizations of the data, which are much easier to understand than the Java Mission Control UI. </p> <p>In order to profile with JFR, add the <code>--profile jfr</code> option.  You can change the profiler settings using <code>--jfr-settings</code>, specifying either the path to a <code>.jfc</code> file or the name of a built-in template like <code>profile</code>.</p>"},{"location":"gradle-profiler/#heap-dump","title":"Heap dump","text":"<p>To capture a heap dump at the end of each measured build, add the <code>--profile heap-dump</code> option. You can use this with other <code>--profile</code> options.</p>"},{"location":"gradle-profiler/#chrome-trace","title":"Chrome Trace","text":"<p>Chrome traces are a low-level event dump (e.g. projects being evaluated, tasks being run etc.). They are useful when you can't create a build scan, but need to look at the overall structure of a build. It also displays CPU load, memory usage and GC activity. Using chrome-trace requires Gradle 3.3+.</p> <p>Add the <code>--profile chrome-trace</code> option and open the result in Google Chrome in chrome://tracing. </p>"},{"location":"gradle-profiler/#command-line-options","title":"Command line options","text":"<ul> <li><code>--project-dir</code>: Directory containing the build to run (required).</li> <li><code>--benchmark</code>: Benchmark the build. Runs the builds more times and writes the results to a CSV file.</li> <li><code>--profile &lt;profiler&gt;</code>: Profile the build using the specified profiler. See above for details on each profiler.</li> <li><code>--output-dir &lt;dir&gt;</code>: Directory to write results to. Default value is <code>profile-out</code>. If profile-out directory already exists, it tries to find a <code>profile-out-&lt;index&gt;</code> directory, that does not exist.</li> <li><code>--warmups</code>: Specifies the number of warm-up builds to run for each scenario. Defaults to 2 for profiling, 6 for benchmarking, and 1 when not using a warm daemon.</li> <li><code>--iterations</code>: Specifies the number of builds to run for each scenario. Defaults to 1 for profiling, 10 for benchmarking.</li> <li><code>--bazel</code>: Benchmark scenarios using Bazel instead of Gradle. By default, only Gradle scenarios are run. You cannot profile a Bazel build using this tool.</li> <li><code>--buck</code>: Benchmark scenarios using Buck instead of Gradle. By default, only Gradle scenarios are run. You cannot profile a Buck build using this tool.</li> <li><code>--maven</code>: Benchmark scenarios using Maven instead of Gradle. By default, only Gradle scenarios are run. You cannot profile a Maven build using this tool.</li> </ul> <p>The following command line options only apply when measuring Gradle builds:</p> <ul> <li><code>--gradle-user-home</code>: The Gradle user home. Defaults to <code>&lt;project-dir&gt;/gradle-user-home</code> to isolate performance tests from your other builds.</li> <li><code>--gradle-version &lt;version&gt;</code>: Specifies a Gradle version or installation to use to run the builds, overriding the default for the build. You can specify multiple versions by using this option once for each version.</li> <li><code>--no-daemon</code>: Uses the <code>gradle</code> command-line client with the <code>--no-daemon</code> option to run the builds. The default is to use the Gradle tooling API and Gradle daemon.</li> <li><code>--cold-daemon</code>: Use a cold daemon (one that has just started) rather than a warm daemon (one that has already run some builds). The default is to use a warm daemon.</li> <li><code>--cli</code>: Uses the <code>gradle</code> command-line client to run the builds. The default is to use the Gradle tooling API and Gradle daemon.</li> <li><code>--measure-build-op</code>: Additionally measure the cumulative time spent in the given build operation. Only supported for Gradle 6.1 and later.</li> <li><code>--measure-config-time</code>: Measure some additional details about configuration time. Only supported for Gradle 6.1 and later.</li> <li><code>--measure-gc</code>: Measure the garbage collection time. Only supported for Gradle 6.1 and later.</li> <li><code>--measure-local-build-cache</code>: Measure the size of the local build cache.</li> <li><code>-D&lt;key&gt;=&lt;value&gt;</code>: Defines a system property when running the build, overriding the default for the build.</li> <li><code>--studio-install-dir</code>: The Android Studio installation directory. Required when measuring Android Studio sync.</li> <li><code>--studio-sandbox-dir</code>: The Android Studio sandbox directory. It's recommended to use it since it isolates the Android Studio process from your other Android Studio processes. By default, this will be set to <code>&lt;output-dir&gt;/studio-sandbox</code>. If you want Android Studio to keep old data (e.g. indexes) you should set and reuse your own folder. </li> <li><code>--no-studio-sandbox</code>: Do not use the Android Studio sandbox but use the default Android Studio folders for the Android Studio data.</li> <li><code>--no-diffs</code>: Do not generate differential flame graphs.</li> </ul>"},{"location":"gradle-profiler/#advanced-profiling-scenarios","title":"Advanced profiling scenarios","text":"<p>A scenario file can be provided to define more complex scenarios to benchmark or profile. Use the <code>--scenario-file</code> option to provide this. The scenario file is defined in Typesafe config format.</p> <p>The scenario file defines one or more scenarios. You can select which scenarios to run by specifying its name on the command-line when running <code>gradle-profiler</code>, e.g.</p> <pre><code>&gt; gradle-profiler --benchmark --scenario-file performance.scenarios clean_build\n</code></pre> <p>Here is an example:</p> <pre><code># Can specify scenarios to use when none are specified on the command line\ndefault-scenarios = [\"assemble\"]\n\n# Scenarios are run in alphabetical order\nassemble {\n    # Show a slightly more human-readable title in reports\n    title = \"Assemble\"\n    # Run the 'assemble' task\n    tasks = [\"assemble\"]\n}\nclean_build {\n    title = \"Clean Build\"\n    versions = [\"3.1\", \"/Users/me/gradle\"]\n    tasks = [\"build\"]\n    gradle-args = [\"--parallel\"]\n    system-properties {\n        \"key\" = \"value\"\n    }\n    cleanup-tasks = [\"clean\"]\n    run-using = tooling-api // value can be \"cli\" or \"tooling-api\"\n    daemon = warm // value can be \"warm\", \"cold\", or \"none\"\n    measured-build-ops = [\"org.gradle.api.internal.tasks.SnapshotTaskInputsBuildOperationType\"] // see --measure-build-op\n\n    buck {\n        targets = [\"//thing/res_debug\"]\n        type = \"android_binary\" // can be a Buck build rule type or \"all\"\n    }\n\n    warm-ups = 10\n}\nideaModel {\n    title = \"IDEA model\"\n    # Fetch the IDEA tooling model\n    tooling-api {\n        model = \"org.gradle.tooling.model.idea.IdeaProject\"\n    }\n    # Can also run tasks\n    # tasks = [\"assemble\"]\n}\ntoolingAction {\n    title = \"IDEA model\"\n    # Fetch the IDEA tooling model\n    tooling-api {\n        action = \"org.gradle.profiler.toolingapi.FetchProjectPublications\"\n    }\n    # Can also run tasks\n    # tasks = [\"assemble\"]\n}\nandroidStudioSync {\n    title = \"Android Studio Sync\"\n    # Measure an Android studio sync\n    # Note: Android Studio Hedgehog (2023.1.1) or newer is required\n    # Note2: you need to have local.properties file in your project with sdk.dir set\n    android-studio-sync {\n        # Override default Android Studio jvm args\n        # studio-jvm-args = [\"-Xms256m\", \"-Xmx4096m\"]\n        # Pass an IDEA properties to Android Studio. This can be used to set a registry values as well\n        # idea-properties = [\"gradle.tooling.models.parallel.fetch=true\"]\n    }\n}\n</code></pre> <p>Values are optional and default to the values provided on the command-line or defined in the build.</p>"},{"location":"gradle-profiler/#benchmark-options","title":"Benchmark options","text":"<ul> <li><code>iterations</code>: Number of builds to actually measure</li> <li><code>warm-ups</code>: Number of warmups to perform before measurement</li> <li><code>jvm-args</code>: Sets or overrides the jvm arguments set by <code>org.gradle.jvmargs</code> in gradle.properties.</li> </ul>"},{"location":"gradle-profiler/#profiling-change-handling","title":"Profiling change handling","text":"<p>How a build tool handles changes to the source code can have a significant impact on the performance of the build. Gradle Profiler can simulate different kinds of changes to the source code to measure the impact of these changes on the build performance. These changes are applied by mutators at different points in the build benchmark process. Some mutators execute at a specific point, others can be configured to execute at a specific point, specified by the <code>schedule</code> parameter:</p> <ul> <li><code>SCENARIO</code>: before the scenario is executed,</li> <li><code>CLEANUP</code>: before cleaning preceeding each build invocation,</li> <li><code>BUILD</code>: before the build invocation (after cleanup).</li> </ul>"},{"location":"gradle-profiler/#source-code-mutators","title":"Source code mutators","text":"<p>These mutations are applied before each build, and they introduce different kinds of change to the source code.</p> <ul> <li><code>apply-abi-change-to</code>: Add a public method to a Java or Kotlin source class. Each iteration adds a new method and removes the method added by the previous iteration.</li> <li><code>apply-android-layout-change-to</code>: Add a hidden view with id to an Android layout file. Supports traditional layouts as well as Databinding layouts with a ViewGroup as the root element.</li> <li><code>apply-android-manifest-change-to</code>: Add a permission to an Android manifest file.</li> <li><code>apply-android-resource-change-to</code>: Add a string resource to an Android resource file. Each iteration adds a new resource and removes the resource added by the previous iteration.</li> <li><code>apply-android-resource-value-change-to</code>: Change a string resource in an Android resource file.</li> <li><code>apply-build-script-change-to</code>: Add a statement to a Groovy or Kotlin DSL build script, init script or settings script. Each iteration adds a new statement and removes the statement added by the previous iteration.</li> <li><code>apply-cpp-change-to</code>: Add a function to a C/C++ source file. Each iteration adds a new function and removes the function added by the previous iteration. </li> <li><code>apply-h-change-to</code>: Add a function to a C/C++ header file. Each iteration adds a new function declaration and removes the function added by the previous iteration. </li> <li><code>apply-kotlin-composable-change-to</code>: Add a <code>@Composable</code> function to a Kotlin source file.</li> <li><code>apply-non-abi-change-to</code>: Change the body of a public method in a Java or Kotlin source class.</li> <li><code>apply-project-dependency-change-to</code>: Add project dependencies to a Groovy or a Kotlin DSL build script. Each iteration adds a new combination of projects as dependencies and removes the projects added by the previous iteration.</li> <li><code>apply-property-resource-change-to</code>: Add an entry to a properties file. Each iteration adds a new entry and removes the entry added by the previous iteration.</li> </ul>"},{"location":"gradle-profiler/#cache-cleanup","title":"Cache cleanup","text":"<p>When simulating scenarios like ephemeral builds, it is important to make sure caches are not present. These mutators can be scheduled to execute at different points in the build benchmark process, specified by the <code>schedule</code> parameter.</p> <ul> <li><code>clear-android-studio-cache-before</code>: Invalidates the Android Studio caches. Due to Android Studio client specifics scheduling to run before cleanup (<code>CLEANUP</code>) is not supported. Note: cleaning the Android Studio caches is run only when Android Studio sync (<code>android-studio-sync</code>) is used.</li> <li><code>clear-build-cache-before</code>: Deletes the contents of the build cache at the given schedule.</li> <li><code>clear-configuration-cache-state-before</code>: Deletes the contents of the <code>.gradle/configuration-cache-state</code> directory.</li> <li><code>clear-gradle-user-home-before</code>: Deletes the contents of the Gradle user home directory.   The mutator retains the <code>wrapper</code> cache in the Gradle user home, since the downloaded wrapper in that location is used to run Gradle.   Requires to use the <code>none</code> daemon option to use with <code>CLEANUP</code> or <code>BUILD</code> schedules.</li> <li><code>clear-jars-cache-before</code>: Deletes the contents of the instrumented jars cache.</li> <li><code>clear-project-cache-before</code>: Deletes the contents of the <code>.gradle</code> and <code>buildSrc/.gradle</code> project cache directories.</li> <li><code>clear-transform-cache-before</code>: Deletes the contents of the transform cache.</li> <li><code>show-build-cache-size</code>: Shows the number of files and their size in the build cache before scenario execution, and after each cleanup and build round.</li> </ul>"},{"location":"gradle-profiler/#file-operations","title":"File operations","text":"<ul> <li><code>copy-file</code>: Copies a file or a directory from one location to another. Has to specify a <code>source</code> and a <code>target</code> path; relative paths are resolved against the project directory. Can take an array of operations. Defaults to <code>SCNEARIO</code> schedule.</li> <li><code>delete-file</code>: Deletes a file or a directory. Has to specify a <code>target</code> path; when relative it is resolved against the project directory. Can take an array of operations. Defaults to <code>SCNEARIO</code> schedule.</li> <li><code>git-checkout</code>: Checks out a specific commit for the build step, and a different one for the cleanup step.</li> <li><code>git-revert</code>: Reverts a given set of commits before the build and resets it afterward. </li> </ul> <p>They can be added to a scenario file like this:</p> <pre><code>incremental_build {\n    tasks = [\"assemble\"]\n\n    apply-build-script-change-to = \"build.gradle.kts\"\n    apply-project-dependency-change-to {\n        files = [\"build.gradle\"]\n        # Default number of dependency-count is 3.\n        # Gradle Profiler will simulate changes to project dependencies by generate some additional projects and then add a combination of project dependencies to every non-generated subprojects before each iteration.\n        # The profiler will generate the minimal number of subprojects to allow for a unique combination of dependencies to be used for each iteration.\n        # Note: Number of generated projects is calculated as binomial coffiecient: \"from `x` choose `dependency-count` = `iterations * files`\", where number of generated projects is `x`.\n        dependency-count = 3\n    }\n    apply-abi-change-to = \"src/main/java/MyThing.java\"\n    apply-non-abi-change-to = [\"src/main/java/MyThing.java\", \"src/main/java/MyOtherThing.java\"]\n    apply-h-change-to = \"src/main/headers/app.h\"\n    apply-cpp-change-to = \"src/main/cpp/app.cpp\"\n    apply-property-resource-change-to = \"src/main/resources/thing.properties\"\n    apply-android-resource-change-to = \"src/main/res/values/strings.xml\"\n    apply-android-resource-value-change-to = \"src/main/res/values/strings.xml\"\n    apply-android-manifest-change-to = \"src/main/AndroidManifest.xml\"\n    clear-build-cache-before = SCENARIO\n    clear-transform-cache-before = BUILD\n    show-build-cache-size = true\n    copy-file = {\n        source = \"../develocity.xml\"\n        target = \".mvn/develocity.xml\"\n    }\n    delete-file = [{\n        target = \".mvn/develocity.xml\"\n        schedule = CLEANUP\n    }, {\n        target = \".gradle\"\n        schedule = CLEANUP\n    }]\n    git-checkout = {\n        cleanup = \"efb43a1\"\n        build = \"master\"\n    }\n    git-revert = [\"efb43a1\"]\n    jvm-args = [\"-Xmx2500m\", \"-XX:MaxMetaspaceSize=512m\"]\n}\n</code></pre>"},{"location":"gradle-profiler/#comparing-against-other-build-tools","title":"Comparing against other build tools","text":"<p>You can compare Gradle against Bazel, Buck, and Maven by specifying their equivalent invocations in the scenario file. Only benchmarking mode is supported.</p>"},{"location":"gradle-profiler/#maven","title":"Maven","text":"<pre><code>&gt; gradle-profiler --benchmark --maven clean_build\n\nclean_build {\n    tasks = [\"build\"]\n    cleanup-tasks = [\"clean\"]\n    maven {\n        # If empty, it will be infered from MAVEN_HOME environment variable\n        home = \"/path/to/maven/home\"\n        targets = [\"clean\", \"build\"]\n    }\n}\n</code></pre>"},{"location":"gradle-profiler/#bazel","title":"Bazel","text":"<pre><code>&gt; gradle-profiler --benchmark --bazel build_some_target\n\nbuild_some_target {\n    tasks = [\"assemble\"]\n\n    bazel {\n        # If empty, it will be infered from BAZEL_HOME environment variable\n        home = \"/path/to/bazel/home\"\n        targets = [\"build\" \"//some/target\"]\n    }\n}\n</code></pre>"},{"location":"gradle-profiler/#buck","title":"Buck","text":"<pre><code>&gt; gradle-profiler --benchmark --buck build_binaries\n\nbuild_binaries {\n    tasks = [\"assemble\"]\n\n    buck {\n        # If empty, it will be infered from BUCK_HOME environment variable\n        home = \"/path/to/buck/home\"\n        type = \"android_binary\" // can be a Buck build rule type or \"all\"\n    }\n}\nbuild_resources {\n    tasks = [\"thing:processDebugResources\"]\n\n    buck {\n        targets = [\"//thing/res_debug\"]\n    }\n}\n</code></pre>"},{"location":"declarative-gradle/","title":"Declarative Gradle","text":""},{"location":"declarative-gradle/#declarative-gradle","title":"Declarative Gradle","text":"<p>At Gradle, part of our vision is to provide an elegant and extensible declarative build language that enables expressing any build in a clear and understandable way. We are working on Declarative Gradle to realize that part of the vision. This is an experimental project, stay tuned for updates!</p> <p>Learn more in the Declarative Gradle Announcement blog post and other publications.</p>"},{"location":"declarative-gradle/#status","title":"Status","text":"<p>Declarative Gradle is an experimental project, now in Early Access Preview (EAP). We invite you to try out Declarative Gradle, and to share feedback. The project includes the following experimental parts:</p> <ul> <li>Changes in Gradle to support DCL files</li> <li>Changes in Android Studio to support DCL files</li> <li>Prototype plugins demonstrating software types and higher-level models</li> <li>A Gradle test client demonstrating features not yet implemented in the IDE</li> </ul> <p>Currently, no compatibility is guaranteed, and there is no commitment to the DSL syntax and available features. Learn how you can contribute in the Participate section.</p> <p>    Share Your Feedback </p>"},{"location":"declarative-gradle/#key-principles","title":"Key Principles","text":"<ul> <li>Ease of use for regular software developers.   Software developers should be able to define any software and build their projects   without the need to understand the details of how the build system works.</li> <li>Complete flexibility for build engineers and advanced users.   Experienced Gradle users should maintain the current level of flexibility and be able   to automate a wide range of software build automation scenarios with custom build logic.</li> <li>Excellent IDE integration.   Importing the software project to the IDE and interacting with it should be fast and fully reliable.   IDEs and other tools should be able to change the definition automatically or through UI reliably.</li> </ul> <p>We implement those principles through a declarative DSL which is a tailored tiny subset of the Kotlin language. The Declarative Gradle Announcement outlines more details about the project and the new Declarative DSL we are building.</p>"},{"location":"declarative-gradle/#a-glimpse","title":"A Glimpse","text":"<p>Here is a very brief example of what the Declarative Gradle syntax looks like for a Java application.</p> <pre><code>javaApplication {\n    javaVersion = 21\n    mainClass = \"com.example.App\"\n\n    dependencies {\n        implementation(project(\":java-util\"))\n        implementation(\"com.google.guava:guava:32.1.3-jre\")\n    }\n}\n</code></pre> <p>Looks familiar, right?</p> <p>As noted above, this syntax is experimental and might change during the experiment.</p>"},{"location":"declarative-gradle/#learn-more","title":"Learn More","text":"<p>The Declarative Gradle experiment is still in an early stage but is ready for your feedback!</p> <ul> <li>Getting Started - Learn how to try Declarative Gradle yourself.</li> <li>Documentation - Learn about the fundamentals behind Declarative Gradle.</li> <li>Participate - Learn how you can help shape the future of Declarative Gradle.</li> <li>Resources - Learn more from conferences, interviews, articles, etc.</li> </ul>"},{"location":"declarative-gradle/#share-feedback","title":"Share Feedback","text":"<p>We invite you to try out Declarative Gradle, and to share your feedback.</p>"},{"location":"declarative-gradle/docs/","title":"Documentation","text":""},{"location":"declarative-gradle/docs/#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>Reference</li> </ul>"},{"location":"declarative-gradle/docs/getting-started/","title":"Getting Started with Declarative Gradle","text":""},{"location":"declarative-gradle/docs/getting-started/#getting-started-with-declarative-gradle","title":"Getting Started with Declarative Gradle","text":"<p>In our first announcement, we introduced our ideas for an experimental project we called Declarative Gradle. </p> <p>Since then, we've been working hard on several fronts to create the first early access preview (EAP) for Declarative Gradle. In July 2024, we announced the Early Access Preview (EAP) of Declarative Gradle. As part of this preview, we published several project samples that are ready for feedback. These include Java, Kotlin, and Android application samples and a port of the popular Now in Android application.</p> <p>Info</p> <p>With the first EAP, we would like you to try out what we have built so far.</p> <p>Declarative Gradle is ready for trying out our provided sample projects for Java, Kotlin and Android applications.</p> <p>Declarative Gradle is not ready for adoption by plugin authors, build engineers or software engineers.</p> <ol> <li>Follow our setup instructions</li> <li>Pick one or more of our samples</li> <li>Try out the Declarative Gradle features</li> <li>Provide us feedback</li> </ol>"},{"location":"declarative-gradle/docs/publications/","title":"Declarative Gradle. Publications","text":""},{"location":"declarative-gradle/docs/publications/#declarative-gradle-publications","title":"Declarative Gradle. Publications","text":""},{"location":"declarative-gradle/docs/publications/#articles","title":"Articles","text":"<ul> <li>Early Access Preview (EAP) Announcement by Sterling Greene - July 2024</li> <li>Project Announcement by Piotr Jagielski - November 2023 - Initial project announcement and the manifesto</li> <li>Declarative Gradle? Amper? What\u2019s going on?! by Siggi Gunnarsson, May 2024, fun code() magazine</li> </ul>"},{"location":"declarative-gradle/docs/publications/#news","title":"News","text":"<p>We publish monthly updates on Declarative Gradle as a part of the Gradle Build Tool Newslettter. Make sure to subscribe!</p>"},{"location":"declarative-gradle/docs/publications/#conference-presentations","title":"Conference Presentations","text":"<ul> <li>KotlinConf 2024 - Developer-first Gradle builds by Sterling Greene and Paul Merlin</li> </ul>"},{"location":"declarative-gradle/docs/publications/#video-interviews","title":"Video Interviews","text":"<ul> <li>Declarative Gradle and Gradle History Gradle with Adam Murdoch, CTO at - May 02, 2024</li> <li>Declarative Gradle - Build Propulsion Lab with Paul Merlin - April 2024, Devoxx France</li> </ul>"},{"location":"declarative-gradle/docs/reference/","title":"Declarative Gradle - Documentation","text":""},{"location":"declarative-gradle/docs/reference/#declarative-gradle-documentation","title":"Declarative Gradle - Documentation","text":"<ul> <li><code>gradle init</code> - generate new builds using software types and DCL files</li> <li>Software Features - configuration model used by software developers</li> </ul>"},{"location":"declarative-gradle/early-prototypes/","title":"Declarative Gradle - Early prototypes","text":""},{"location":"declarative-gradle/early-prototypes/#declarative-gradle-early-prototypes","title":"Declarative Gradle - Early prototypes","text":"<p>Here is a list of the early prototypes we created for Declarative Gradle. see the Unified Prototypes directory for more recent developments.</p> <ul> <li>Android</li> <li>Java projects</li> <li>Kotlin Multiplatform projects</li> <li>Settings</li> </ul>"},{"location":"declarative-gradle/early-prototypes/#disclaimer","title":"Disclaimer","text":"<p>All prototypes in this directory are experimental, mostly for syntax evaluation and initial feedback. They may compile or not. No compatibility or other commitment is implied.</p>"},{"location":"declarative-gradle/early-prototypes/android/","title":"Declarative Android-based projects","text":""},{"location":"declarative-gradle/early-prototypes/android/#declarative-android-based-projects","title":"Declarative Android-based projects","text":"<p>This explores ideas with a simpler DSL to configure applications and libraries written for Android.</p> <p>All configuration is moved under a new <code>androidApplication</code> block.</p>"},{"location":"declarative-gradle/early-prototypes/android/#example","title":"Example","text":"<p>Gradle needs to run with Java 17.</p> <p>Open the project in <code>android</code>.  The <code>testbed</code> subproject uses the new DSL.</p> <p>The new DSL demonstrates several ideas: - <code>dependencies {}</code> in the <code>androidApplication</code> block that are limited to only the scopes applicable to the application.  - <code>targets {}</code> for configuring specific Android variants - top-level properties backed by Providers (like <code>namespace</code>) - <code>sources {}</code> for configuring the location of source files</p>"},{"location":"declarative-gradle/early-prototypes/kotlin-multiplatform/","title":"Declarative Kotlin Multiplatform projects","text":""},{"location":"declarative-gradle/early-prototypes/kotlin-multiplatform/#declarative-kotlin-multiplatform-projects","title":"Declarative Kotlin Multiplatform projects","text":"<p>This explores how to use a simpler, more static DSL to configure applications and libraries written for KMP.</p> <p>All configuration is moved under a new <code>kmpApplication</code> block. This example only demonstrates an application, but the same ideas apply to libraries.</p>"},{"location":"declarative-gradle/early-prototypes/kotlin-multiplatform/#example","title":"Example","text":"<p>The <code>testbed</code> subproject uses the new DSL.</p> <p>The new DSL demonstrates several ideas: - <code>platforms</code> is a list property in the <code>kmpApplication</code> block that specifies the multiplatform targets built by this project. - Common top-level properties that apply to all targets (like the <code>languageVersion</code> of Kotlin used, and the whether or not to <code>publishSources</code> for the project) are backed by <code>Property</code> instances and available directly in the <code>kmpApplication</code> block. There is code in the <code>Greeter.kt</code> file in <code>commonMain</code> that requires Kotlin 1.9 to compile. - <code>dependencies {}</code> in the <code>kmpApplication</code> block allows for declaring common dependencies usable by all targets, in the same way the <code>commonMain</code> KMP sourceSet would.  - <code>targets {}</code> allows for configuring specific KMP platform variants. Static extension methods are provided for each platform (only <code>jvm</code> and <code>js</code> implemented so far) to allow for configuring platform-specific dependencies with IDE type assistance. - Publishing the project is configured to use a local Maven repo under <code>build/repo</code> using the <code>publishing</code> block provided by the <code>maven-publish</code> plugin, to demonstrate the results of publishing the project with and without sources.</p>"},{"location":"declarative-gradle/early-prototypes/kotlin-multiplatform/#goals","title":"Goals","text":"<ul> <li>This DSL should look and feel like a Gradle DSL, be similar to Java and Android builds, and be navigable by Gradle developers new to KMP.</li> <li>The <code>targets</code> block should be a container holding each platform, not merely a static extension.</li> <li>Extraneous blocks should be simplified or removed and their contents pulled up a level.</li> </ul>"},{"location":"declarative-gradle/early-prototypes/kotlin-multiplatform/#running-the-project","title":"Running the project","text":"<p>All tasks below should be executed from the <code>testbed</code> directory. Running the project requires running Gradle with Java 17.</p> <p>To run (on the JVM): </p><pre><code>  ./gradlew jvmRun -DmainClass=GreeterKt --quiet\n</code></pre> <p>To publish the project to <code>build/repo</code> (Can confirm presence of sources jars in the directory): </p><pre><code>  ./gradlew publishAllPublicationsToTestRepository\n</code></pre> <p>To run all tests (JVM and Browser-based JS tests): </p><pre><code>  ./gradlew allTests\n</code></pre>"},{"location":"declarative-gradle/early-prototypes/single-target/","title":"Declarative Java-based projects","text":""},{"location":"declarative-gradle/early-prototypes/single-target/#declarative-java-based-projects","title":"Declarative Java-based projects","text":"<p>This explores ideas with a simpler DSL to configure applications and libraries written with Java.</p> <p>Instead of using the top-level dependencies block or extensions, all configuration is moved under a new <code>javaApplication</code> and <code>javaLibrary</code> block.</p>"},{"location":"declarative-gradle/early-prototypes/single-target/#example","title":"Example","text":"<p>The example is generated with <code>gradle init</code>. It requires running Gradle with Java 17.</p> <p><code>./gradlew build</code> should compile and test the project.</p>"},{"location":"declarative-gradle/early-prototypes/single-target/#app","title":"App","text":"<p>Declares a few dependencies and the main class for a Java application.</p>"},{"location":"declarative-gradle/early-prototypes/single-target/#libraries-utilities-list","title":"Libraries utilities list","text":"<p>Declares a few dependencies for a Java library.</p>"},{"location":"declarative-gradle/early-prototypes/single-target/#conventions","title":"Conventions","text":"<p><code>javalibrary/build-logic/src/main/kotlin</code> Sets up some common conventions for a Java application and library.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/","title":"Declarative project structure","text":""},{"location":"declarative-gradle/early-prototypes/workspace-settings/#declarative-project-structure","title":"Declarative project structure","text":"<p>This implements the ideas described in the spec</p> <p>The spike implements new behavior and DSL as a settings plugin applied to some sample projects. </p> <p>Ideas that show promise will be copied into future prototypes or Gradle itself. </p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#new-ideas","title":"New ideas","text":""},{"location":"declarative-gradle/early-prototypes/workspace-settings/#auto-detection","title":"Auto-detection","text":"<p>In simple project layouts, Gradle should be able to auto-detect all projects that need to be included.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#physical-location-first","title":"Physical-location first","text":"<p>The existing APIs require users to specify a logical path that is interpretted as a physical path by convention.</p> <p>This DSL explores ideas to use the physical layout to include subprojects instead.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#test-cases","title":"Test cases","text":"<p>These are common layouts we found in real projects.</p> <p>All of the test cases should be able to run on a recent version of Gradle. You can inspect the list of included projects by looking at <code>gradle projects</code>.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#explicit-only","title":"explicit-only","text":"<p>In this example, all subprojects are explicitly included with a flat logical path and physical path.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#logical-layout","title":"logical-layout","text":"<p>In this example, the logical path (<code>:myorg:app</code>) for the subproject is very different from its physical path.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#platforms-subprojects","title":"platforms-subprojects","text":"<p>This example is close to Gradle's layout. Subprojects are automatically included from other directories than the root.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#single-project","title":"single-project","text":"<p>This example only shows that the equivalent of <code>rootProject.name</code> is set outside the layout.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#spring-boot-like","title":"spring-boot-like","text":"<p>This example follows a similar layout to Spring boot. There's a mix of subprojects that are found in subdirectories and under other projects.</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#subprojects-dir","title":"subprojects-dir","text":"<p>This example shows all subprojects being auto-discovered under a subdirectory (<code>subprojects/</code>).</p>"},{"location":"declarative-gradle/early-prototypes/workspace-settings/#top-level-projects","title":"top-level-projects","text":"<p>This example can auto-detect all subprojects with build files without any explicit configuration.</p>"},{"location":"declarative-gradle/unified-prototype/","title":"Declarative Gradle - Unified Plugin Prototypes","text":""},{"location":"declarative-gradle/unified-prototype/#declarative-gradle-unified-plugin-prototypes","title":"Declarative Gradle - Unified Plugin Prototypes","text":"<p>This directory of the <code>declarative-gradle</code> repository contains prototypes of plugins for JVM, Android, KMP and Swift projects built using \"unified\" plugins that all utilize a similar model and are implemented using the Declarative DSL.</p> <p>Currently, these different ecosystems still apply distinct plugins, but those plugins all share a common <code>plugin-common</code> dependency, which will gradually grow to contain more functionality.</p>"},{"location":"declarative-gradle/unified-prototype/#java","title":"Java","text":"<p>Sample Java projects live in the <code>testbed-java-library</code> and <code>testbed-java-application</code> directories.</p> <p>These samples show the definition of a simple Java application and library that target a single version of Java.</p> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew testbed-java-application:runAll\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/#jvm","title":"JVM","text":"<p>Sample JVM projects live in the <code>testbed-jvm-library</code> and <code>testbed-jvm-application</code> directories.</p> <p>These samples show the definition of a simple Java application and library that are implemented using a mix of Java 11 and Java 17 source code.</p> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew testbed-jvm-application:runAll\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/#kotlin-jvm","title":"Kotlin JVM","text":"<p>Sample Kotlin JVM projects live in the <code>testbed-kotlin-jvm-library</code> and <code>testbed-kotlin-jvm-application</code> directories.</p> <p>These samples show the definition of a simple Kotlin JVM application and library that target a single version of Kotlin and Java.</p> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew testbed-kotlin-jvm-application:runAll\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/#kotlin-multiplatform","title":"Kotlin Multiplatform","text":"<p>The sample Kotlin Multiplatform projects live in the <code>testbed-kotlin-library</code> and <code>testbed-kotlin-application</code> directories.</p> <p>The <code>unified-prototype/plugin-kmp</code> plugin demonstrates creating extensions using the Declarative DSL, and loading the data from those extensions into the KMP project used by KGP.</p> <p>The sample project demonstrates setting properties, using a common dependencies block, and adding dependencies to specific targets.</p>"},{"location":"declarative-gradle/unified-prototype/#limitations","title":"Limitations","text":"<p>The KMP example is currently limited, and does not support any targets other than <code>nodeJs</code>, <code>jvm</code> and <code>macOsArm64</code>.</p>"},{"location":"declarative-gradle/unified-prototype/#running","title":"Running","text":"<p>To run the application, use:</p> <pre><code>../gradlew testbed-kotlin-application:runAll\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/#building","title":"Building","text":"<p>From the <code>testbed-kotlin-application</code> directory, run <code>build</code> using the Gradle wrapper in the parent directory:</p> <pre><code>cd testbed-kotlin-application\n../gradlew build\n</code></pre> <p>to build the JS, JVM and KMP metadata jars for the example KMP project build in the <code>testbed-kotlin-application/build/libs</code> directory.</p> <p>You can also build the JS and JVM libs separately:</p> <pre><code>cd testbed-kotlin-application\n../gradlew jsJar\n</code></pre> <pre><code>cd testbed-kotlin-application\n../gradlew jvmJar\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/#android","title":"Android","text":"<p>Sample Android projects live in the <code>testbed-android-library</code> and <code>testbed-android-application</code> directories. The <code>unified-prototype/plugin-android</code> plugin demonstrates creating extensions using the Declarative DSL, and loading the data from those extensions into the Android project used by AGP.</p> <p>The sample project demonstrates setting properties, using a common dependencies block, and adding dependencies to specific Android targets.</p>"},{"location":"declarative-gradle/unified-prototype/#implementation-notes","title":"Implementation Notes","text":"<p>Guava is declared as an implementation dependency. The OKHttp dep is used by the release build type's implementation, and is not necessary for the debug variant.</p> <p>Both plugin implementations work by using <code>project.afterEvaluate</code> to load data from the Declarative DSL extensions into AGP's model.</p>"},{"location":"declarative-gradle/unified-prototype/#limitations_1","title":"Limitations","text":"<p>The Android example is currently limited, and does not support many use cases such as adding tests or running the <code>publish</code> task. It requires JDK &gt;= 17 to build.</p>"},{"location":"declarative-gradle/unified-prototype/#running_1","title":"Running","text":"<p>From the <code>testbed-android-library</code> or <code>testbed-android-application</code> directory, run <code>build</code> using the Gradle wrapper in the parent directory:</p> <pre><code>cd testbed-android-application\n../gradlew build\n</code></pre> <p>to build debug and release <code>aar</code>s for the example Android project build in the <code>testbed-android/build/outputs/aar</code> directory.</p> <p>You can also build the <code>Debug</code> and <code>Release</code> variants separately:</p> <pre><code>gradlew :testbed-android-application:assembleDebug\n</code></pre> <pre><code>gradlew :testbed-android-application:assembleRelease\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/#swift","title":"Swift","text":"<p>The sample Swift projects live in the <code>testbed-swift-library</code> and <code>testbed-swift-application</code> directories.</p> <p>To run the application, use:</p> <pre><code>../gradlew testbed-swift-application:runAll\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/#c","title":"C++","text":"<p>The sample C++ projects live in the <code>testbed-cpp-library</code> and <code>testbed-cpp-application</code> directories.</p> <p>To run the application, use:</p> <pre><code>../gradlew testbed-cpp-application:runAll\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/android-util/","title":"Unified Prototype: android-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/gradle/","title":"Unified Prototype: gradle","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/java-util/","title":"Unified Prototype: java-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/kotlin-js-store/","title":"Unified Prototype: kotlin-js-store","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/kotlin-jvm-util/","title":"Unified Prototype: kotlin-jvm-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/kotlin-util/","title":"Unified Prototype: kotlin-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/swift-util/","title":"Unified Prototype: swift-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-android-application/","title":"Unified Prototype: testbed-android-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-android-library/","title":"Unified Prototype: testbed-android-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-java-application/","title":"Unified Prototype: testbed-java-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-java-library/","title":"Unified Prototype: testbed-java-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-jvm-application/","title":"Unified Prototype: testbed-jvm-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-jvm-library/","title":"Unified Prototype: testbed-jvm-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-kotlin-application/","title":"Unified Prototype: testbed-kotlin-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-kotlin-jvm-application/","title":"Unified Prototype: testbed-kotlin-jvm-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-kotlin-jvm-library/","title":"Unified Prototype: testbed-kotlin-jvm-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-kotlin-library/","title":"Unified Prototype: testbed-kotlin-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-swift-application/","title":"Unified Prototype: testbed-swift-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/testbed-swift-library/","title":"Unified Prototype: testbed-swift-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/","title":"Unified Prototype: unified-plugin","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application/","title":"declarative-samples-android-app","text":""},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application/#declarative-samples-android-app","title":"declarative-samples-android-app","text":"<p>A sample Android application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>androidApplication</code> Software Type defined in the <code>org.gradle.experimental.android-ecosystem</code> ecosystem plugin.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a multiproject Android application implemented using Kotlin 2.0.21 source code. The project is the result of reproducing the project produced by the <code>gradle init</code> command in Gradle 8.9 as an Android project.</p> <p>To build the project without running, use:</p> <pre><code>  ./gradlew build\n</code></pre> <p>To run the application, first install it on a connected Android device using:</p> <pre><code>  :app:installDebug\n</code></pre> <p>Then search for \"Sample Declarative Gradle Android App\" and launch app to see a hello world message.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application-agp-preview/","title":"declarative-samples-android-app","text":""},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application-agp-preview/#declarative-samples-android-app","title":"declarative-samples-android-app","text":"<p>A sample Android application written in the Declarative Gradle DSL, using the official Android Software Types Preview <code>androidApplication</code> and <code>androidLibrary</code> defined in the <code>com.android.ecosystem</code> ecosystem plugin.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application-agp-preview/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a multiproject Android application implemented using Kotlin source code.</p> <p>To build the project without running, use:</p> <pre><code>./gradlew build\n</code></pre> <p>To run the application, first install it on a connected Android device using:</p> <pre><code>./gradlew :app:installDebug\n</code></pre> <p>In IntelliJ IDEA or Android Studio you can use the <code>app</code> run configuration to launch the app in an emulator to see a hello world message.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-jvm/src/main/resources/templates/java-application/","title":"declarative-samples-java-app","text":""},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-jvm/src/main/resources/templates/java-application/#declarative-samples-java-app","title":"declarative-samples-java-app","text":"<p>A sample Java application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>javaApplication</code> Software Type defined in the <code>org.gradle.experimental.jvm-ecosystem</code> ecosystem plugin.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-jvm/src/main/resources/templates/java-application/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a multiproject Java application implemented using Java 17 source code. The project is the result of converting the project produced by the <code>gradle init</code> command in Gradle 8.9.</p> <p>To build and test the application without running, use:</p> <pre><code>&gt; ./gradlew build\n</code></pre> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew run\n</code></pre>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-kmp/src/main/resources/templates/kotlin-application/","title":"declarative-samples-kotlin-app","text":""},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-kmp/src/main/resources/templates/kotlin-application/#declarative-samples-kotlin-app","title":"declarative-samples-kotlin-app","text":"<p>A sample Kotlin application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>kotlinJvmApplication</code> Software Type defined in the <code>org.gradle.experimental.kmp-ecosystem</code> ecosystem plugin.</p>"},{"location":"declarative-gradle/unified-prototype/unified-plugin/plugin-kmp/src/main/resources/templates/kotlin-application/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a Kotlin JVM application implemented using Kotlin 2.0.21 source code. The project is the result of converting the project produced by the <code>gradle init</code> command in Gradle 8.9.</p> <p>To build and test the application without running, use:</p> <pre><code>&gt; ./gradlew build\n</code></pre> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew run\n</code></pre>"},{"location":"github-actions/","title":"GitHub Actions for Gradle builds","text":""},{"location":"github-actions/#github-actions-for-gradle-builds","title":"GitHub Actions for Gradle builds","text":"<p>This repository contains a set of GitHub Actions that are useful for building Gradle projects on GitHub.</p>"},{"location":"github-actions/#the-setup-gradle-action","title":"The <code>setup-gradle</code> action","text":"<p>The <code>setup-gradle</code> action can be used to configure Gradle for optimal execution on any platform supported by GitHub Actions.</p> <p>This replaces the previous <code>gradle/gradle-build-action</code>, which now delegates to this implementation.</p> <p>The recommended way to execute any Gradle build is with the help of the Gradle Wrapper, and the examples assume that the Gradle Wrapper has been configured for the project. See this example if your project doesn't use the Gradle Wrapper.</p>"},{"location":"github-actions/#example-usage","title":"Example usage","text":"<pre><code>name: Build\n\non:\n  push:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout sources\n      uses: actions/checkout@v4\n    - name: Setup Java\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: 17\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n    - name: Build with Gradle\n      run: ./gradlew build\n</code></pre> <p>See the full action documentation for more advanced usage scenarios.</p>"},{"location":"github-actions/#the-dependency-submission-action","title":"The <code>dependency-submission</code> action","text":"<p>Generates and submits a dependency graph for a Gradle project, allowing GitHub to alert about reported vulnerabilities in your project dependencies.</p> <p>The following workflow will generate a dependency graph for a Gradle project and submit it immediately to the repository via the Dependency Submission API. For most projects, this default configuration should be all that you need.</p> <p>Simply add this as a new workflow file to your repository (eg <code>.github/workflows/dependency-submission.yml</code>).</p> <pre><code>name: Dependency Submission\n\non:\n  push:\n    branches: [ 'main' ]\n\npermissions:\n  contents: write\n\njobs:\n  dependency-submission:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout sources\n      uses: actions/checkout@v4\n    - name: Setup Java\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: 17\n    - name: Generate and submit dependency graph\n      uses: gradle/actions/dependency-submission@v4\n</code></pre> <p>See the full action documentation for more advanced usage scenarios.</p>"},{"location":"github-actions/#the-wrapper-validation-action","title":"The <code>wrapper-validation</code> action","text":"<p>The <code>wrapper-validation</code> action validates the checksums of all Gradle Wrapper JAR files present in the repository and fails if any unknown Gradle Wrapper JAR files are found.</p> <p>The action should be run in the root of the repository, as it will recursively search for any files named <code>gradle-wrapper.jar</code>.</p> <p>Starting with v4 the <code>setup-gradle</code> action will perform wrapper validation on each execution. If you are using <code>setup-gradle</code> in your workflows, it is unlikely that you will need to use the <code>wrapper-validation</code> action.</p>"},{"location":"github-actions/#example-workflow","title":"Example workflow","text":"<pre><code>name: \"Validate Gradle Wrapper\"\n\non:\n  push:\n  pull_request:\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: gradle/actions/wrapper-validation@v4\n</code></pre> <p>See the full action documentation for more advanced usage scenarios.</p>"},{"location":"github-actions/CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"github-actions/CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"github-actions/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"github-actions/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"github-actions/CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"github-actions/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"github-actions/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at paul@nosphere.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"github-actions/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"github-actions/CONTRIBUTING/","title":"CONTRIBUTING","text":""},{"location":"github-actions/CONTRIBUTING/#building","title":"Building","text":"<p>The <code>build</code> script in the project root provides a convenient way to perform many local build tasks: 1. <code>./build</code> will lint and compile typescript sources 2. <code>./build all</code> will lint and compile typescript and run unit tests 3. <code>./build init-scripts</code> will run the init-script integration tests 4. <code>./build act &lt;act-commands&gt;</code> will run <code>act</code> after building local changes (see below)</p>"},{"location":"github-actions/CONTRIBUTING/#using-act-to-run-integ-test-workflows-locally","title":"Using <code>act</code> to run integ-test workflows locally","text":"<p>It's possible to run GitHub Actions workflows locally with https://nektosact.com/. Many of the test workflows from this repository can be run in this way, making it easier to test local changes without pushing to a branch.</p> <p>This feature is most useful to run a single <code>integ-test-*</code> workflow. Avoid running <code>ci-quick-test</code> or other aggregating workflows unless you want to use your local machine as a heater!</p> <p>Example running a single workflow: <code>./build act -W .github/workflows/integ-test-caching-config.yml</code></p> <p>Example running a single job: <code>./build act -W .github/workflows/integ-test-caching-config.yml -j cache-disabled-pre-existing-gradle-home</code></p> <p>Known issues: - <code>integ-test-detect-java-toolchains.yml</code> fails when running on a <code>linux/amd64</code> container, since the expected pre-installed JDKs are not present. Should be fixed by #89. - <code>act</code> is not yet compatible with <code>actions/upload-artifact@v4</code> (or related toolkit functions)     - See https://github.com/nektos/act/pull/2224 - Workflows run by <code>act</code> cannot submit to the dependency-submission API, as no <code>GITHUB_TOKEN</code> is available by default.</p> <p>Tips: - Add the following lines to <code>~/.actrc</code>:     - <code>--container-daemon-socket -</code> : Prevents \"error while creating mount source path\", and yes that's a solitary dash at the end     - <code>--matrix os:ubuntu-latest</code> : Avoids a lot of logging about unsupported runners being skipped - Runners don't have <code>java</code> installed by default, so all workflows that run Gradle require a <code>setup-java</code> step.</p>"},{"location":"github-actions/RELEASING/","title":"Gradle GitHub Actions release process","text":""},{"location":"github-actions/RELEASING/#gradle-github-actions-release-process","title":"Gradle GitHub Actions release process","text":""},{"location":"github-actions/RELEASING/#preparation","title":"Preparation","text":"<ul> <li>Push any outstanding changes to branch main.</li> <li>Check that https://github.com/gradle/actions/actions is green for all workflows for the main branch.<ul> <li>This should include any workflows triggered by <code>[bot] Update dist directory</code></li> </ul> </li> <li>Decide on the version number to use for the release. The action releases should follow semantic versioning.<ul> <li>By default, a patch release is assumed (eg. <code>4.0.0</code> \u2192 <code>4.0.1</code>)</li> <li>If new features have been added, bump the minor version (eg <code>4.1.1</code> \u2192 <code>4.2.0</code>)</li> <li>If a new major release is required, bump the major version (eg <code>4.1.1</code> \u2192 <code>5.0.0</code>)</li> <li>Note: The gradle actions follow the GitHub Actions convention of including a .0 patch number for the first release of a minor version, unlike the Gradle convention which omits the trailing .0.</li> </ul> </li> </ul>"},{"location":"github-actions/RELEASING/#release-gradleactions","title":"Release gradle/actions","text":"<ul> <li>Create a tag for the release. The tag should have the format <code>v4.1.0</code><ul> <li>From CLI: <code>git tag v4.1.0 &amp;&amp; git push --tags</code></li> </ul> </li> <li>Go to https://github.com/gradle/actions/releases and \"Draft new release\"<ul> <li>Use the newly created tag and copy the tag name exactly as the release title.</li> <li>Craft release notes content based on issues closed, PRs merged and commits</li> <li>Include a Full changelog link in the format https://github.com/gradle/actions/compare/v2.12.0...v3.0.0</li> </ul> </li> <li>Publish the release.</li> <li>Force push the <code>v4</code> tag (or current major version) to point to the new release. It is conventional for users to bind to a major release version using this tag.<ul> <li>From CLI: <code>git tag -f -a -m \"v4.0.0\" v4 v4.0.0 &amp;&amp; git push -f --tags</code></li> <li>Note that we set the commit message for the tag to the newly released version.</li> </ul> </li> </ul>"},{"location":"github-actions/RELEASING/#post-release-steps","title":"Post release steps","text":"<p>Submit PRs to update the GitHub starter workflow. Starter workflows contain content that should reference the Git hash of the current gradle/actions release: https://github.com/actions/starter-workflows has gradle and gradle-publish: see the v4.0.0 update PR for an example.</p> <p>Submit PRs to update the GitHub documentation. The documentation contains content that should reference the Git hash of the current gradle/actions release: https://github.com/github/docs has building-and-testing-java-with-gradle and publishing-java-packages-with-gradle : see the v4.0.0 update PR for an example.</p>"},{"location":"github-actions/dependency-submission/","title":"Index","text":""},{"location":"github-actions/dependency-submission/#the-dependency-submission-action","title":"The <code>dependency-submission</code> action","text":"<p>Generates and submits a dependency graph for a Gradle project, allowing GitHub to alert about reported vulnerabilities in your project dependencies.</p> <p>The following workflow will generate a dependency graph for a Gradle project and submit it immediately to the repository via the Dependency Submission API. For most projects, this default configuration should be all that you need.</p> <p>Simply add this as a new workflow file to your repository (eg <code>.github/workflows/dependency-submission.yml</code>).</p> <pre><code>name: Dependency Submission\n\non:\n  push:\n    branches: ['main']\n\npermissions:\n  contents: write\n\njobs:\n  dependency-submission:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout sources\n      uses: actions/checkout@v4\n    - name: Setup Java\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: 17\n    - name: Generate and submit dependency graph\n      uses: gradle/actions/dependency-submission@v4\n</code></pre> <p>See the full action documentation for more advanced usage scenarios.</p>"},{"location":"github-actions/docs/dependency-submission-faq/","title":"Dependency submission FAQ","text":""},{"location":"github-actions/docs/dependency-submission-faq/#dependency-submission-faq","title":"Dependency submission FAQ","text":"<p>Implementing a <code>dependency-submission</code> workflow for your repository is documented in the core documentation.  But getting it working is the easy part: the dependency alerts you recieve can be confusing and surprising. Here are some common questions answered.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#how-can-i-easily-try-this-out-without-experimenting-on-my-main-repository","title":"How can I easily try this out without experimenting on my main repository?","text":"<p>The https://github.com/gradle/github-dependency-submission-demo repository is setup as a tutorial for you to fork and play with.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#how-can-i-tell-if-the-dependency-submission-action-is-working","title":"How can I tell if the <code>dependency-submission</code> action is working?","text":"<p>Inspect the Dependency Graph for your project (Insights -&gt; Dependency Graph). You should see some dependencies annotated with \"Detected by GitHub Dependency Graph Gradle Plugin\"</p>"},{"location":"github-actions/docs/dependency-submission-faq/#why-is-maven-stated-for-all-dependencies-submitted-by-this-action-im-not-using-maven","title":"Why is <code>(Maven)</code> stated for all dependencies submitted by this action? I'm not using Maven.","text":"<p>This simply indicates that the dependency was resolved from a standard Gradle/Maven artifact repository. It does not imply which build tool is used.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#why-is-every-dependency-attributed-to-settingsgradlekts","title":"Why is every dependency attributed to <code>settings.gradle.kts</code>?","text":"<p>All dependendies detected by the <code>dependency-submission</code> action are attributed to the Gradle project as a whole. We found that the best way is to link to the project <code>Settings</code> file. We do not currently attempt to attribute dependencies to the actual file where they were declared.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#why-arent-dependencies-be-linked-to-the-source-file-where-they-are-declared","title":"Why aren't dependencies be linked to the source file where they are declared?","text":"<p>There are a couple of reasons for this: 1. Gradle doesn't currently provide a mechanism to determine the location where a dependency is declared. In fact, the resulting dependency version can be influenced by many different sources within a Gradle project. 2. The GitHub Dependency Graph was modelled heavily on NPM and doesn't really map well to having multiple source locations for a single dependency declaration. </p> <p>We have long-term plans to improve the first point, and we are working with GitHub to resolve the second. However, at this stage the behaviour your are experiencing is what is expected.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#my-repository-dependency-graph-contains-a-dependency-that-isnt-anywhere-in-my-build-why-is-the-dependency-submission-action-reporting-dependencies-im-not-using","title":"My repository dependency graph contains a dependency that isn't anywhere in my build. Why is the <code>dependency-submission</code> action reporting dependencies I'm not using?","text":"<p>If you see a particular dependency version reported in the dependency graph, it means your build is resolving that dependency at some point.  You may be surprised what transitive dependencies are brought in by declared dependencies and applied plugins in your build. See here for a HOW-TO on getting the bottom of why the dependency is being resolved.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#i-see-multiple-versions-of-the-same-dependency-in-the-dependency-graph-but-im-only-declaring-a-single-version-in-my-build-why-is-the-action-reporting-dependency-versions-im-not-using","title":"I see multiple versions of the same dependency in the dependency graph, but I'm only declaring a single version in my build. Why is the action reporting dependency versions I'm not using?","text":"<p>This is almost certainly because the dependency in question is actually being resolved with different versions in different dependency configurations.  For example, you may have one version brought in as a plugin dependency (resolved in the <code>classpath</code> configuration) and another used directly as a code dependency (resolved in the <code>compileClasspath</code> configuration). See here for a HOW-TO on getting the bottom of why the dependency is being resolved.  By far the easiest way is to publish a Build Scan\u00ae for the workflow run: this is easily achieved with some additional action configuration.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#im-not-seeing-any-security-vulnerabilities-for-any-of-my-dependencies-how-can-i-be-sure-this-is-working","title":"I'm not seeing any security vulnerabilities for any of my dependencies. How can I be sure this is working?","text":"<p>First check that Dependabot Alerts are enabled for your repository.  Without this, your dependency graph may be populated but you won't see which dependencies are potentially vulnerable.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#how-can-i-use-dependabot-security-updates-to-generate-a-pr-to-update-my-vulnerable-dependencies","title":"How can I use Dependabot Security Updates to generate a PR to update my vulnerable dependencies?","text":"<p>In most cases, the Dependabot Security Updates feature is not able to automatically generate a PR to update a dependency version.  This can be due to the vulnerable dependency being transitive, or because the Dependabot implementation doesn't understand how to update the dependency version. In a few select cases the Dependabot security update will work and successfully generate a pull-request. For example when a direct dependency version is listed in a TOML dependency catalog.</p>"},{"location":"github-actions/docs/dependency-submission-faq/#im-getting-many-false-positive-dependabot-alerts-for-dependencies-that-arent-used-by-my-project-why-are-these-dependencies-being-reported","title":"I'm getting many false positive Dependabot Alerts for dependencies that aren't used by my project. Why are these dependencies being reported?","text":"<p>The <code>dependency-submission</code> action resolves all of the dependencies in your build. This includes plugins, dependencies you've declared, test dependencies, and all transitive dependencies of these.  It doesn't matter how the dependencies are declared: the ones being resolved by Gradle are the ones being reported.</p> <p>Many people are surprised to see what dependencies are actually being resolved when they run their builds, but I'm yet to see a case where the dependencies being reported are actually incorrect. </p> <p>Please follow the instructions here to identify the source of the dependency version that is being reported.</p> <p>Once you have worked out why it is being resolved, you can either update the dependency version  or exclude it from the submitted dependency graph.</p>"},{"location":"github-actions/docs/dependency-submission/","title":"The dependency-submission action","text":""},{"location":"github-actions/docs/dependency-submission/#the-dependency-submission-action","title":"The <code>dependency-submission</code> action","text":"<p>The <code>gradle/actions/dependency-submission</code> action provides the simplest (and recommended) way to generate a  dependency graph for your project. This action will attempt to detect all dependencies used by your build without building and testing the project itself.</p> <p>The dependency graph snapshot is generated via integration with the GitHub Dependency Graph Gradle Plugin, and submitted to your repository via the  GitHub Dependency Submission API. The generated snapshot files can be submitted in the same job, or saved for submission in a subsequent job.</p> <p>The generated dependency graph includes all of the dependencies in your build, and is used by GitHub to generate  Dependabot Alerts  for vulnerable dependencies, as well as to populate the  Dependency Graph insights view.</p> <p>If you're confused by the behaviour you're seeing or have specific questions, please check out the FAQ before raising an issue.</p>"},{"location":"github-actions/docs/dependency-submission/#general-usage","title":"General usage","text":"<p>The following workflow will generate a dependency graph for a Gradle project and submit it immediately to the repository via the Dependency Submission API. For most projects, this default configuration should be all that you need.</p> <p>Simply add this as a new workflow file to your repository (eg <code>.github/workflows/dependency-submission.yml</code>).</p> <pre><code>name: Dependency Submission\n\non:\n  push:\n    branches: [ 'main' ]\n\npermissions:\n  contents: write\n\njobs:\n  dependency-submission:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Generate and submit dependency graph\n      uses: gradle/actions/dependency-submission@v4\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#gradle-execution","title":"Gradle execution","text":"<p>To generate a dependency graph, the <code>dependency-submission</code> action must perform a Gradle execution that resolves the dependencies of the project. All dependencies that are resolved in this execution will be included in the  generated dependency graph.  By default action executes a built-in task that is designed to resolve all build dependencies (<code>:ForceDependencyResolutionPlugin_resolveAllDependencies</code>).</p> <p>The action looks for a Gradle project in the root of the workspace, and executes this project with the Gradle wrapper, if configured for the project. If the wrapper is not configured, whatever <code>gradle</code> available on the command-line will be used.</p> <p>The action provides the ability to override the Gradle version and task to execute, as well as provide  additional arguments that will be passed to Gradle on the command-line. See Configuration Parameters below.</p>"},{"location":"github-actions/docs/dependency-submission/#publishing-a-develocity-build-scan-from-your-dependency-submission-workflow","title":"Publishing a Develocity Build Scan\u00ae from your dependency submission workflow","text":"<p>You can automatically publish a free Develocity Build Scan on every run of <code>gradle/actions/dependency-submission</code>.  Three input parameters are required, one to enable publishing and two more to accept the  Develocity terms of use.</p> <pre><code>    - name: Generate and submit dependency graph\n      uses: gradle/actions/dependency-submission@v4\n      with:\n        build-scan-publish: true\n        build-scan-terms-of-use-url: \"https://gradle.com/help/legal-terms-of-use\"\n        build-scan-terms-of-use-agree: \"yes\"\n</code></pre> <p>A Build Scan makes it easy to determine the source of any dependency vulnerabilities in your project.</p>"},{"location":"github-actions/docs/dependency-submission/#configuration-parameters","title":"Configuration parameters","text":"<p>In some cases, the default action configuration will not be sufficient, and additional action parameters will need to be specified.</p> <pre><code>    - name: Generate and save dependency graph\n      uses: gradle/actions/dependency-submission@v4\n      with:\n        # Use a particular Gradle version instead of the configured wrapper.\n        gradle-version: 8.6\n\n        # The gradle project is not in the root of the repository.\n        build-root-directory: my-gradle-project\n\n        # Choose a task that will trigger dependency resolution\n        dependency-resolution-task: myDependencyResolutionTask\n\n        # Additional arguments that should be passed to execute Gradle\n        additional-arguments: --no-configuration-cache\n\n        # Enable configuration-cache reuse for this build.\n        cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}\n\n        # Do not attempt to submit the dependency-graph. Save it as a workflow artifact.\n        dependency-graph: generate-and-upload\n\n        # Specify the location where dependency graph files will be generated.\n        dependency-graph-report-dir: custom-report-dir\n\n        # By default, failure to generate a dependency graph will cause the workflow to fail\n        dependency-graph-continue-on-failure: true\n</code></pre> <p>See the Action Metadata file for a more detailed description of each input parameter.</p> <p>The <code>GitHub Dependency Graph Gradle Plugin</code> can be further  configured via a number of environment variables.  These will be automatically set by the <code>dependency-submission</code> action, but you may override these values  by setting them explicitly in your workflow file.</p>"},{"location":"github-actions/docs/dependency-submission/#resolving-a-dependency-vulnerability","title":"Resolving a dependency vulnerability","text":""},{"location":"github-actions/docs/dependency-submission/#finding-the-source-of-a-dependency-vulnerability","title":"Finding the source of a dependency vulnerability","text":"<p>Once you have submitted a dependency graph, you may receive Dependabot Alerts warning about vulnerabilities in dependencies of your project. In the case of transitive dependencies, it may not be obvious how that dependency is used or what you can do to address the vulnerability alert.</p> <p>The first step to investigating a Dependabot Alert is to determine the source of the dependency. One of the best ways to  do so is with a free Develocity Build Scan\u00ae, which makes it easy to explore the dependencies resolved in your build.</p> <p></p> <p>In this example, we are searching for dependencies matching the name 'com.squareup.okio:okio' in the Build Dependencies of  the project. You can easily see that this dependency originates from 'com.github.ben-manes:gradle-versions-plugin'. Knowing the source of the dependency can help determine how to deal with the Dependabot Alert.</p> <p>Note that you may need to look at both the Dependencies and the Build Dependencies of your project to find the offending dependency.</p>"},{"location":"github-actions/docs/dependency-submission/#when-you-cannot-publish-a-build-scan","title":"When you cannot publish a Build Scan\u00ae","text":"<p>If publishing a free Build Scan to https://scans.gradle.com isn't an option, and you don't have access to a private Develocity server for your project, you can obtain information about the each resolved dependency by running the <code>dependency-submission</code> workflow with debug logging enabled.</p> <p>The simplest way to do so is to re-run the dependency-submission job with debug logging enabled:</p> <p></p> <p>When you do so, the Gradle build that generates the dependency-graph will include a log message for each dependency version included in the graph. Given the details in one log message, you can run (locally) the built-in dependencyInsight task to determine exactly how the dependency was resolved. </p> <p>For example, given the following message in the logs: </p><pre><code>Detected dependency 'com.google.guava:guava:32.1.3-jre': project = ':my-subproject', configuration = 'compileClasspath'\n</code></pre> <p>You would run the following command locally: </p><pre><code>./gradlew :my-subproject:dependencyInsight --configuration compileClasspath --dependency com.google.guava:guava:32.1.3-jre\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#dealing-with-classpath-configuration","title":"Dealing with 'classpath' configuration","text":"<p>If the configuration value in the log message is \"classpath\" then instead of running <code>dependency-insight</code> you'll need to run the Gradle <code>buildEnvironment</code> task.</p> <p>For example, given the following message in the logs: </p><pre><code>Detected dependency 'xerces:xercesImpl:2.12.2': project = ':my-subproject', configuration = 'classpath'\n</code></pre> <p>You would run the following command locally to expose the <code>xercesImpl</code> dependency: </p><pre><code>./gradlew :my-subproject:buildEnvironment | grep -C 5 xercesImpl\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#updating-the-dependency-version","title":"Updating the dependency version","text":"<p>Once you've discovered the source of the dependency, the most obvious fix is to update the dependency to a patched version that does not suffer the vulnerability. For direct dependencies, this is often straightforward.  But for transitive dependencies it can be tricky.</p>"},{"location":"github-actions/docs/dependency-submission/#dependency-source-is-specified-directly-in-the-build","title":"Dependency source is specified directly in the build","text":"<p>If the dependency is used to compile your code or run your tests, it's normal for the underlying \"source\" of the dependency to have a version configured directly in the build. For example, if you have a vulnerable version of <code>com.squareup.okio:okio</code> in your <code>compileClasspath</code>, then it's likely you have a dependency like <code>com.squareup.moshi:moshi</code> configured as an <code>api</code> or <code>implementation</code> dependency.</p> <p>In this case there are 2 possibilities: 1. There is a newer, compatible version of <code>com.squareup.moshi:moshi</code> available, and you can just bump the version number. 2. There isn't a newer, compatible version of <code>com.squareup.moshi:moshi</code></p> <p>In the second case, you can add a Dependency Constraint, to force the use of the newest version of <code>com.squareup.okio</code>:</p> <pre><code>dependencies {\n  implementation(\"com.squareup.moshi:moshi:1.12.0\")\n  constraints {\n    // Force a newer version of okio in transitive resolution\n    implementation(\"com.squareup.okio:okio:3.6.0\")\n  }\n}\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#dependency-source-is-a-plugin-classpath","title":"Dependency source is a plugin classpath","text":"<p>If the vulnerable dependency is introduced by a Gradle plugin, again the best option is to look for a newer version of the plugin. But if none is available, you can still use a dependency constraint to force a newer transitive version to be used.</p> <p>The dependency constraint must be added to the <code>classpath</code> configuration of the buildscript that loads the plugin.</p> <pre><code>buildscript {\n  repositories {\n    gradlePluginPortal()\n  }\n  dependencies {\n    constraints {\n      // Force a newer version of okio in transitive resolution\n      classpath(\"com.squareup.okio:okio:3.6.0\")\n    }\n  }\n}\nplugins {\n  id(\"com.github.ben-manes.versions\") version(\"0.51.0\")\n}\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#limiting-the-dependencies-that-appear-in-the-dependency-graph","title":"Limiting the dependencies that appear in the dependency graph","text":"<p>By default, the <code>dependency-submission</code> action attempts to detect all dependencies declared and used by your Gradle build. At times it may helpful to limit the dependencies reported to GitHub, to avoid security alerts for dependencies that  don't form a critical part of your product. For example, a vulnerability in the tool you use to generate documentation  may not be as important as a vulnerability in one of your runtime dependencies.</p> <p>The <code>dependency-submission</code> action provides a convenient mechanism to filter the projects and configurations that contribute to the dependency graph.</p> <p>[!NOTE] Ideally, all dependencies involved in building and testing a project will be extracted and reported in a dependency graph.  These dependencies would be assigned to different scopes (eg development, runtime, testing) and the GitHub UI would make it easy to opt-in to security alerts for different dependency scopes. However, this functionality does not yet exist.</p>"},{"location":"github-actions/docs/dependency-submission/#selecting-gradle-projects-that-will-contribute-to-the-dependency-graph","title":"Selecting Gradle projects that will contribute to the dependency graph","text":"<p>If you do not want the dependency graph to include dependencies from every project in your build,  you can easily exclude or include certain projects from the dependency extraction process.</p> <p>To restrict which Gradle subprojects contribute to the report, specify which projects to exclude or include via a regular expression. You can use the <code>dependency-graph-exclude-projects</code> and <code>dependency-graph-include-projects</code> input parameters for this purpose.</p> <p>Note that excluding a project in this way only removes dependencies that are resolved as part of that project, and may not necessarily remove all dependencies declared in that project. If another project depends on the excluded project then it may transitively resolve dependencies declared in the excluded project: these dependencies will still be included in the generated dependency graph.</p>"},{"location":"github-actions/docs/dependency-submission/#selecting-gradle-configurations-that-will-contribute-to-the-dependency-graph","title":"Selecting Gradle configurations that will contribute to the dependency graph","text":"<p>Similarly to Gradle projects, it is possible to exclude or include a set of dependency configurations from dependency graph generation, so that only dependencies resolved by the included configurations are reported.</p> <p>To restrict which Gradle configurations contribute to the report, specify which configurations to exclude or include via a regular expression. You can use the <code>dependency-graph-exclude-configurations</code> and <code>dependency-graph-include-configurations</code> input parameters for this purpose.</p> <p>Note that configuration exclusion applies to the configuration in which the dependency is resolved which is not necessarily the configuration where the dependency is declared. For example if you decare a dependency as <code>implementation</code> in a Java project, that dependency will be resolved in <code>compileClasspath</code>, <code>runtimeClasspath</code> and possibly other configurations.</p>"},{"location":"github-actions/docs/dependency-submission/#example-of-project-and-configuration-filtering","title":"Example of project and configuration filtering","text":"<p>For example, if you want to exclude dependencies resolved by the <code>buildSrc</code> project, and exclude dependencies from the <code>testCompileClasspath</code> and <code>testRuntimeClasspath</code> configurations, you would use the following configuration:</p> <pre><code>    - name: Generate and submit dependency graph\n      uses: gradle/actions/dependency-submission@v4\n      with:\n        # Exclude all dependencies that originate solely in the 'buildSrc' project\n        dependency-graph-exclude-projets: ':buildSrc'\n        # Exclude dependencies that are only resolved in test classpaths\n        dependency-graph-exclude-configurations: '.*[Tt]est(Compile|Runtime)Classpath'\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#advance-usage-scenarios","title":"Advance usage scenarios","text":""},{"location":"github-actions/docs/dependency-submission/#using-a-custom-plugin-repository","title":"Using a custom plugin repository","text":"<p>By default, the action downloads the <code>github-dependency-graph-gradle-plugin</code> from the Gradle Plugin Portal (https://plugins.gradle.org). If your GitHub Actions environment does not have access to this URL, you can specify a custom plugin repository to use with an environment variable.</p> <p>See the setup-gradle docs for details.</p>"},{"location":"github-actions/docs/dependency-submission/#integrating-the-dependency-review-action","title":"Integrating the <code>dependency-review-action</code>","text":"<p>The GitHub dependency-review-action helps you  understand dependency changes (and the security impact of these changes) for a pull request, by comparing the dependency graph for the pull-request with that of the HEAD commit.</p> <p>Example of a pull request workflow that executes a build for a pull request and runs the <code>dependency-review-action</code>:</p> <pre><code>name: Dependency review for pull requests\n\non:\n  pull_request:\n\npermissions:\n  contents: write\n\njobs:\n  dependency-submission:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Generate and submit dependency graph\n      uses: gradle/actions/dependency-submission@v4\n\n    - name: Perform dependency review\n      uses: actions/dependency-review-action@v4\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#usage-with-pull-requests-from-public-forked-repositories","title":"Usage with pull requests from public forked repositories","text":"<p>This <code>contents: write</code> permission is not available for any workflow that is triggered by a pull request submitted from a public forked repository. This limitation is designed to prevent a malicious pull request from effecting repository changes.</p> <p>Because of this restriction, we require 2 separate workflows in order to generate and submit a dependency graph: 1. The first workflow runs directly against the pull request sources and will <code>generate-and-upload</code> the dependency graph. 2. The second workflow is triggered on <code>workflow_run</code> of the first workflow, and will <code>download-and-submit</code> the previously saved dependency graph.</p> <p>Main workflow file </p><pre><code>name: Generate and save dependency graph\n\non:\n  pull_request:\n\npermissions:\n  contents: read # 'write' permission is not available\n\njobs:\n  dependency-submission:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Generate and save dependency graph\n      uses: gradle/actions/dependency-submission@v4\n      with:\n        dependency-graph: generate-and-upload\n</code></pre> <p>Dependent workflow file </p><pre><code>name: Download and submit dependency graph\n\non:\n  workflow_run:\n    workflows: ['Generate and save dependency graph']\n    types: [completed]\n\npermissions:\n  actions: read\n  contents: write\n\njobs:\n  submit-dependency-graph:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Download and submit dependency graph\n      uses: gradle/actions/dependency-submission@v4\n      with:\n        dependency-graph: download-and-submit # Download saved dependency-graph and submit\n</code></pre>"},{"location":"github-actions/docs/dependency-submission/#integrating-dependency-review-action-for-pull-requests-from-public-forked-repositories","title":"Integrating <code>dependency-review-action</code> for pull requests from public forked repositories","text":"<p>To integrate the <code>dependency-review-action</code> into the pull request workflows above, a third workflow file is required. This workflow will be triggered directly on <code>pull_request</code>, but will wait until the dependency graph results are submitted before the dependency review can complete. The period to wait is controlled by the <code>retry-on-snapshot-warnings</code> input parameters.</p> <p>Here's an example of a separate \"Dependency Review\" workflow that will wait for 10 minutes for the above PR check workflow to complete.</p> <pre><code>name: dependency-review\n\non:\n  pull_request:\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n    - name: 'Dependency Review'\n      uses: actions/dependency-review-action@v4\n      with:\n        retry-on-snapshot-warnings: true\n        retry-on-snapshot-warnings-timeout: 600\n</code></pre> <p>The <code>retry-on-snapshot-warnings-timeout</code> (in seconds) needs to be long enough to allow the entire <code>Generate and save dependency graph</code> and <code>Download and submit dependency graph</code> workflows (above) to complete.</p>"},{"location":"github-actions/docs/dependency-submission/#gradle-version-compatibility","title":"Gradle version compatibility","text":"<p>Dependency-graph generation is compatible with most versions of Gradle &gt;= <code>5.2</code>, and is tested regularly against  Gradle versions <code>5.2.1</code>, <code>5.6.4</code>, <code>6.0.1</code>, <code>6.9.4</code>, <code>7.1.1</code> and <code>7.6.3</code>, as well as all patched versions of Gradle 8.x.</p> <p>A known exception to this is that Gradle <code>7.0</code>, <code>7.0.1</code> and <code>7.0.2</code> are not supported.</p> <p>See here for complete compatibility information.</p>"},{"location":"github-actions/docs/dependency-submission/#additional-references","title":"Additional references","text":"<ul> <li>Dependency Submission Demo repository: https://github.com/gradle/github-dependency-submission-demo</li> <li>GitHub Dependency Graph Gradle Plugin: https://github.com/gradle/github-dependency-graph-gradle-plugin</li> <li>Webinar - Gradle at Scale with GitHub and GitHub Actions at Allegro: https://www.youtube.com/watch?v=gV94I28FPos</li> </ul>"},{"location":"github-actions/docs/deprecation-upgrade-guide/","title":"Deprecation upgrade guide","text":""},{"location":"github-actions/docs/deprecation-upgrade-guide/#deprecation-upgrade-guide","title":"Deprecation upgrade guide","text":"<p>As these actions evolve, certain inputs, behaviour and usages are deprecated for removal. Deprecated functionality will be fully supported during the current major release, and will be removed in the next major release. Users will receive a deprecation warning when they rely on deprecated functionality, prompting them to update their workflows.</p>"},{"location":"github-actions/docs/deprecation-upgrade-guide/#the-action-gradlegradle-build-action-has-been-replaced-by-gradleactionssetup-gradle","title":"The action <code>gradle/gradle-build-action</code> has been replaced by <code>gradle/actions/setup-gradle</code>","text":"<p>The <code>gradle-build-action</code> action has evolved, so that the core functionality is now to configure the Gradle environment for GitHub Actions. For clarity and consistency with other action (eg <code>setup-java</code>, <code>setup-node</code>), the <code>gradle-build-action</code> has been replaced by the <code>setup-gradle</code> action.</p> <p>As of <code>v3.x</code>, the <code>setup-gradle</code> and <code>gradle-build-action</code> actions are functionally identical, and are released with the same versions.</p> <p>To convert your workflows, simply replace: </p><pre><code>   uses: gradle/gradle-build-action@v3\n</code></pre> with <pre><code>    uses: gradle/actions/setup-gradle@v4\n</code></pre>"},{"location":"github-actions/docs/deprecation-upgrade-guide/#the-action-gradlewrapper-validation-action-has-been-replaced-by-gradleactionswrapper-validation","title":"The action <code>gradle/wrapper-validation-action</code> has been replaced by <code>gradle/actions/wrapper-validation</code>","text":"<p>To facilitate ongoing development, the <code>wrapper-validation-action</code> action implementation has been merged into the https://github.com/gradle/actions repository, and the <code>gradle/wrapper-validation-action</code> has been replaced by the <code>gradle/actions/wrapper-validation</code> action.</p> <p>As of <code>v3.x</code>, the <code>gradle/wrapper-validation-action</code> and <code>gradle/actions/wrappper-validation</code> actions are functionally identical, and are released with the same versions.</p> <p>In a future major version (likely <code>v4.x</code>) we will stop releasing new versions of <code>gradle/wrapper-validation-action</code>: development and releases will continue in the <code>gradle/actions/wrapper-validation</code> action.</p> <p>To convert your workflows, simply replace: </p><pre><code>   uses: gradle/wrapper-validation-action@v3\n</code></pre> with <pre><code>    uses: gradle/actions/wrapper-validation@v4\n</code></pre>"},{"location":"github-actions/docs/deprecation-upgrade-guide/#using-the-action-to-execute-gradle-via-the-arguments-parameter-is-deprecated","title":"Using the action to execute Gradle via the <code>arguments</code> parameter is deprecated","text":"<p>The core functionality of the <code>setup-gradle</code> (and <code>gradle-build-action</code>) actions is to configure your Gradle environment for GitHub Actions. Once the action has run, any subsequent Gradle executions will benefit from caching, reporting and other features of the action.</p> <p>Using the <code>arguments</code> parameter to execute Gradle directly is not necessary to benefit from this action. This input is deprecated, and will be removed in the <code>v4</code> major release of the action.</p> <p>To convert your workflows, replace any steps using the <code>arguments</code> parameter with 2 steps: one to <code>setup-gradle</code> and another that runs your Gradle build.</p> <p>For example, given a workflow like this:</p> <pre><code>steps:\n- name: Assemble the project\n  uses: gradle/actions/setup-gradle@v3\n  with:\n    arguments: 'assemble'\n\n - name: Run the tests\n   uses: gradle/actions/setup-gradle@v3\n   with:\n     arguments: 'test'\n\n - name: Run build in a subdirectory\n   uses: gradle/actions/setup-gradle@v3\n   with:\n     build-root-directory: another-build\n     arguments: 'build'\n</code></pre> <p>Then replace this with a single call to <code>setup-gradle</code> together with separate <code>run</code> steps to execute your build. The exact syntax depends on whether or not your project is configured with the Gradle wrapper.</p>"},{"location":"github-actions/docs/deprecation-upgrade-guide/#project-uses-gradle-wrapper","title":"Project uses Gradle wrapper","text":"<pre><code>- name: Setup Gradle\n  uses: gradle/actions/setup-gradle@v4\n\n- name: Assemble the project\n  run: ./gradlew assemble\n\n- name: Run the tests\n  run: ./gradlew test\n\n- name: Run build in a subdirectory\n  working-directory: another-build\n  run: ./gradlew build\n</code></pre>"},{"location":"github-actions/docs/deprecation-upgrade-guide/#project-doesnt-use-gradle-wrapper","title":"Project doesn't use Gradle wrapper","text":"<pre><code>- name: Setup Gradle for a non-wrapper project\n  uses: gradle/actions/setup-gradle@v4\n  with:\n    gradle-version: \"8.11\"\n\n- name: Assemble the project\n  run: gradle assemble\n\n- name: Run the tests\n  run: gradle test\n\n- name: Run build in a subdirectory\n  working-directory: another-build\n  run: gradle build\n</code></pre> <p>Using the action in this way gives you more control over how Gradle is executed, while still giving you all of the benefits of the <code>setup-gradle</code> action.</p> <p>The <code>arguments</code> parameter is scheduled to be removed in <code>setup-gradle@v4</code>.</p> <p>Note: if you are using the <code>gradle-build-action</code>, see here for more details on how to migrate.</p>"},{"location":"github-actions/docs/deprecation-upgrade-guide/#the-build-scan-terms-of-service-input-parameters-have-been-renamed","title":"The <code>build-scan-terms-of-service</code> input parameters have been renamed","text":"<p>With recent releases of the <code>com.gradle.develocity</code> plugin, key input parameters have been renamed. - <code>build-scan-terms-of-service-url</code> is now <code>build-scan-terms-of-use-url</code> - <code>build-scan-terms-of-service-agree</code> is now <code>build-scan-terms-of-use-agree</code></p> <p>The standard URL for the terms of use has also changed to https://gradle.com/help/legal-terms-of-use</p> <p>To convert your workflows, change: </p><pre><code>    build-scan-publish: true\n    build-scan-terms-of-service-url: \"https://gradle.com/terms-of-service\"\n    build-scan-terms-of-service-agree: \"yes\"\n</code></pre> <p>to this: </p><pre><code>    build-scan-publish: true\n    build-scan-terms-of-use-url: \"https://gradle.com/help/legal-terms-of-use\"\n    build-scan-terms-of-use-agree: \"yes\"\n</code></pre> These deprecated build-scan parameters are scheduled to be removed in <code>setup-gradle@v4</code> and <code>dependency-submission@v4</code>."},{"location":"github-actions/docs/deprecation-upgrade-guide/#the-gradle_enterprise_access_key-env-var-is-deprecated","title":"The GRADLE_ENTERPRISE_ACCESS_KEY env var is deprecated","text":"<p>Gradle Enterprise has been renamed to Develocity starting from Gradle plugin 3.17 and Develocity server 2024.1. In v4 release of the action, it will require setting the access key with the <code>develocity-access-key</code> input and Develocity 2024.1 at least to generate short-lived tokens. If those requirements are not met, the <code>GRADLE_ENTERPRISE_ACCESS_KEY</code> env var will be cleared out and build scan publication or other authenticated Develocity operations won't be possible.</p>"},{"location":"github-actions/docs/deprecation-upgrade-guide/#the-gradle-home-cache-cleanup-input-parameter-has-been-replaced-by-cache-cleanup","title":"The <code>gradle-home-cache-cleanup</code> input parameter has been replaced by <code>cache-cleanup</code>","text":"<p>In versions of the action prior to <code>v4</code>, the boolean <code>gradle-home-cache-cleanup</code> parameter allows users to opt-in  to cache cleanup, removing unused files in Gradle User Home prior to saving to the cache.</p> <p>With <code>v4</code>, cache-cleanup is enabled by default, and controlled by the <code>cache-cleanup</code> input parameter.</p> <p>To remove this deprecation: - If you are using <code>gradle-home-cache-cleanup: true</code> in your workflow, you can remove this option as this is now enabled by default. - If you want cache-cleanup to run even when a Gradle build fails, then add the <code>cache-cleanup: always</code> input. - If cache-cleanup is causing problems with your workflow, you can disable it with <code>cache-cleanup: never</code>.</p>"},{"location":"github-actions/docs/setup-gradle/","title":"Configure Gradle for GitHub Actions workflows","text":""},{"location":"github-actions/docs/setup-gradle/#configure-gradle-for-github-actions-workflows","title":"Configure Gradle for GitHub Actions workflows","text":"<p>This GitHub Action can be used to configure Gradle for optimal execution on any platform supported by GitHub Actions.</p>"},{"location":"github-actions/docs/setup-gradle/#why-use-the-setup-gradle-action","title":"Why use the <code>setup-gradle</code> action?","text":"<p>It is possible to directly invoke Gradle in your workflow, and the <code>actions/setup-java@v4</code> action provides a simple way to cache Gradle dependencies.</p> <p>However, the <code>setup-gradle</code> action offers a several advantages over this approach:</p> <ul> <li>Easily configure your workflow to use a specific version of Gradle using the <code>gradle-version</code> parameter. Gradle distributions are automatically downloaded and cached.</li> <li>More sophisticated and more efficient caching of Gradle User Home between invocations, compared to <code>setup-java</code> and most custom configurations using <code>actions/cache</code>. More details below.</li> <li>Detailed reporting of cache usage and cache configuration options allow you to optimize the use of the GitHub actions cache.</li> <li>Generate and Submit a GitHub Dependency Graph for your project, enabling Dependabot security alerts.</li> <li>Automatic capture of Build Scan\u00ae links from the build, making them easier to locate in workflow runs.</li> </ul> <p>The <code>setup-gradle</code> action is designed to provide these benefits with minimal configuration. These features work both when Gradle is executed via <code>setup-gradle</code> and for any Gradle execution in subsequent steps.</p>"},{"location":"github-actions/docs/setup-gradle/#general-usage","title":"General usage","text":"<p>The <code>setup-gradle</code> action works by configuring environment variables and by adding a set of Gradle init-scripts to the Gradle User Home. These will apply to all Gradle executions on the runner, no matter how Gradle is invoked. This means that if you have an existing workflow that executes Gradle with a <code>run</code> step, you can add an initial \"Setup Gradle\" Step to benefit from caching, build-scan capture, and other features of this action.</p> <p>The recommended way to execute any Gradle build is with the help of the Gradle Wrapper, and the following examples assume that the Gradle Wrapper has been configured for the project. See this example if your project doesn't use the Gradle Wrapper.</p> <pre><code>name: Run Gradle on every push\n\non:\n  push:\n\njobs:\n  gradle:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n\n    - name: Execute Gradle build\n      run: ./gradlew build\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#build-with-a-specific-gradle-version","title":"Build with a specific Gradle version","text":"<p>The <code>setup-gradle</code> action can download and install a specified Gradle version, adding this installed version to the PATH. Downloaded Gradle versions are stored in the GitHub Actions cache, to avoid having to download them again later.</p> <pre><code> - name: Setup Gradle 8.10\n   uses: gradle/actions/setup-gradle@v4\n   with:\n     gradle-version: \"8.10\" # Quotes required to prevent YAML converting to number\n  - name: Build with Gradle 8.10\n    run: gradle build\n</code></pre> <p>The <code>gradle-version</code> parameter can be set to any valid Gradle version.</p> <p>Moreover, you can use the following aliases:</p> Alias Selects <code>wrapper</code> The Gradle wrapper's version (default, useful for matrix builds) <code>current</code> The current stable release <code>release-candidate</code> The current release candidate if any, otherwise fallback to <code>current</code> <code>nightly</code> The latest nightly, fails if none. <code>release-nightly</code> The latest release nightly, fails if none. <p>This can be handy to automatically verify your build works with the latest release candidate of Gradle:</p> <p>The actual Gradle version used is available as an action output: <code>gradle-version</code>.</p> <pre><code>name: Test latest Gradle RC\non:\n  schedule:\n    - cron: 0 0 * * * # daily\njobs:\n  gradle-rc:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - uses: gradle/actions/setup-gradle@v4\n      id: setup-gradle\n      with:\n        gradle-version: release-candidate\n    - run: gradle build --dry-run # just test build configuration\n    - run: echo \"The release-candidate version was ${{ steps.setup-gradle.outputs.gradle-version }}\"\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#caching-build-state-between-jobs","title":"Caching build state between Jobs","text":"<p>The <code>setup-gradle</code> action will use the GitHub Actions cache to save and restore reusable state that may speed up subsequent build invocations. This includes most content that is downloaded from the internet as part of a build, as well as expensive to create content like compiled build scripts, transformed Jar files, etc.</p> <p>The cached state includes: - Any distributions downloaded to satisfy a <code>gradle-version</code> parameter. - A subset of the Gradle User Home directory, including downloaded dependencies, wrapper distributions, and the local build cache.</p> <p>To reduce the space required for caching, this action attempts to reduce duplication in cache entries on a best effort basis.</p> <p>The state will be restored from the cache during the first <code>setup-gradle</code> step for any workflow job, and cache entries will be written back to the cache at the end of the job after all Gradle executions have been completed.</p>"},{"location":"github-actions/docs/setup-gradle/#disabling-caching","title":"Disabling caching","text":"<p>Caching is enabled by default. You can disable caching for the action as follows: </p><pre><code>cache-disabled: true\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#using-the-cache-read-only","title":"Using the cache read-only","text":"<p>By default, The <code>setup-gradle</code> action will only write to the cache from Jobs on the default (<code>main</code>/<code>master</code>) branch. Jobs on other branches will read entries from the cache but will not write updated entries. See Optimizing cache effectiveness for a more detailed explanation.</p> <p>In some circumstances, it makes sense to change this default and configure a workflow Job to read existing cache entries but not to write changes back.</p> <p>You can configure read-only caching for <code>setup-gradle</code> as follows:</p> <pre><code>cache-read-only: true\n</code></pre> <p>You can also configure read-only caching only for certain branches:</p> <pre><code># Only write to the cache for builds on the 'main' and 'release' branches. (Default is 'main' only.)\n# Builds on other branches will only read existing entries from the cache.\ncache-read-only: ${{ github.ref != 'refs/heads/main' &amp;&amp; github.ref != 'refs/heads/release' }}\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#using-the-cache-write-only","title":"Using the cache write-only","text":"<p>In certain circumstances it may be desirable to start with a clean Gradle User Home state, but to save the state at the end of a workflow Job:</p> <pre><code>cache-write-only: true\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#configuring-cache-cleanup","title":"Configuring cache cleanup","text":"<p>The Gradle User Home directory tends to grow over time. When you switch to a new Gradle wrapper version  or upgrade a dependency version the old files are not automatically and immediately removed.  While this can make sense in a local environment, in a GitHub Actions environment it can lead to ever-larger Gradle User Home cache entries being saved and restored.</p> <p>To avoid this situation, the <code>setup-gradle</code> and <code>dependency-submission</code> actions will perform \"cache-cleanup\",  purging any unused files from the Gradle User Home before saving it to the GitHub Actions cache.  Cache cleanup will attempt to remove any files that are initially restored to the Gradle User Home directory  but that are not used used by Gradle during the GitHub Actions Workflow.</p> <p>If a Gradle build fails when running the Job, then it is possible that some required files and dependencies  will not be touched during the Job. To prevent these files from being purged, the default behavior is for  cache cleanup to run only when all Gradle builds in the Job are successful.</p> <p>Gradle Home cache cleanup is enabled by default, and can be controlled by the <code>cache-cleanup</code> parameter as follows: - <code>cache-cleanup: always</code>: Always run cache cleanup, even when a Gradle build fails in the Job. - <code>cache-cleanup: on-success</code> (default): Run cache cleanup when the Job contains no failing Gradle builds. - <code>cache-cleanup: never</code>: Disable cache cleanup for the Job.</p> <p>Cache cleanup will never run when the cache is configured as read-only or disabled.</p>"},{"location":"github-actions/docs/setup-gradle/#overwriting-an-existing-gradle-user-home","title":"Overwriting an existing Gradle User Home","text":"<p>When the action detects that the Gradle User Home caches directory already exists (<code>$GRADLE_USER_HOME/caches</code>), then by default it will not overwrite the existing content of this directory. This can occur when a prior action initializes this directory, or when using a self-hosted runner that retains this directory between uses.</p> <p>In this case, the Job Summary will display a message like:</p> <p>Caching for Gradle actions was disabled due to pre-existing Gradle User Home</p> <p>If you want to override the default and have the caches of the <code>setup-gradle</code> action overwrite existing content in the Gradle User Home, you can set the <code>cache-overwrite-existing</code> parameter to <code>true</code>:</p> <pre><code>cache-overwrite-existing: true\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#saving-configuration-cache-data","title":"Saving configuration-cache data","text":"<p>When Gradle is executed with the configuration-cache enabled, the configuration-cache data is stored in the project directory, at <code>&lt;project-dir&gt;/.gradle/configuration-cache</code>. Due to the way the configuration-cache works, this file may contain stored credentials and other secrets, and this data needs to be encrypted to be safely stored in the GitHub Actions cache.</p> <p>To benefit from configuration caching in your GitHub Actions workflow, you must: - Execute your build with Gradle 8.6 or newer. This can be achieved directly or via the Gradle Wrapper. - Enable the configuration cache for your build. - Generate a valid Gradle encryption key and save it as a GitHub Actions secret. - Provide the secret key via the <code>cache-encryption-key</code> action parameter.</p> <pre><code>jobs:\n  gradle-with-configuration-cache:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - uses: gradle/actions/setup-gradle@v4\n      with:\n        gradle-version: 8.6\n        cache-encryption-key: ${{ secrets.GradleEncryptionKey }}\n    - run: gradle build --configuration-cache\n</code></pre> <p>[!IMPORTANT] The configuration cache cannot be saved or restored in workflows triggered by a pull requests from a repository fork. This is because GitHub secrets are not passed to workflows triggered by PRs from forks. This prevents a malicious PR from reading the configuration-cache data, which may encode secrets read by Gradle.</p>"},{"location":"github-actions/docs/setup-gradle/#incompatibility-with-other-caching-mechanisms","title":"Incompatibility with other caching mechanisms","text":"<p>When using <code>setup-gradle</code> we recommend that you avoid using other mechanisms to save and restore the Gradle User Home.</p> <p>Specifically: - Avoid using <code>actions/cache</code> configured to cache the Gradle User Home, as described in this example. - Avoid using <code>actions/setup-java</code> with the <code>cache: gradle</code> option, as described here.</p> <p>Using either of these mechanisms may interfere with the caching provided by this action. If you choose to use a different mechanism to save and restore the Gradle User Home, you should disable the caching provided by this action, as described above.</p>"},{"location":"github-actions/docs/setup-gradle/#how-gradle-user-home-caching-works","title":"How Gradle User Home caching works","text":""},{"location":"github-actions/docs/setup-gradle/#properties-of-the-github-actions-cache","title":"Properties of the GitHub Actions cache","text":"<p>The GitHub Actions cache has some properties that present problems for efficient caching of the Gradle User Home. - Immutable entries: once a cache entry is written for a key, it cannot be overwritten or changed. - Branch scope: cache entries written for a Git branch are not visible from actions running against different branches or tags. Entries written for the default branch are visible to all. https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache - Restore keys: if no exact match is found, a set of partial keys can be provided that will match by cache key prefix. https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key</p> <p>Each of these properties has influenced the design and implementation of the caching in <code>setup-gradle</code>, as described below.</p>"},{"location":"github-actions/docs/setup-gradle/#which-content-is-cached","title":"Which content is cached","text":"<p>Using experiments and observations, we have attempted to identify which Gradle User Home content is worth saving and restoring between build invocations. We considered both the respective size of the content and the impact this content has on build times. As well as the obvious candidates like downloaded dependencies, we saw that compiled build scripts, transformed Jar files, and other content can also have a significant impact.</p> <p>In the end, we opted to save and restore as much content as is practical, including: - <code>caches/&lt;version&gt;/generated-gradle-jars</code>: These files are generated on the first use of a particular Gradle version, and are expensive to recreate - <code>caches/&lt;version&gt;/kotlin-dsl</code> and <code>caches/&lt;version&gt;/scripts</code>: These are the compiled build scripts. The Kotlin ones in particular can benefit from caching. - <code>caches/modules-2</code>: The downloaded dependencies - <code>caches/transforms-3</code>: The results of artifact transforms - <code>caches/jars-9</code>: Jar files that have been processed/instrumented by Gradle - <code>caches/build-cache-1</code>: The local build cache</p> <p>In certain cases, a particular section of Gradle User Home will be too large to make caching effective. In these cases, particular subdirectories can be excluded from caching. See Exclude content from Gradle User Home cache.</p>"},{"location":"github-actions/docs/setup-gradle/#cache-keys","title":"Cache keys","text":"<p>The actual content of the Gradle User Home after a build is the result of many factors, including: - Core Gradle build files (<code>settings.gradle[.kts]</code>, <code>build.gradle[.kts]</code>, <code>gradle.properties</code>) - Associated Gradle configuration files (<code>gradle-wrapper.properties</code>, <code>dependencies.toml</code>, etc) - The entire content of <code>buildSrc</code> or any included builds that provide plugins. - The entire content of the repository, in the case of the local build cache. - The actual build command that was invoked, including system properties and environment variables.</p> <p>For this reason, it's very difficult to create a cache key that will deterministically map to a saved Gradle User Home state. So instead of trying to reliably hash all of these inputs to generate a cache key, the Gradle User Home cache key is based on the currently executing Job and the current commit hash for the repository.</p> <p>The Gradle User Home cache key is composed of: - The current operating system (<code>RUNNER_OS</code>) - The Job id - A hash of the Job matrix parameters and the workflow name - The git SHA for the latest commit</p> <p>Specifically, the cache key is: <code>${cache-protocol}-gradle|${runner-os}|${job-id}[${hash-of-job-matrix-and-workflow-name}]-${git-sha}</code></p> <p>As such, the cache key is likely to change on each subsequent run of GitHub actions. This allows the most recent state to always be available in the GitHub actions cache.</p>"},{"location":"github-actions/docs/setup-gradle/#finding-a-matching-cache-entry","title":"Finding a matching cache entry","text":"<p>In most cases, no exact match will exist for the cache key. Instead, the Gradle User Home will be restored for the closest matching cache entry, using a set of \"restore keys\". The entries will be matched with the following precedence: - An exact match on OS, job id, workflow name, matrix, and Git SHA - The most recent entry saved for the same OS, job id, workflow name, and matrix values - The most recent entry saved for the same OS and job id - The most recent entry saved for the same OS</p> <p>Due to branch scoping of cache entries, the above match will be first performed for entries from the same branch, and then for the default ('main') branch.</p> <p>After the Job is complete, the current Gradle User Home state will be collected and written as a new cache entry with the complete cache key. Old entries will be expunged from the GitHub Actions cache on a least recently used basis.</p> <p>Note that while effective, this mechanism is not inherently efficient. It requires the entire Gradle User Home directory to be stored separately for each branch, for every OS+Job+Matrix combination. In addition, it writes a new cache entry on every GitHub Actions run.</p> <p>This inefficiency is effectively mitigated by Deduplication of Gradle User Home cache entries and can be further optimized for a workflow using the techniques described in Optimizing cache effectiveness.</p>"},{"location":"github-actions/docs/setup-gradle/#deduplication-of-gradle-user-home-cache-entries","title":"Deduplication of Gradle User Home cache entries","text":"<p>To reduce duplication between cache entries, certain artifacts in Gradle User Home are extracted and cached independently based on their identity. This allows each Gradle User Home cache entry to be relatively small, sharing common elements between them without duplication.</p> <p>Artifacts that are cached independently include: - Downloaded dependencies - Downloaded wrapper distributions - Generated Gradle API jars - Downloaded Java Toolchains</p> <p>For example, this means that all jobs executing a particular version of the Gradle wrapper will share a single common entry for this wrapper distribution and one for each of the generated Gradle API jars.</p>"},{"location":"github-actions/docs/setup-gradle/#stopping-the-gradle-daemon","title":"Stopping the Gradle daemon","text":"<p>By default, the action will stop all running Gradle daemons in the post-action step, before saving the Gradle User Home state. This allows for any Gradle User Home cleanup to occur, and avoid file-locking issues on Windows.</p> <p>If caching is disabled or the cache is in read-only mode, the daemon will not be stopped and will continue running after the job is completed.</p>"},{"location":"github-actions/docs/setup-gradle/#optimizing-cache-effectiveness","title":"Optimizing cache effectiveness","text":"<p>Cache storage space for GitHub actions is limited, and writing new cache entries can trigger the deletion of existing entries. Eviction of shared cache entries can reduce cache effectiveness, slowing down your <code>setup-gradle</code> steps.</p> <p>There are a several actions you can take if your cache use is less effective due to entry eviction.</p> <p>At the end of a Job, The <code>setup-gradle</code> action will write a summary of the Gradle builds executed, together with a detailed report of the cache entries that were read and written during the Job. This report can provide valuable insights that may help to determine the right way to optimize the cache usage for your workflow.</p>"},{"location":"github-actions/docs/setup-gradle/#select-which-jobs-should-write-to-the-cache","title":"Select which jobs should write to the cache","text":"<p>Consider a workflow that first runs a Job \"compile-and-unit-test\" to compile the code and run some basic unit tests, which is followed by a matrix of parallel \"integration-test\" jobs that each run a set of integration tests for the repository. Each \"integration test\" Job requires all of the dependencies required by \"compile-and-unit-test\", and possibly one or 2 additional dependencies.</p> <p>By default, a new cache entry will be written on completion of each integration test job. If no additional dependencies were downloaded then this cache entry will share the \"dependencies\" entry with the \"compile-and-unit-test\" job, but if a single dependency was downloaded then an entirely new \"dependencies\" entry would be written. (The <code>setup-gradle</code> action does not yet support a layered cache that could do this more efficiently). If each of these \"integration-test\" entries with their different \"dependencies\" entries is too large, then it could result in other important entries being evicted from the GitHub Actions cache.</p> <p>Some techniques can be used to avoid/mitigate this issue: - Configure the \"integration-test\" jobs with <code>cache-read-only: true</code>, meaning that the Job will use the entry written by the \"compile-and-unit-test\" job. This will avoid the overhead of cache entries for each of these jobs, at the expense of re-downloading any additional dependencies required by \"integration-test\". - Add a step to the \"compile-and-unit-test\" job which downloads all dependencies required by the integration-test jobs but does not execute the tests. This will allow the \"dependencies\" entry for \"compile-and-unit-test\" to be shared among all cache entries for \"integration-test\". The resulting \"integration-test\" entries should be much smaller, reducing the potential for eviction. - Combine the above 2 techniques, so that no cache entry is written by \"integration-test\" jobs, but all required dependencies are already present from the restored \"compile-and-unit-test\" entry.</p>"},{"location":"github-actions/docs/setup-gradle/#select-which-branches-should-write-to-the-cache","title":"Select which branches should write to the cache","text":"<p>GitHub cache entries are not shared between builds on different branches or tags. Workflow runs can only restore caches created in either the same branch or the default branch (usually <code>main</code>). This means that each branch will have its own Gradle User Home cache scope, and will not benefit from cache entries written for other (non-default) branches.</p> <p>By default, The <code>setup-gradle</code> action will only write to the cache for builds run on the default (<code>master</code>/<code>main</code>) branch. Jobs running on other branches will only read from the cache. In most cases, this is the desired behavior. This is because Jobs running on other branches will benefit from the cached Gradle User Home from <code>main</code>, without writing private cache entries which could lead to evicting these shared entries.</p> <p>If you have other long-lived development branches that would benefit from writing to the cache, you can configure this by disabling the <code>cache-read-only</code> action parameter for these branches. See Using the cache read-only for more details.</p> <p>Note there are some cases where writing cache entries is typically unhelpful (these are disabled by default): - For <code>pull_request</code> triggered runs, the cache scope is limited to the merge ref (<code>refs/pull/.../merge</code>) and can only be restored by re-runs of the same pull request. - For <code>merge_group</code> triggered runs, the cache scope is limited to a temporary branch with a special prefix created to validate pull request changes, and won't be available on subsequent Merge Queue executions.</p>"},{"location":"github-actions/docs/setup-gradle/#exclude-content-from-gradle-user-home-cache","title":"Exclude content from Gradle User Home cache","text":"<p>As well as any wrapper distributions, the action will attempt to save and restore the <code>caches</code> and <code>notifications</code> directories from Gradle User Home.</p> <p>Each build is different, and some builds produce more Gradle User Home content than others. Cache debugging  can provide insight into which cache entries are the largest, and the contents to be cached can be fine-tuned by including and excluding certain paths within the Gradle User Home.</p> <pre><code># Cache downloaded JDKs in addition to the default directories.\ngradle-home-cache-includes: |\n    caches\n    notifications\n    jdks\n# Exclude the local build-cache and keyrings from the directories cached.\ngradle-home-cache-excludes: |\n    caches/build-cache-1\n    caches/keyrings\n</code></pre> <p>You can specify any number of fixed paths or patterns to include or exclude. File pattern support is documented at https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#patterns-to-match-file-paths.</p>"},{"location":"github-actions/docs/setup-gradle/#disable-local-build-cache-when-remote-build-cache-is-available","title":"Disable local build-cache when remote build-cache is available","text":"<p>If you have a remote build-cache available for your build, then it is recommended to do the following: - Enable remote build-cache push for your GitHub Actions builds - Disable local build-cache for your GitHub Actions build</p> <p>As well as reducing the content that needs to be saved to the GitHub Actions cache, this setup will ensure that your CI builds populate the remote cache and keep the cache entries fresh by reading these entries. Local builds can then benefit from the remote cache.</p>"},{"location":"github-actions/docs/setup-gradle/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":"<p>To debug a failed job, it can be useful to run with debug logging enabled. You can enable debug logging either by: 1. Adding an <code>ACTIONS_STEP_DEBUG</code> variable to your repository configuration (see here). 2. By re-running a Job and checking the \"Enable debug logging\" box (see here).</p>"},{"location":"github-actions/docs/setup-gradle/#increased-logging-from-gradle-builds","title":"Increased logging from Gradle builds","text":"<p>When debug logging is enabled, this action will cause all builds to run with the <code>--info</code> and <code>--stacktrace</code> options. This is done by inserting the relevant Gradle properties at the top of the <code>${GRADLE_USER_HOME}/gradle.properties</code> file.</p> <p>If the additional Gradle logging produced is problematic, you may opt out of this behavior by setting these properties manually in your project <code>gradle.properties</code> file:</p> <pre><code># default lifecycle\norg.gradle.logging.level=lifecycle\norg.gradle.logging.stacktrace=internal\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#cache-debugging-and-analysis","title":"Cache debugging and analysis","text":"<p>A report of all cache entries restored and saved is printed to the Job Summary when saving the cache entries. This report can provide valuable insight into how much cache space is being used.</p> <p>When debug logging is enabled, more detailed logging of cache operations is included in the GitHub actions log. This includes a breakdown of the contents of the Gradle User Home directory, which may assist in cache optimization.</p>"},{"location":"github-actions/docs/setup-gradle/#build-reporting","title":"Build reporting","text":"<p>The <code>setup-gradle</code> action collects information about any Gradle executions that occur in a workflow, including the root project, requested tasks, build outcome, and any Build Scan link generated. Details of cache entries read and written are also collected. These details are compiled into a Job Summary, which is visible in the GitHub Actions UI.</p> <p>Generation of a Job Summary is enabled by default for all Jobs using The <code>setup-gradle</code> action. This feature can be configured so that a Job Summary is never generated, or so that a Job Summary is only generated on build failure: </p><pre><code>add-job-summary: 'on-failure' # Valid values are 'always' (default), 'never', and 'on-failure'\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#adding-job-summary-as-a-pull-request-comment","title":"Adding Job Summary as a Pull Request comment","text":"<p>It is sometimes more convenient to view the results of a GitHub Actions Job directly from the Pull Request that triggered the Job. For this purpose, you can configure the action so that Job Summary data is added as a Pull Request comment.</p> <pre><code>name: CI\non:\n  pull_request:\n\npermissions:\n  pull-requests: write\n\njobs:\n  run-gradle-build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        add-job-summary-as-pr-comment: on-failure # Valid values are 'never' (default), 'always', and 'on-failure'\n\n    - run: ./gradlew build --scan\n</code></pre> <p>Note that to add a Pull Request comment, the workflow must be configured with the <code>pull-requests: write</code> permission.</p>"},{"location":"github-actions/docs/setup-gradle/#build-scan-link-as-step-output","title":"Build Scan\u00ae link as Step output","text":"<p>As well as reporting all Build Scan links in the Job Summary, The <code>setup-gradle</code> action makes this link available as an output of any Step that executes Gradle.</p> <p>The output name is <code>build-scan-url</code>. You can then use the build scan link in subsequent actions of your workflow.</p>"},{"location":"github-actions/docs/setup-gradle/#saving-arbitrary-build-outputs","title":"Saving arbitrary build outputs","text":"<p>By default, a GitHub Actions workflow using <code>setup-gradle</code> will record the log output and any Build Scan links for your build, but any output files generated by the build will not be saved.</p> <p>To save selected files from your build execution, you can use the core Upload-Artifact action. For example:</p> <pre><code>jobs:\n  gradle:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n\n    - name: Run build with Gradle wrapper\n      run: ./gradlew build --scan\n\n    - name: Upload build reports\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: build-reports\n        path: **/build/reports/\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#use-of-custom-init-scripts-in-gradle-user-home","title":"Use of custom init-scripts in Gradle User Home","text":"<p>Note that the action collects information about Gradle invocations via an Initialization Script located at <code>USER_HOME/.gradle/init.d/gradle-actions.build-result-capture.init.gradle</code>.</p> <p>If you are adding any custom init scripts to the <code>USER_HOME/.gradle/init.d</code> directory, it may be necessary to ensure these files are applied before <code>gradle-actions.build-result-capture.init.gradle</code>. Since Gradle applies init scripts in alphabetical order, one way to ensure this is via file naming.</p>"},{"location":"github-actions/docs/setup-gradle/#gradle-wrapper-validation","title":"Gradle Wrapper validation","text":"<p>By default, this action will perform the same wrapper validation as is performed by the dedicated  wrapper-validation action.  This means that invalid wrapper jars will be automatically detected when using <code>setup-gradle</code>. </p> <p>If you do not want wrapper-validation to occur automatically, you can disable it:</p> <pre><code>    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        validate-wrappers: false\n</code></pre> <p>If your repository uses snapshot versions of the Gradle wrapper, such as nightly builds, then you'll need to  explicitly allow snapshot wrappers in wrapper validation. These are not allowed by default.</p> <pre><code>    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        validate-wrappers: true\n        allow-snapshot-wrappers: true\n</code></pre> <p>If you need more advanced configuration, then you're advised to continue using a separate workflow step with <code>gradle/actions/wrapper-validation</code>.</p>"},{"location":"github-actions/docs/setup-gradle/#support-for-github-enterprise-server-ghes","title":"Support for GitHub Enterprise Server (GHES)","text":"<p>You can use the <code>setup-gradle</code> action on GitHub Enterprise Server, and benefit from the improved integration with Gradle. Depending on the version of GHES you are running, certain features may be limited: - Build Scan links are captured and displayed in the GitHub Actions UI - Easily run your build with different versions of Gradle - Save/restore of Gradle User Home (requires GHES v3.5+ : GitHub Actions cache was introduced in GHES 3.5) - Support for GitHub Actions Job Summary (requires GHES 3.6+ : GitHub Actions Job Summary support was introduced in GHES 3.6). In earlier versions of GHES, the build-results summary and caching report will be written to the workflow log, as part of the post-action step.</p>"},{"location":"github-actions/docs/setup-gradle/#github-dependency-graph-support","title":"GitHub Dependency Graph support","text":"<p>[!IMPORTANT] The simplest (and recommended) way to generate a dependency graph is via a separate workflow using <code>gradle/actions/dependency-submission</code>. This action will attempt to detect all dependencies used by your build without building and testing the project itself.</p> <p>See the dependency-submission documentation for up-to-date documentation.</p> <p>The <code>setup-gradle</code> action has support for submitting a GitHub Dependency Graph snapshot via the GitHub Dependency Submission API.</p> <p>The dependency graph snapshot is generated via integration with the GitHub Dependency Graph Gradle Plugin and saved as a workflow artifact. The generated snapshot files can be submitted either in the same job or in a subsequent job (in the same or a dependent workflow).</p> <p>The generated dependency graph snapshot reports all of the dependencies that were resolved during a build execution, and is used by GitHub to generate Dependabot Alerts for vulnerable dependencies, as well as to populate the Dependency Graph insights view.</p>"},{"location":"github-actions/docs/setup-gradle/#basic-usage","title":"Basic usage","text":"<p>You enable GitHub Dependency Graph support by setting the <code>dependency-graph</code> action parameter. Valid values are:</p> Option Behaviour <code>disabled</code> Do not generate a dependency graph for any build invocations.<p>This is the default.</p> <code>generate</code> Generate a dependency graph snapshot for each build invocation. <code>generate-and-submit</code> Generate a dependency graph snapshot for each build invocation, and submit these via the Dependency Submission API on completion of the job. <code>generate-and-upload</code> Generate a dependency graph snapshot for each build invocation, saving it as a workflow artifact. <code>download-and-submit</code> Download any previously saved dependency graph snapshots, and submit them via the Dependency Submission API. This can be useful to submit dependency graphs for pull requests submitted from repository forks. <p>Example of a CI workflow that generates and submits a dependency graph: </p><pre><code>name: CI build\non:\n  push:\n\npermissions:\n  contents: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Setup Gradle to generate and submit dependency graphs\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        dependency-graph: generate-and-submit\n    - name: Run the usual CI build (dependency-graph will be generated and submitted post-job)\n      run: ./gradlew build\n</code></pre> <p>The <code>contents: write</code> permission is required to submit (but not generate) the dependency graph file. Depending on repository settings, this permission may be available by default or may need to be explicitly enabled in the workflow file (as above).</p> <p>[!IMPORTANT] The above configuration will work for workflows that run as a result of commits to a repository branch, but not when a workflow is triggered by a PR from a repository fork. This is because the <code>contents: write</code> permission is not available when executing a workflow for a PR submitted from a forked repository. For a configuration that supports this setup, see Dependency Graphs for pull request workflows.</p>"},{"location":"github-actions/docs/setup-gradle/#making-dependency-graph-failures-cause-job-failures","title":"Making dependency graph failures cause Job failures","text":"<p>By default, if a failure is encountered when generating or submitting the dependency graph, the action will log the failure as a warning and continue. This allows your workflow to be resilient to dependency graph failures, in case dependency graph production is a side-effect rather than the primary purpose of a workflow.</p> <p>If instead, you have a workflow whose primary purpose is to generate and submit a dependency graph, it makes sense for this workflow to fail if the dependency graph cannot be generated or submitted. You can enable this behavior with the <code>dependency-graph-continue-on-failure</code> parameter, which defaults to <code>true</code>.</p> <pre><code># Ensure that the workflow Job will fail if the dependency graph cannot be submitted\n- uses: gradle/actions/setup-gradle@v4\n  with:\n    dependency-graph: generate-and-submit\n    dependency-graph-continue-on-failure: false\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#using-a-custom-plugin-repository","title":"Using a custom plugin repository","text":"<p>By default, the action downloads the <code>github-dependency-graph-gradle-plugin</code> from the Gradle Plugin Portal (https://plugins.gradle.org). If your GitHub Actions environment does not have access to this URL, you can specify a custom plugin repository to use.</p> <p>Do so by setting the <code>GRADLE_PLUGIN_REPOSITORY_URL</code> environment variable with your Gradle invocation. The <code>GRADLE_PLUGIN_REPOSITORY_USERNAME</code> and <code>GRADLE_PLUGIN_REPOSITORY_PASSWORD</code> can be used when the plugin repository requires authentication.</p> <pre><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Setup Gradle to generate and submit dependency graphs\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        dependency-graph: generate-and-submit\n    - name: Run a build, resolving the 'dependency-graph' plugin from the plugin portal proxy\n      run: ./gradlew build\n      env:\n        GRADLE_PLUGIN_REPOSITORY_URL: \"https://gradle-plugins-proxy.mycorp.com\"\n\n        # Set the following variables if your custom plugin repository requires authentication\n        # GRADLE_PLUGIN_REPOSITORY_USERNAME: \"username\"\n        # GRADLE_PLUGIN_REPOSITORY_PASSWORD: ${secrets.MY_REPOSITORY_PASSWORD}\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#choosing-which-gradle-invocations-will-generate-a-dependency-graph","title":"Choosing which Gradle invocations will generate a dependency graph","text":"<p>Once you enable the dependency graph support for a workflow job (via the <code>dependency-graph</code> parameter), dependencies will be collected and reported for all subsequent Gradle invocations. If you have a Gradle build step that you want to exclude from dependency graph generation, you can set the <code>GITHUB_DEPENDENCY_GRAPH_ENABLED</code> environment variable to <code>false</code>.</p> <pre><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-java@v4\n      with:\n        distribution: temurin\n        java-version: 17\n\n    - name: Setup Gradle to generate and submit dependency graphs\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        dependency-graph: generate-and-submit\n    - name: Build the app, generating a graph of dependencies required\n      run: ./gradlew :my-app:assemble\n    - name: Run all checks, disabling dependency graph generation\n      run: ./gradlew check\n      env:\n        GITHUB_DEPENDENCY_GRAPH_ENABLED: false\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#filtering-which-gradle-configurations-contribute-to-the-dependency-graph","title":"Filtering which Gradle Configurations contribute to the dependency graph","text":"<p>If you do not want the dependency graph to include every dependency configuration in every project in your build, you can limit the dependency extraction to a subset of these.</p> <p>See the documentation for dependency-submission and the GitHub Dependency Graph Gradle Plugin for details.</p>"},{"location":"github-actions/docs/setup-gradle/#gradle-version-compatibility","title":"Gradle version compatibility","text":"<p>Dependency-graph generation is compatible with most versions of Gradle &gt;= <code>5.2</code>, and is tested regularly against Gradle versions <code>5.2.1</code>, <code>5.6.4</code>, <code>6.0.1</code>, <code>6.9.4</code>, <code>7.1.1</code> and <code>7.6.3</code>, as well as all patched versions of Gradle 8.x.</p> <p>A known exception to this is that Gradle <code>7.0</code>, <code>7.0.1</code>, and <code>7.0.2</code> are not supported.</p> <p>See here for complete compatibility information.</p>"},{"location":"github-actions/docs/setup-gradle/#reducing-storage-costs-for-saved-dependency-graph-artifacts","title":"Reducing storage costs for saved dependency graph artifacts","text":"<p>When <code>generate</code> or <code>generate-and-submit</code> is used with the action, the dependency graph that is generated is stored as a workflow artifact. By default, these artifacts are retained for 30 days (or as configured for the repository). To reduce storage costs for these artifacts, you can set the <code>artifact-retention-days</code> value to a lower number.</p> <pre><code>    - name: Generate dependency graph, but only retain artifact for one day\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        dependency-graph: generate\n        artifact-retention-days: 1\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#develocity-build-scan-integration","title":"Develocity Build Scan\u00ae integration","text":"<p>Publishing a Develocity Build Scan can be very helpful for Gradle builds run on GitHub Actions. Each Build Scan provides a detailed report of the execution of the build, including which tasks were executed and the results of any test execution.</p> <p>The <code>setup-gradle</code> plugin provides a number of features to enable and enhance publishing Build Scans\u00ae to a Develocity instance.</p>"},{"location":"github-actions/docs/setup-gradle/#publishing-to-scansgradlecom","title":"Publishing to scans.gradle.com","text":"<p>If you don't have a a private Develocity instance, you can easily publish Build Scans to the  free, public Develocity instance (https://scans.gradle.com).</p> <p>To publish to https://scans.gradle.com, you must specify in your workflow that you accept the Gradle Terms of Use.</p> <pre><code>    - name: Setup Gradle to publish build scans\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        build-scan-publish: true\n        build-scan-terms-of-use-url: \"https://gradle.com/terms-of-service\"\n        build-scan-terms-of-use-agree: \"yes\"\n\n    - name: Run a Gradle build - a build scan will be published automatically\n      run: ./gradlew build\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#managing-develocity-access-keys","title":"Managing Develocity access keys","text":"<p>Develocity access keys are long-lived, creating risks if they are leaked. To mitigate this risk this,  the <code>setup-gradle</code> action can automatically attempt to obtain a short-lived access token to use when authenticating with Develocity.  The short-lived access token will then be used wherever a Develocity access key is required.</p> <pre><code>    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        develocity-access-key: ${{ secrets.MY_DEVELOCITY_ACCESS_KEY }} # Long-lived access key, visiblility is restricted to this step.\n\n    # Subsequent steps will automatically use a short-lived access token to authenticate with Develocity\n    - name: Run a Gradle build that is configured to publish to Develocity.\n      run: ./gradlew build\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#increasing-the-expiry-time-for-develocity-access-tokens","title":"Increasing the expiry time for Develocity access tokens","text":"<p>By default, a short-lived Develocity access token will be valid for 2 hours from the time it is generated. If your workflows take longer than 2 hours to complete, you may see failure to publish Build Scans due to access token expiry.</p> <p>To avoid this, use the <code>develocity-token-expiry</code> parameter to specify a different token expiry in hours.</p> <pre><code>    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        develocity-access-key: ${{ secrets.MY_DEVELOCITY_ACCESS_KEY }}\n        develocity-token-expiry: 8 # The number of hours that the access token should remain valid (max 24).\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#develocity-access-key-supplied-as-environment-variable","title":"Develocity access key supplied as environment variable","text":"<p>The preferred mechanism is to supply the long-lived Develocity access key directly to <code>setup-gradle</code> via  the <code>develocity-access-key</code> input variable. However, the action will also detect an access key configured as an environment variable, such as <code>DEVELOCITY_ACCESS_KEY</code> or <code>GRADLE_ENTERPRISE_ACCESS_KEY</code>. In this case, the environment variable value will be replaced by  a short-lived access token, thus hiding the long-lived access key from subsequent steps.</p> <pre><code>env:\n  DEVELOCITY_ACCESS_KEY: ${{ secrets.MY_DEVELOCITY_ACCESS_KEY }}\n\njobs:\n  build-with-gradle:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n\n    # The build will automatically use a short-lived access token to authenticate with Develocity\n    - name: Run a Gradle build that is configured to publish to Develocity.\n      run: ./gradlew build\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#failure-to-obtain-a-short-lived-access-token","title":"Failure to obtain a short-lived access token","text":"<p>If a short-lived token cannot be retrieved (for example, if the Develocity server version is lower than <code>2024.1</code>):  - If the access key is provided via <code>develocity-access-key</code>, then no access token is set and authentication with Develocity will not succeed.  - If the access key is provided via an environment variable, a warning will be logged and the environment variable will be left as-is.     This can result in long-lived access keys being unintentionally exposed to other workflow steps. For more information on short-lived tokens, see Develocity API documentation.</p>"},{"location":"github-actions/docs/setup-gradle/#develocity-plugin-injection","title":"Develocity plugin injection","text":"<p>The <code>setup-gradle</code> action provides support for transparently injecting and configuring the Develocity Gradle plugin into any Gradle build,  without any modification to the project sources. This allows Build Scans to be published for a repository without any changes to the project sources.</p> <p>Develocity injection is achieved via an init-script installed into Gradle User Home, which is enabled and parameterized via environment variables.</p> <p>The same auto-injection behavior is available for the Common Custom User Data Gradle plugin, which enriches any build scans published with additional useful information.</p>"},{"location":"github-actions/docs/setup-gradle/#enabling-develocity-injection","title":"Enabling Develocity injection","text":"<p>To enable Develocity injection for your build, you must provide the required configuration via inputs.</p> <p>Here's a minimal example:</p> <pre><code>    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        develocity-injection-enabled: true\n        develocity-url: https://develocity.your-server.com\n        develocity-plugin-version: 3.17.5\n\n    - name: Run a Gradle build with Develocity injection enabled\n      run: ./gradlew build\n</code></pre> <p>This configuration will automatically apply <code>v3.18.2</code> of the Develocity Gradle plugin, and publish build scans to https://develocity.your-server.com.</p> <p>This example assumes that the <code>develocity.your-server.com</code> server allows anonymous publishing of build scans. In the likely scenario that your Develocity server requires authentication, you will also need to pass a valid Develocity access key taken from a secret:</p> <pre><code>    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n      with:\n        develocity-access-key: ${{ secrets.MY_DEVELOCITY_ACCESS_KEY }}\n\n    - name: Run a Gradle build with Develocity injection enabled\n      run: ./gradlew build\n      env:\n        DEVELOCITY_INJECTION_ENABLED: true\n        DEVELOCITY_URL: https://develocity.your-server.com\n        DEVELOCITY_PLUGIN_VERSION: 3.17\n</code></pre> <p>This access key will be used during the action execution to get a short-lived token and set it to the DEVELOCITY_ACCESS_KEY environment variable.</p>"},{"location":"github-actions/docs/setup-gradle/#configuring-develocity-injection","title":"Configuring Develocity injection","text":"<p>The <code>init-script</code> supports several additional configuration parameters that you may find useful. All configuration options (required and optional) are detailed below:</p> Variable Required Description develocity-injection-enabled enables Develocity injection develocity-url the URL of the Develocity server develocity-allow-untrusted-server allow communication with an untrusted server; set to true if your Develocity instance is using a self-signed certificate develocity-capture-file-fingerprints enables capturing the paths and content hashes of each individual input file develocity-enforce-url enforce the configured Develocity URL over a URL configured in the project's build; set to true to enforce publication of build scans to the configured Develocity URL develocity-plugin-version the version of the Develocity Gradle plugin to apply develocity-ccud-plugin-version the version of the Common Custom User Data Gradle plugin to apply, if any gradle-plugin-repository-url the URL of the repository to use when resolving the Develocity and CCUD plugins; the Gradle Plugin Portal is used by default gradle-plugin-repository-username the username for the repository URL to use when resolving the Develocity and CCUD plugins gradle-plugin-repository-password the password for the repository URL to use when resolving the Develocity and CCUD plugins; Consider using secrets to pass the value to this variable <p>The input parameters can be expressed as environment variables following the relationships outlined in the table below:</p> Input Environment Variable develocity-injection-enabled DEVELOCITY_INJECTION_ENABLED develocity-url DEVELOCITY_URL develocity-allow-untrusted-server DEVELOCITY_ALLOW_UNTRUSTED_SERVER develocity-capture-file-fingerprints DEVELOCITY_CAPTURE_FILE_FINGERPRINTS develocity-enforce-url DEVELOCITY_ENFORCE_URL develocity-plugin-version DEVELOCITY_PLUGIN_VERSION develocity-ccud-plugin-version DEVELOCITY_CCUD_PLUGIN_VERSION gradle-plugin-repository-url GRADLE_PLUGIN_REPOSITORY_URL gradle-plugin-repository-username GRADLE_PLUGIN_REPOSITORY_USERNAME gradle-plugin-repository-password GRADLE_PLUGIN_REPOSITORY_PASSWORD <p>Here's an example using the env vars:</p> <pre><code>    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n\n    - name: Run a Gradle build with Develocity injection enabled with environment variables\n      run: ./gradlew build\n      env:\n        DEVELOCITY_INJECTION_ENABLED: true\n        DEVELOCITY_URL: https://develocity.your-server.com\n        DEVELOCITY_ENFORCE_URL: true\n        DEVELOCITY_PLUGIN_VERSION: \"3.18.1\"\n        DEVELOCITY_CCUD_PLUGIN_VERSION: \"2.0.2\"\n</code></pre>"},{"location":"github-actions/docs/setup-gradle/#dependency-verification","title":"Dependency verification","text":"<p>Develocity injection, Build Scan publishing and Dependency Graph generation all work by applying external plugins to your build. If you project has dependency verification enabled,  then you'll need to update your verification metadata to trust these plugins.</p> <p>Each of the plugins is signed by Gradle, and you can simply add the following snippet to your <code>dependency-verificaton.xml</code> file:</p> <pre><code>&lt;trusted-keys&gt;\n   &lt;trusted-key id=\"7B79ADD11F8A779FE90FD3D0893A028475557671\"&gt;\n      &lt;trusting group=\"com.gradle\"/&gt;\n      &lt;trusting group=\"org.gradle\"/&gt;\n   &lt;/trusted-key&gt;\n&lt;/trusted-keys&gt;\n</code></pre>"},{"location":"github-actions/docs/wrapper-validation/","title":"Gradle Wrapper Validation Action","text":""},{"location":"github-actions/docs/wrapper-validation/#gradle-wrapper-validation-action","title":"Gradle Wrapper Validation Action","text":"<p>This action validates the checksums of all Gradle Wrapper JAR files present in the repository and fails if any unknown Gradle Wrapper JAR files are found.</p> <p>The action should be run in the root of the repository, as it will recursively search for any files named <code>gradle-wrapper.jar</code>.</p> <p>[!NOTE] Starting with v4 the <code>setup-gradle</code> action will automatically perform wrapper validation on each execution.</p> <p>If you are using <code>setup-gradle</code> in your workflows, it is unlikely that you will need to use the <code>wrapper-validation</code> action.</p>"},{"location":"github-actions/docs/wrapper-validation/#the-gradle-wrapper-problem-in-open-source","title":"The Gradle Wrapper Problem in Open Source","text":"<p>The <code>gradle-wrapper.jar</code> is a binary blob of executable code that is checked into nearly 2.8 Million GitHub Repositories.</p> <p>Searching across GitHub you can find many pull requests (PRs) with helpful titles like 'Update to Gradle xxx'. Many of these PRs are contributed by individuals outside of the organization maintaining the project.</p> <p>Many maintainers are incredibly grateful for these kinds of contributions as it takes an item off of their backlog. We assume that most maintainers do not consider the security implications of accepting the Gradle Wrapper binary from external contributors. There is a certain amount of blind trust open source maintainers have. Further compounding the issue is that maintainers are most often greeted in these PRs with a diff to the <code>gradle-wrapper.jar</code> that looks like this.</p> <p></p> <p>A fairly simple social engineering supply chain attack against open source would be contribute a helpful \u201cUpdated to Gradle xxx\u201d PR that contains malicious code hidden inside this binary JAR. A malicious <code>gradle-wrapper.jar</code> could execute, download, or install arbitrary code while otherwise behaving like a completely normal <code>gradle-wrapper.jar</code>.</p>"},{"location":"github-actions/docs/wrapper-validation/#solution","title":"Solution","text":"<p>We have created a simple GitHub Action that can be applied to any GitHub repository. This GitHub Action will do one simple task: verify that any and all <code>gradle-wrapper.jar</code> files in the repository match the SHA-256 checksums of any of our official releases.</p> <p>If any are found that do not match the SHA-256 checksums of our official releases, the action will fail.</p> <p>Additionally, the action will find and SHA-256 hash all homoglyph variants of files named <code>gradle-wrapper.jar</code>, for example a file named <code>gradl\u0435-wrapper.jar</code> (which uses a Cyrillic <code>\u0435</code> instead of <code>e</code>). The goal is to prevent homoglyph attacks which may be very difficult to spot in a GitHub diff. We created an example Homoglyph attack PR here.</p>"},{"location":"github-actions/docs/wrapper-validation/#usage","title":"Usage","text":""},{"location":"github-actions/docs/wrapper-validation/#add-to-an-existing-workflow","title":"Add to an existing Workflow","text":"<p>Simply add this action to your workflow after having checked out your source tree and before running any Gradle build:</p> <pre><code>uses: gradle/actions/wrapper-validation@v4\n</code></pre> <p>This action step should precede any step using <code>gradle/gradle-build-action</code> or <code>gradle/actions/setup-gradle</code>.</p>"},{"location":"github-actions/docs/wrapper-validation/#add-a-new-dedicated-workflow","title":"Add a new dedicated Workflow","text":"<p>Here's a sample complete workflow you can add to your repositories:</p> <p><code>.github/workflows/gradle-wrapper-validation.yml</code> </p><pre><code>name: \"Validate Gradle Wrapper\"\n\non:\n  push:\n  pull_request:\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: gradle/actions/wrapper-validation@v4\n</code></pre>"},{"location":"github-actions/docs/wrapper-validation/#contributing-to-an-external-github-repository","title":"Contributing to an external GitHub Repository","text":"<p>Since GitHub Actions are completely free for open source projects and are automatically enabled on almost all projects, adding this check to a project's build is as simple as contributing a PR. Enabling the check requires no overhead on behalf of the project maintainer beyond merging the action.</p> <p>You can add this action to your favorite Gradle based project without checking out their source locally via the GitHub Web UI thanks to the 'Create new file' button.</p> <p></p> <p>Simply add a new file named <code>.github/workflows/gradle-wrapper-validation.yml</code> with the contents mentioned above.</p> <p>We recommend the message commit contents of:  - Title: <code>Official Gradle Wrapper Validation Action</code>  - Body (at minimum): <code>See: https://github.com/gradle/actions/wrapper-validation</code></p> <p>From there, you can easily follow the rest of the prompts to create a Pull Request against the project.</p>"},{"location":"github-actions/docs/wrapper-validation/#validation-failures","title":"Validation Failures","text":"<p>A wrapper jar can fail validation for a few reasons: 1. The wrapper is from a snapshot build of Gradle (nightly or release nightly) and you have not set <code>allow-snapshots</code>    or <code>allow-snapshot-wrappers</code> to <code>true</code>. 2. The wrapper jar is from a version of Gradle with an unverifiable wrapper jar (see below). 3. The wrapper jar was not published by Gradle, and could be compromised.</p> <p>If this GitHub action fails because a <code>gradle-wrapper.jar</code> was not published by Gradle, we highly recommend that you reach out to us at security@gradle.com.</p>"},{"location":"github-actions/docs/wrapper-validation/#unverifiable-wrapper-jars","title":"Unverifiable Wrapper Jars","text":"<p>Wrapper Jars generated by Gradle versions <code>3.3</code> to <code>4.0</code> are not verifiable because those files were dynamically generated by Gradle in a non-reproducible way. It's not possible to verify the <code>gradle-wrapper.jar</code> for those versions are legitimate using a hash comparison. If you have a validation failure, you should try to determine if the <code>gradle-wrapper.jar</code> was generated by one of these versions before running the build.</p> <ul> <li>If the Gradle version in <code>gradle-wrapper.properties</code> is outside of this range, you can regenerate the <code>gradle-wrapper.jar</code> by running <code>./gradlew wrapper</code>. This will generate a new, verifiable wrapper jar.</li> <li>If you need to run your build with a version of Gradle between 3.3 and 4.0, you can use a newer version of Gradle to generate the <code>gradle-wrapper.jar</code>.</li> </ul>"},{"location":"github-actions/docs/wrapper-validation/#resources","title":"Resources","text":"<p>To learn more about verifying the Gradle Wrapper JAR locally, see our guide on the topic.</p>"},{"location":"github-actions/setup-gradle/","title":"Index","text":""},{"location":"github-actions/setup-gradle/#the-setup-gradle-action","title":"The <code>setup-gradle</code> action","text":"<p>The <code>setup-gradle</code> action can be used to configure Gradle for optimal execution on any platform supported by GitHub Actions.</p> <p>This replaces the previous <code>gradle/gradle-build-action</code>, which now delegates to this implementation.</p> <p>The recommended way to execute any Gradle build is with the help of the Gradle Wrapper, and the examples assume that the Gradle Wrapper has been configured for the project. See this example if your project doesn't use the Gradle Wrapper.</p>"},{"location":"github-actions/setup-gradle/#example-usage","title":"Example usage","text":"<pre><code>name: Build\n\non:\n  push:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout sources\n      uses: actions/checkout@v4\n    - name: Setup Java\n      uses: actions/setup-java@v4\n      with:\n        distribution: 'temurin'\n        java-version: 17\n    - name: Setup Gradle\n      uses: gradle/actions/setup-gradle@v4\n    - name: Build with Gradle\n      run: ./gradlew build\n</code></pre> <p>See the full action documentation for more advanced usage scenarios.</p>"},{"location":"github-actions/wrapper-validation/","title":"Index","text":""},{"location":"github-actions/wrapper-validation/#the-wrapper-validation-action","title":"The <code>wrapper-validation</code> action","text":"<p>The <code>wrapper-validation</code> action validates the checksums of all Gradle Wrapper JAR files present in the repository and fails if any unknown Gradle Wrapper JAR files are found.</p> <p>The action should be run in the root of the repository, as it will recursively search for any files named <code>gradle-wrapper.jar</code>.</p> <p>[!NOTE] Starting with v4 the <code>setup-gradle</code> action will automatically perform wrapper validation on each execution.</p> <p>If you are using <code>setup-gradle</code> in your workflows, it is unlikely that you will need to use the <code>wrapper-validation</code> action.</p>"},{"location":"github-actions/wrapper-validation/#example-workflow","title":"Example workflow","text":"<pre><code>name: \"Validate Gradle Wrapper\"\n\non:\n  push:\n  pull_request:\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: gradle/actions/wrapper-validation@v4\n</code></pre> <p>See the full action documentation for more advanced usage scenarios.</p>"},{"location":"cookbook/docs/CONTRIBUTING/","title":"Gradle Cookbook","text":""},{"location":"cookbook/docs/CONTRIBUTING/#contributing-to-the-gradle-cookbook","title":"Contributing to the Gradle Cookbook","text":"<p>The Gradle Cookbook is under active development. Any contributions are welcome!</p>"},{"location":"cookbook/docs/CONTRIBUTING/#discuss","title":"Discuss","text":"<ul> <li><code>#docs</code> on the Gradle Community Slack</li> <li>GitHub Issues</li> </ul>"},{"location":"cookbook/docs/CONTRIBUTING/#development-environment","title":"Development Environment","text":"<p>Follow this documentation for the community site.</p>"},{"location":"cookbook/docs/CONTRIBUTING/#howtos","title":"HOWTOs","text":""},{"location":"cookbook/docs/CONTRIBUTING/#editing-and-adding-pages","title":"Editing and Adding Pages","text":"<p>A few tips:</p> <ul> <li>All the pages on this site are written in Markdown.</li> <li>If needed, we have various tools available, such as code templates and macros, and we can add more MkDocs plugins if necessary.</li> <li>The Table of Contents is currently located in mkdocs.yml. When adding new pages, please update the ToC to ensure they are discoverable.</li> </ul>"},{"location":"cookbook/docs/CONTRIBUTING/#adding-new-categories","title":"Adding New Categories","text":"<p>At the moment, we add categories based on consensus. If you plan to add a new major category, it's better to discuss it in advance.</p>"},{"location":"cookbook/docs/CONTRIBUTING/#references","title":"References","text":"<ul> <li>Main Contributor Guide - describes how to contribute to Gradle</li> </ul>"}]}