{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#declarative-gradle","title":"Declarative Gradle","text":"<p>At Gradle, part of our vision is to provide an elegant and extensible declarative build language that enables expressing any build in a clear and understandable way. We are working on Declarative Gradle to realize that part of the vision. This is an experimental project, stay tuned for updates!</p> <p>Learn more in the Declarative Gradle Announcement blog post and other publications.</p>"},{"location":"#status","title":"Status","text":"<p>Declarative Gradle is an experimental project, now in its second Early Access Preview (EAP). We invite you to try out Declarative Gradle, and to share feedback. The project includes the following experimental parts:</p> <ul> <li>Software Types as a declarative modeling framework</li> <li>Changes in Gradle to support DCL files</li> <li>Changes in Android Studio to support DCL files</li> <li>A Visual Studio Code extension to support DCL files</li> <li>An Eclipse IDE plugin to support DCL files</li> <li>Prototype plugins demonstrating software types and higher-level models</li> <li>A Gradle test client demonstrating features not yet implemented in the IDE</li> </ul> <p>Currently, no compatibility is guaranteed, and there is no commitment to the DSL syntax and available features. Learn how you can contribute in the Participate section.</p> <p>    Share Your Feedback </p>"},{"location":"#key-principles","title":"Key Principles","text":"<ul> <li>Ease of use for regular software developers.   Software developers should be able to define any software and build their projects   without the need to understand the details of how the build system works.</li> <li>Complete flexibility for build engineers and advanced users.   Experienced Gradle users should maintain the current level of flexibility and be able   to automate a wide range of software build automation scenarios with custom build logic.</li> <li>Excellent IDE integration.   Importing the software project to the IDE and interacting with it should be fast and fully reliable.   IDEs and other tools should be able to change the definition automatically or through UI reliably.</li> </ul> <p>We implement those principles through a declarative DSL which is a tailored tiny subset of the Kotlin language. The Declarative Gradle Announcement outlines more details about the project and the new Declarative DSL we are building.</p>"},{"location":"#a-glimpse","title":"A Glimpse","text":"<p>Here is a very brief example of what the Declarative Gradle syntax looks like for a Java application.</p> <pre><code>javaApplication {\n    javaVersion = 21\n    mainClass = \"com.example.App\"\n\n    dependencies {\n        implementation(project(\":java-util\"))\n        implementation(\"com.google.guava:guava:32.1.3-jre\")\n    }\n}\n</code></pre> <p>Looks familiar, right?</p> <p>As noted above, this syntax is experimental and might change during the experiment.</p>"},{"location":"#learn-more","title":"Learn More","text":"<p>The Declarative Gradle experiment is still in an early stage but is ready for your feedback!</p> <ul> <li>Getting Started - Learn how to try Declarative Gradle yourself.</li> <li>Documentation - Learn about the fundamentals behind Declarative Gradle.</li> <li>Participate - Learn how you can help shape the future of Declarative Gradle.</li> <li>Resources - Learn more from conferences, interviews, articles, etc.</li> </ul>"},{"location":"#share-feedback","title":"Share Feedback","text":"<p>We invite you to try out Declarative Gradle, and to share your feedback.</p>"},{"location":"docs/","title":"Documentation","text":""},{"location":"docs/#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>Reference</li> <li>Publications</li> </ul>"},{"location":"docs/CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"docs/CODE_OF_CONDUCT/#code-of-conduct","title":"Code of Conduct","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Gradle has adopted the Code of Conduct based on Contributor Covenant.</p> <p>All contributors to Declarative Gradle and Gradle as whole must follow the Code of Conduct outlined at https://gradle.org/conduct/.</p>"},{"location":"docs/CONTRIBUTING/","title":"Contributing","text":""},{"location":"docs/CONTRIBUTING/#contributing-to-declarative-gradle","title":"Contributing to Declarative Gradle","text":"<p>Declarative Gradle is an experimental project. Currently, it is not ready for tinkering or wide adoption. Discussion and sharing feedback is the recommended way of participation at the moment.</p>"},{"location":"docs/CONTRIBUTING/#share-feedback","title":"Share Feedback","text":"<p>While the project is in early stages, initial feedback on the DSL, early demos, features and use-cases will be appreciated!</p> <ul> <li>Fill out the Feedback Form</li> <li><code>#declarative-gradle</code> channel on the Gradle Community Slack</li> </ul>"},{"location":"docs/CONTRIBUTING/#adopting-declarative-gradle-in-your-projects","title":"Adopting Declarative Gradle in your projects","text":"<p>We do not consider Declarative Gradle is ready for wide adoption, because there are upcoming breaking changes.</p>"},{"location":"docs/CONTRIBUTING/#adapting-gradle-plugins","title":"Adapting Gradle Plugins","text":"<p>We advise against adapting your plugins at this stage because we plan many breaking changes.</p>"},{"location":"docs/CONTRIBUTING/#improving-documentation","title":"Improving Documentation","text":"<p>At the moment, the documentation is implemented in Markdown as a part of this repository. It is deployed as a Material for MkDocs subsite, similar to other new community resources. Later, it will be integrated into the main Gradle Build Tool website.</p> <p>In particular, we want to improve the guidelines based on your experiences. If you experiment with Declarative Gradle in your projects and wish to reference them, it is more than welcome, too.</p> <p>Any patches are welcome. Just submit a pull request! To help with that, we implemented a Dev Container for the documentation and a sub-site configuration for Declarative Gradle. To have a live documentation sub-site:</p> <ol> <li>Install the Dev Containers plugin in your IDE (VS Code or IntelliJ Platform)</li> <li>Click on the Re-open in the DEv Container button</li> <li>Run <code>mkdocs serve</code></li> </ol>"},{"location":"docs/EAP/","title":"Declarative Gradle - Early Access Preview","text":""},{"location":"docs/EAP/#declarative-gradle-early-access-preview","title":"Declarative Gradle - Early Access Preview","text":"<p>Info</p> <p>In July 2024, we announced the first early access preview (EAP) of Declarative Gradle. See this blogpost for the current status.</p>"},{"location":"docs/EAP2/","title":"Declarative Gradle - November 2024 Update","text":""},{"location":"docs/EAP2/#declarative-gradle-november-2024-update","title":"Declarative Gradle - November 2024 Update","text":"<p>Info</p> <p>In November 2024, we announced the second early access preview (EAP) of Declarative Gradle. See this blogpost for the current status.</p>"},{"location":"docs/ROADMAP/","title":"Roadmap","text":""},{"location":"docs/ROADMAP/#declarative-gradle-roadmap","title":"Declarative Gradle Roadmap","text":"<p>Declarative Gradle is an experimental project under active development. Below, you can see the key milestones we anticipate.</p> <p>Warn</p> <p>A few words of caution from our lawyers \ud83d\ude09</p> <p>The information contained in this Declarative Gradle Roadmap (the \"Roadmap\") is intended to outline our general product direction, which is subject to change at any time. The content provided in this Roadmap is provided for informational purposes only and is not a commitment, promise or legal obligation to deliver any material, code, or functionality and should not be relied upon in making purchasing or other decisions. The development, release and timing of any features or functionality described in this Roadmap remains at the sole discretion of Gradle, Inc. Product capabilities, timeframes and features are subject to change and should not be viewed as commitments.</p> Milestone Date First Early Access Preview (EAP) \u2705 July 2024 Second Early Access Preview (EAP 2) \u2705 November 2024 Third Early Access Preview (EAP 3) \ud83c\udfd7\ufe0f February 2024 Incubating Software Types and DCL \u23f3 2025 Stable Software Types and DCL \u23f3 2026 <p>The Gradle feature lifecycle is documented in the user manual.</p> <p>To discuss the roadmap and the related initiatives, use the <code>#declarative-gradle</code> channel on the Gradle Community Slack</p>"},{"location":"docs/ROADMAP/#first-early-access-preview-eap","title":"First Early Access Preview (EAP)","text":"<ul> <li>July 2024</li> <li>Early feedback from IDE vendors and plugin integrators</li> <li>Early feedback from software developers and build engineers from the community</li> <li>Demonstrating end to end workflows with Now In Android sample and other prototypes<ul> <li>Declarative Configuration Language (DCL) preview</li> <li>Software Types support preview</li> <li>Android Studio DCL support preview</li> <li>Toolability demonstrations (IDE integration, mutations)</li> </ul> </li> </ul>"},{"location":"docs/ROADMAP/#second-early-access-preview-eap","title":"Second Early Access Preview (EAP)","text":"<ul> <li>November 2024</li> <li>Official Android Software Type Preview</li> <li>New DCL Language Features<ul> <li>Enum properties</li> <li>Named domain object containers</li> </ul> </li> <li>Configuring Software Types from Kotlin DSL</li> <li>Prototype Plugins for C++ and Swift</li> <li>Support for VS Code and Eclipse IDE</li> <li>Generating Declarative Builds with <code>gradle init</code></li> </ul>"},{"location":"docs/ROADMAP/#third-early-access-preview-eap","title":"Third Early Access Preview (EAP)","text":"<ul> <li>February 2025</li> <li>Declarative Gradle can be used by early adopters for simple projects<ul> <li>Add support for testing to our prototype plugins</li> </ul> </li> <li>Validating the Software Types approach for Composability and Extensibility<ul> <li>Supporting new software features that are not part of the base software type</li> <li>Adding/configuring code quality checks</li> <li>Adding/configuring source-generation/bytecode-manipulation</li> </ul> </li> <li>More DCL features to support the official Android Software Type<ul> <li>File and directory properties</li> <li>Multi-valued properties (Lists, Maps)</li> <li>Container defaults</li> </ul> </li> <li>Discovery work on the migration of existing builds</li> </ul>"},{"location":"docs/ROADMAP/#incubating-software-types-and-dcl","title":"Incubating Software Types and DCL","text":"<ul> <li>2025</li> <li>Software Types APIs are released as Incubating<ul> <li>Software Types can be configured from both Kotlin DSL and Groovy DSL</li> <li>Core JVM Plugins expose Software Types</li> </ul> </li> <li>DCL Language and Tooling APIs are released as Incubating<ul> <li>More language features to support key use cases (version catalogs, polymorphic containers etc.)</li> <li>Built-in opinionated formatter/linter (cli &amp; ide)</li> </ul> </li> <li>Backwards compatibility concerns are addressed<ul> <li>Dealing with different versions of software types over time</li> <li>Dealing with changes to DCL language over time</li> <li>Dealing with changes to DCL tooling libraries over time</li> </ul> </li> <li>IDE language support is enhanced<ul> <li>IntelliJ IDEA and Android Studio ship with DCL support</li> <li>Language Server and associated IDE plugins are published</li> <li>Better assistance by IDE (e.g. completion for values, refactorings)</li> </ul> </li> </ul>"},{"location":"docs/ROADMAP/#stable-software-types-and-dcl","title":"Stable Software Types and DCL","text":"<ul> <li>2026</li> <li>Software Types are promoted to Stable</li> <li>DCL Language and Tooling APIs are promoted to Stable</li> </ul>"},{"location":"docs/feedback/","title":"Share Feedback","text":""},{"location":"docs/feedback/#declarative-gradle-share-feedback","title":"Declarative Gradle - Share Feedback","text":"<p>While Declarative Gradle is in early stages, you can explore the project samples and some of the features. Check out the Getting Started Guide tfor the pointer. Initial feedback on the DSL, early demos, features and use-cases will be appreciated!</p>"},{"location":"docs/feedback/#feedback-form","title":"Feedback Form","text":"<p>If the form below does not load, use this link</p> Loading\u2026"},{"location":"docs/feedback/#other-feedback-channels","title":"Other Feedback Channels","text":"<ul> <li><code>#declarative-gradle</code> channel on the Gradle Community Slack</li> </ul>"},{"location":"docs/getting-started/","title":"Overview","text":""},{"location":"docs/getting-started/#getting-started-with-declarative-gradle","title":"Getting Started with Declarative Gradle","text":"<p>In our first announcement, we announced a new experimental project called Declarative Gradle. That post introduced our ideas for a developer-first software definition and how we planned to fulfill our vision for a declarative build language for Gradle.</p> <p>This was followed by the first Early Access Preview release in July 2024, accompanied by the First Look at Declarative Gradle blog post. It introduced a configuration model called Software Types, a new Declarative Configuration Language (DCL), and demonstrated the potential for tooling improvements and better IDE support.</p> <p>Since then, we've been working hard on several fronts. In November 2024, we announced the second Early Access Preview of Declarative Gradle. As part of this second preview, we published several project samples that are ready for feedback. These include Java, Kotlin, and Android application samples and a port of the popular Now in Android application.</p> <p>Info</p> <p>With the second EAP, we would like you to try out what we have built so far.</p> <p>Declarative Gradle is ready for trying out our provided sample projects for Java, Kotlin and Android applications.</p> <p>Declarative Gradle is not ready for adoption by plugin authors, build engineers or software engineers.</p> <ol> <li>Follow our setup instructions</li> <li>Pick one or more of our samples</li> <li>Try out the Declarative Gradle features</li> <li>Provide us feedback</li> </ol>"},{"location":"docs/getting-started/features/","title":"Features","text":""},{"location":"docs/getting-started/features/#features","title":"Features","text":"<p>Tip</p> <p>Check out the features below with one of our samples. These features are guaranteed to work with them out of the box.</p> <p>Provide us feedback.</p>"},{"location":"docs/getting-started/features/#declarative-dsl-in-ide","title":"Declarative DSL in IDE","text":""},{"location":"docs/getting-started/features/#android-studio","title":"Android Studio","text":"<p>This video demonstrates the support for the Declarative Configuration Language (DCL) available in Android Studio: syntax highlighting, semantic analysis and code completion. Thanks to the strictness of DCL, the IDE assistance is exempt of noise. Code completion only suggests the properties and nested blocks available in the current scope.</p> <p>This video demonstrates the enhanced support for DCL in Android Studio, covering enum properties and named domain object containers.</p>"},{"location":"docs/getting-started/features/#visual-studio-code","title":"Visual Studio Code","text":"<p>This video demonstrates the support for the Declarative Configuration Language (DCL) available in Visual Studio Code: syntax highlighting, semantic analysis and code completion. Thanks to the strictness of DCL, the IDE assistance is exempt of noise. Code completion only suggests the properties and nested blocks available in the current scope. Moreover, semantic mutations, or refactorings, are available directly in the editor.</p>"},{"location":"docs/getting-started/features/#eclipse-ide","title":"Eclipse IDE","text":"<p>This video demonstrates the support for the Declarative Configuration Language (DCL) available in the Eclipse IDE: syntax highlighting, semantic analysis and code completion. Thanks to the strictness of DCL, the IDE assistance is exempt of noise. Code completion only suggests the properties and nested blocks available in the current scope.</p>"},{"location":"docs/getting-started/features/#two-way-tooling","title":"Two-Way Tooling","text":"<p>This video shows the Gradle Client application and demonstrates the use of the Declarative Configuration Language (DCL) tooling libraries to inspect the model of a configured build. The configuration of projects is overlayed on top of the defaults declared in settings. Highlighting configured values works in a two-way manner ; from the DCL files to the configured model and vice-versa.</p>"},{"location":"docs/getting-started/features/#mutations","title":"Mutations","text":"<p>This video shows the Gradle Client application and demonstrates the use of the mutation framework from the Declarative Configuration Language (DCL) tooling libraries. Available mutations, or refactorings, are shown on the configured model pane where they are applicable. For example, the Add a dependency mutation is available on the <code>dependencies {}</code> block. When a mutation is triggered, the Gradle Client user interface asks for the parameters of the mutation and the mutation is applied, changing the DCL files. This demonstration also shows that mutations can be applied on DCL files that contain errors.</p>"},{"location":"docs/getting-started/samples/","title":"Samples","text":""},{"location":"docs/getting-started/samples/#samples","title":"Samples","text":"<p>Tip</p> <p>Make sure you followed the setup instructions fully before trying out a sample.</p> <p>All samples in this page can be used to demonstrate features made possible by Declarative Gradle.</p> <ul> <li>Generate a new build with <code>gradle init</code></li> <li>Java Application</li> <li>Kotlin Application</li> <li>Android Application</li> <li>Now In Android</li> <li>Bleeding edge prototypes</li> </ul> <p>After picking a sample, read about new Declarative Gradle features.</p> <p>Provide us feedback.</p>"},{"location":"docs/getting-started/samples/#java-application","title":"Java Application","text":"<p>A sample Java application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>javaApplication</code> Software Type defined in the <code>org.gradle.experimental.jvm-ecosystem</code> ecosystem plugin.</p> <p>Please follow the README available at gradle/declarative-samples-java-app to try this sample.</p>"},{"location":"docs/getting-started/samples/#kotlin-application","title":"Kotlin Application","text":"<p>A sample Kotlin application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>kotlinJvmApplication</code> Software Type defined in the <code>org.gradle.experimental.kmp-ecosystem</code> ecosystem plugin.</p> <p>Please follow the README available at gradle/declarative-samples-kotlin-app to try this sample.</p>"},{"location":"docs/getting-started/samples/#android-application","title":"Android Application","text":""},{"location":"docs/getting-started/samples/#using-the-official-android-software-types-preview","title":"Using the Official Android Software Types (Preview)","text":"<p>A sample Android application written in the Declarative Gradle DSL, using the official Android Software Types Preview <code>androidApp</code> and <code>androidLibrary</code> defined in the <code>com.android.ecosystem</code> ecosystem plugin.</p> <p>Please follow the README available at gradle/declarative-samples-agp-app to try this sample.</p>"},{"location":"docs/getting-started/samples/#using-prototype-declarative-plugins","title":"Using Prototype Declarative Plugins","text":"<p>A sample Android application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>androidApplication</code> Software Type defined in the <code>org.gradle.experimental.android-ecosystem</code> ecosystem plugin.</p> <p>Please follow the README available at gradle/declarative-samples-android-app to try this sample.</p>"},{"location":"docs/getting-started/samples/#now-in-android","title":"Now In Android","text":"<p>Now in Android is a fully functional Android app built entirely with Kotlin and Jetpack Compose from the Android team. We forked Now in Android and updated the build to work with Declarative Gradle. The prototype repository can be found in gradle/nowinandroid.</p> <p>Please follow the README to try this sample.</p>"},{"location":"docs/getting-started/samples/#bleeding-edge-prototypes","title":"Bleeding edge prototypes","text":"<p>If you want to go further you can take a look at some more projects for JVM, Android, KMP, Swift and C++ projects. These projects may use newer versions of Gradle or require additional manual setup, so you should try the other samples first.</p> <p>Please follow the README available in each directory linked below to try these samples.</p>"},{"location":"docs/getting-started/samples/#java","title":"Java","text":"<ul> <li>Java Application</li> <li>Java Library</li> <li>Java Application for multiple JVMs</li> <li>Java Library for multiple JVMs</li> </ul>"},{"location":"docs/getting-started/samples/#kotlin","title":"Kotlin","text":"<ul> <li>Kotlin JVM Application</li> <li>Kotlin JVM Library</li> <li>Kotlin Multiplatform Application</li> <li>Kotlin Multiplatform Library</li> </ul>"},{"location":"docs/getting-started/samples/#android","title":"Android","text":"<ul> <li>Android Application</li> <li>Android Library</li> </ul>"},{"location":"docs/getting-started/samples/#swift","title":"Swift","text":"<ul> <li>Swift Application</li> <li>Swift Library</li> </ul>"},{"location":"docs/getting-started/samples/#c","title":"C++","text":"<ul> <li>C++ Application</li> <li>C++ Library</li> </ul>"},{"location":"docs/getting-started/setup/","title":"Setup","text":""},{"location":"docs/getting-started/setup/#setup","title":"Setup","text":"<p>Declarative Gradle samples require nightly versions of Gradle and Android Studio. They all use the Gradle Wrapper to point to the right Gradle version, so you don't have to worry about installing a specific version of Gradle.</p> <p>To try out the samples and see all of the features, you need to install a few other components as described below:</p> <ul> <li>JDK</li> <li>IDE<ul> <li>Android Studio</li> <li>Visual Studio Code</li> <li>Eclipse IDE</li> </ul> </li> <li>Gradle Client</li> <li>Pick a sample</li> </ul>"},{"location":"docs/getting-started/setup/#jdk","title":"JDK","text":"<p>Make sure to use a JDK &gt;= 17 and that your <code>JAVA_HOME</code> points to it.</p> <p>You can use a JDK from any vendor. We recommend Eclipse Temurin\u2122 (OpenJDK).</p>"},{"location":"docs/getting-started/setup/#ide","title":"IDE","text":""},{"location":"docs/getting-started/setup/#android-studio","title":"Android Studio","text":"<p>Download and install a special Android Studio Nightly release. You can find the promoted nightly releases in this Google Drive folder for macOS (Apple Silicon and Intel), Windows and Linux. Pick the most recent one that matches your operating system.</p> <p>Declarative features are only available on particular nightly releases.</p> <p>Warn</p> <p>Note that on macOS, these special Android Studio releases require to be in <code>~/Applications</code>.</p>"},{"location":"docs/getting-started/setup/#enable-more-declarative-features-in-studio","title":"Enable more declarative features in Studio","text":"<p>While syntax highlighting of <code>.gradle.dcl</code> files works out of the box in Studio nightlies, other features require flags to be enabled.</p> <ol> <li>Open Tools -&gt; Internal Actions -&gt; Registry</li> <li>Search for the Declarative Gradle flags by typing <code>declarative</code></li> <li>Enable the <code>gradle.declarative.studio.support</code> and <code>gradle.declarative.ide.support</code> flags</li> <li>Restart the IDE</li> </ol>"},{"location":"docs/getting-started/setup/#visual-studio-code","title":"Visual Studio Code","text":"<p>Download the Declarative Gradle VSIX and install it in your Visual Studio Code.</p> <p>This extension was also tested in GitHub Codespace and should work in any Visual Studio Code derivative.</p>"},{"location":"docs/getting-started/setup/#eclipse-ide","title":"Eclipse IDE","text":"<p>TODO https://github.com/eclipse/buildship/blob/master/docs/user/DeclarativeGradle.md</p>"},{"location":"docs/getting-started/setup/#gradle-client","title":"Gradle Client","text":"<p>The Gradle Client is a standalone application used to demonstrate declarative features not yet implemented in the IDE.</p> <p>Download the latest release from the Gradle Client repository on GitHub and install it.</p> <p>The <code>DMG</code> file is for macOS, the <code>DEB</code> file is for Linux and the <code>MSI</code> file is for Windows.</p>"},{"location":"docs/getting-started/setup/#pick-a-sample","title":"Pick a sample","text":"<p>After you've installed everything, pick out a samples to try the Declarative Gradle features.</p>"},{"location":"docs/publications/","title":"Publications","text":""},{"location":"docs/publications/#declarative-gradle-publications","title":"Declarative Gradle. Publications","text":""},{"location":"docs/publications/#articles","title":"Articles","text":"<ul> <li>Declarative Gradle - November 2024 Update by Paul Merlin - November 2024</li> <li>Early Access Preview (EAP) Announcement by Sterling Greene - July 2024</li> <li>Project Announcement by Piotr Jagielski - November 2023 - Initial project announcement and the manifesto</li> <li>Declarative Gradle? Amper? What\u2019s going on?! by Siggi Gunnarsson, May 2024, fun code() magazine</li> </ul>"},{"location":"docs/publications/#news","title":"News","text":"<p>We publish monthly updates on Declarative Gradle as a part of the Gradle Build Tool Newslettter. Make sure to subscribe!</p>"},{"location":"docs/publications/#conference-presentations","title":"Conference Presentations","text":"<ul> <li>Droidcon NYC 2024 - Declarative Gradle on Android by Nelson Osacky and Inaki Villar - September 2024</li> <li>KotlinConf 2024 - Developer-first Gradle builds by Sterling Greene and Paul Merlin - May 2024</li> </ul>"},{"location":"docs/publications/#video-interviews","title":"Video Interviews","text":"<ul> <li>Declarative Gradle and Gradle History with Adam Murdoch - May 2024</li> <li>Declarative Gradle - Build Propulsion Lab with Paul Merlin - April 2024, Devoxx France</li> </ul>"},{"location":"docs/publications/2024-05-kotlinconf/","title":"KotlinConf 2024 - Developer-first Gradle builds","text":""},{"location":"docs/publications/2024-05-kotlinconf/#kotlinconf-2024-developer-first-gradle-builds","title":"KotlinConf 2024 - Developer-first Gradle builds","text":"<p>At Kotlinconf 2024 on May 25, Paul Merlin and Sterling Greene presented on Developer-first Gradle builds and the current status of Declarative Gradle.</p>"},{"location":"docs/publications/2024-05-kotlinconf/#abstract","title":"Abstract","text":"<p>In the ever-evolving landscape of software development, the efficiency of build systems plays a pivotal role in project success. Part of our vision for Gradle is to deliver an elegant and extensible declarative build language that allows developers to describe any kind of software in a clear and understandable way. Our current effort is described in https://blog.gradle.org/declarative-gradle.</p> <p>This session delves into the challenges faced by developers when understanding and maintaining complex build scripts and demonstrates an innovative approach that harnesses the expressiveness of Kotlin while imposing restrictions to enhance clarity and maintainability. Attendees will gain insights into the rationale behind adopting a declarative paradigm for build definition and the benefits it brings to project workflows.</p> <p>Key topics covered include:</p> <ul> <li>Declarative Build Principles: Understand the advantages of a declarative build language and its impact on project maintainability, readability, and collaboration.</li> <li>Expressive DSL: Explore the capabilities of the DSL and how it serves as a powerful tool for expressing build configuration concisely.</li> <li>Impact on projects: Explore case studies of projects that use a declarative build language, showcasing improvements in build performance, understanding, and maintenance.</li> </ul> <p>By attending this session, software developers and build engineers will leave with practical insights and knowledge about crafting a more maintainable, expressive, and declarative Gradle build definition.</p>"},{"location":"docs/publications/2024-05-kotlinconf/#references","title":"References","text":"<ul> <li>Video Recording</li> <li>Slides</li> <li>Slides (PDF)</li> </ul>"},{"location":"docs/publications/2024-05-kotlinconf/#slides","title":"Slides","text":""},{"location":"docs/publications/2024-09-droidcon-nyc/","title":"Droidcon NYC 2024 - Declarative Gradle on Android","text":""},{"location":"docs/publications/2024-09-droidcon-nyc/#droidcon-nyc-2024-declarative-gradle-on-android","title":"Droidcon NYC 2024 - Declarative Gradle on Android","text":"<p>At Droidcon 2024 on Sep 19, Nelson Osacky and Inaki Villar presented the current status of Declarative Gradle on Android.</p>"},{"location":"docs/publications/2024-09-droidcon-nyc/#abstract","title":"Abstract","text":"<p>Declarative Gradle is a project that targets better isolation of concern and expressing any build clearly and understandably. It is our key initiative towards improving the developer experience and maintainability of Gradle projects. Declarative Gradle will feature first class support for the Android ecosystem including AGP, KGP, and Android Studio integration.</p> <p>In this presentation, we will discuss the current state of Declarative Gradle for Android development. We will preview the proposed configuration language, examples of Android projects, and integration with Android Studio. We will discuss our future plans and the Declarative Gradle roadmap. We are seeking early feedback from Android software developers.</p>"},{"location":"docs/publications/2024-09-droidcon-nyc/#references","title":"References","text":"<ul> <li>Video Recording</li> </ul>"},{"location":"docs/reference/","title":"Overview","text":""},{"location":"docs/reference/#declarative-gradle-documentation","title":"Declarative Gradle - Documentation","text":"<ul> <li><code>gradle init</code> - generate new builds using software types and DCL files</li> <li>Software Features - configuration model used by software developers</li> <li>Roadmap - Declarative Gradle roadmap</li> </ul>"},{"location":"docs/reference/build-init/","title":"Generate new builds","text":""},{"location":"docs/reference/build-init/#generating-new-builds-with-gradle-init","title":"Generating new builds with <code>gradle init</code>","text":"<p>Gradle supports generating new builds using <code>gradle init</code>. </p> <p>To make it easier to try Declarative Gradle with new samples, our prototypes have changed <code>gradle init</code> to generate samples that use declarative configuration language (DCL) files and software types.</p> <p>An experimental system property has been added to Gradle to add new things that <code>gradle init</code> can generate. The value of the system property is a comma-separated list of plugins published to the Gradle Plugin Portal.</p> <p>Example: <code>gradle init -Dorg.gradle.buildinit.specs=&lt;plugin-id-1:version&gt;,&lt;plugin-id-2:version&gt;</code></p> <p>Tip</p> <p>This feature is only supported with nightlies of Gradle 8.12 created after October 24, 2024. </p> <p>If you have the correct version of Gradle, you'll be asked a new question:</p> <p>Additional project types were loaded.  Do you want to generate a project using a contributed project specification?</p> <p>Answer 'yes' (the default) to generate new Declarative Gradle builds.</p>"},{"location":"docs/reference/build-init/#supported-project-types","title":"Supported project types","text":""},{"location":"docs/reference/build-init/#android","title":"Android","text":"<p><code>gradle init -Dorg.gradle.buildinit.specs=org.gradle.experimental.android-ecosystem-init:0.1.32</code></p> <p>There are three build samples you can choose from.</p> <p>By default, this generates a project like gradle/declarative-samples-android-app.</p> <p>You can also generate a single Android application build with an empty Activity or basic Activity.</p>"},{"location":"docs/reference/build-init/#java","title":"Java","text":"<p><code>gradle init -Dorg.gradle.buildinit.specs=org.gradle.experimental.jvm-ecosystem-init:0.1.32</code></p> <p>This init sample asks no questions and generates a project using Java like gradle/declarative-samples-java-app.</p>"},{"location":"docs/reference/build-init/#kotlin","title":"Kotlin","text":"<p><code>gradle init -Dorg.gradle.buildinit.specs=org.gradle.experimental.kmp-ecosystem-init:0.1.32</code></p> <p>This init sample asks no questions and generates a project using Kotlin like gradle/declarative-samples-kotlin-app.</p>"},{"location":"docs/reference/software-features/","title":"Software Features","text":""},{"location":"docs/reference/software-features/#software-features","title":"Software Features","text":"<p>Software features are capabilities that can be added to a project.  They are optional and can be made available in a build by applying a plugin in the declarative settings file that registers the software feature in the build.  Once a feature is available, it can be used in a build by referencing the feature in the project's declarative build file.  If a project does not reference a feature, it will not be used in the build.</p> <p>For example, to make the software features associated with producing jvm software available in a build, the <code>jvm-ecosystem</code> plugin is applied in the declarative settings file:</p> <pre><code>plugins {\n    id(\"org.gradle.experimental.jvm-ecosystem\")\n}\n</code></pre> <p>Software features have three distinct components:</p>"},{"location":"docs/reference/software-features/#a-public-model","title":"A Public Model","text":"<p>This is the user-configurable model exposed in the declarative DSL.  Configuring the model object on the target is also the trigger for applying the feature's implementation.</p>"},{"location":"docs/reference/software-features/#a-target","title":"A Target","text":"<p>The target is the object that the software feature is applied to.  The public model is added as a configurable property of the target.</p>"},{"location":"docs/reference/software-features/#an-implementation","title":"An Implementation","text":"<p>The implementation is the build logic necessary to implement the capability the software feature provides.  This is a plugin class that modifies the software feature's target and/or model in some way.</p>"},{"location":"docs/reference/software-features/#software-types","title":"Software Types","text":"<p>The most fundamental type of software feature is a Software Type.  A Software Type is a collection of capabilities that are common to a particular type of software.  For example, an <code>androidLibrary</code> software type is a collection of capabilities that are common to Android libraries.  A <code>javaLibrary</code> software type is a collection of capabilities that are common to Java libraries.  Software types are used to define the type of software that a project produces and target the <code>Project</code> object of a project it is applied to.  They are applied by referencing the software type as a top-level block in the project's declarative build file.</p> <p>For example, to declare that a project produces a java library built for Java 11, the <code>javaLibrary</code> software type is applied to the project:</p> <pre><code>javaLibrary {\n    javaVersion = 11\n}\n</code></pre> <p>A project can have only one software type applied to it.</p> <p>In the future, additional types of software features will be added to Declarative Gradle to provide more capabilities to projects.  For instance, the ability to add additional capabilities to a software type in a composable way, or the ability to restrict the model of a software type to a subset of its capabilities.</p>"},{"location":"docs/reference/software-features/#shared-model-defaults","title":"Shared Model Defaults","text":"<p>Shared Model Defaults are collections of settings that are applied to all projects in a build that use a given software type.  They are shared across all projects in a build.  These are declared by referencing the software type in the <code>defaults</code> block in the declarative settings file.</p> <p>For example, to declare that all projects that produce Java libraries should produce a library built for Java 11, the <code>javaLibrary</code> software type is configured in <code>settings.gradle.dcl</code>:</p> <pre><code>defaults {\n    javaLibrary {\n        javaVersion = 11\n    }\n}\n</code></pre>"},{"location":"early-prototypes/","title":"Declarative Gradle - Early prototypes","text":""},{"location":"early-prototypes/#declarative-gradle-early-prototypes","title":"Declarative Gradle - Early prototypes","text":"<p>Here is a list of the early prototypes we created for Declarative Gradle. see the Unified Prototypes directory for more recent developments.</p> <ul> <li>Android</li> <li>Java projects</li> <li>Kotlin Multiplatform projects</li> <li>Settings</li> </ul>"},{"location":"early-prototypes/#disclaimer","title":"Disclaimer","text":"<p>All prototypes in this directory are experimental, mostly for syntax evaluation and initial feedback. They may compile or not. No compatibility or other commitment is implied.</p>"},{"location":"early-prototypes/android/","title":"Declarative Android-based projects","text":""},{"location":"early-prototypes/android/#declarative-android-based-projects","title":"Declarative Android-based projects","text":"<p>This explores ideas with a simpler DSL to configure applications and libraries written for Android.</p> <p>All configuration is moved under a new <code>androidApplication</code> block.</p>"},{"location":"early-prototypes/android/#example","title":"Example","text":"<p>Gradle needs to run with Java 17.</p> <p>Open the project in <code>android</code>.  The <code>testbed</code> subproject uses the new DSL.</p> <p>The new DSL demonstrates several ideas: - <code>dependencies {}</code> in the <code>androidApplication</code> block that are limited to only the scopes applicable to the application.  - <code>targets {}</code> for configuring specific Android variants - top-level properties backed by Providers (like <code>namespace</code>) - <code>sources {}</code> for configuring the location of source files</p>"},{"location":"early-prototypes/kotlin-multiplatform/","title":"Declarative Kotlin Multiplatform projects","text":""},{"location":"early-prototypes/kotlin-multiplatform/#declarative-kotlin-multiplatform-projects","title":"Declarative Kotlin Multiplatform projects","text":"<p>This explores how to use a simpler, more static DSL to configure applications and libraries written for KMP.</p> <p>All configuration is moved under a new <code>kmpApplication</code> block. This example only demonstrates an application, but the same ideas apply to libraries.</p>"},{"location":"early-prototypes/kotlin-multiplatform/#example","title":"Example","text":"<p>The <code>testbed</code> subproject uses the new DSL.</p> <p>The new DSL demonstrates several ideas: - <code>platforms</code> is a list property in the <code>kmpApplication</code> block that specifies the multiplatform targets built by this project. - Common top-level properties that apply to all targets (like the <code>languageVersion</code> of Kotlin used, and the whether or not to <code>publishSources</code> for the project) are backed by <code>Property</code> instances and available directly in the <code>kmpApplication</code> block. There is code in the <code>Greeter.kt</code> file in <code>commonMain</code> that requires Kotlin 1.9 to compile. - <code>dependencies {}</code> in the <code>kmpApplication</code> block allows for declaring common dependencies usable by all targets, in the same way the <code>commonMain</code> KMP sourceSet would.  - <code>targets {}</code> allows for configuring specific KMP platform variants. Static extension methods are provided for each platform (only <code>jvm</code> and <code>js</code> implemented so far) to allow for configuring platform-specific dependencies with IDE type assistance. - Publishing the project is configured to use a local Maven repo under <code>build/repo</code> using the <code>publishing</code> block provided by the <code>maven-publish</code> plugin, to demonstrate the results of publishing the project with and without sources.</p>"},{"location":"early-prototypes/kotlin-multiplatform/#goals","title":"Goals","text":"<ul> <li>This DSL should look and feel like a Gradle DSL, be similar to Java and Android builds, and be navigable by Gradle developers new to KMP.</li> <li>The <code>targets</code> block should be a container holding each platform, not merely a static extension.</li> <li>Extraneous blocks should be simplified or removed and their contents pulled up a level.</li> </ul>"},{"location":"early-prototypes/kotlin-multiplatform/#running-the-project","title":"Running the project","text":"<p>All tasks below should be executed from the <code>testbed</code> directory. Running the project requires running Gradle with Java 17.</p> <p>To run (on the JVM): </p><pre><code>  ./gradlew jvmRun -DmainClass=GreeterKt --quiet\n</code></pre> <p>To publish the project to <code>build/repo</code> (Can confirm presence of sources jars in the directory): </p><pre><code>  ./gradlew publishAllPublicationsToTestRepository\n</code></pre> <p>To run all tests (JVM and Browser-based JS tests): </p><pre><code>  ./gradlew allTests\n</code></pre>"},{"location":"early-prototypes/single-target/","title":"Declarative Java-based projects","text":""},{"location":"early-prototypes/single-target/#declarative-java-based-projects","title":"Declarative Java-based projects","text":"<p>This explores ideas with a simpler DSL to configure applications and libraries written with Java.</p> <p>Instead of using the top-level dependencies block or extensions, all configuration is moved under a new <code>javaApplication</code> and <code>javaLibrary</code> block.</p>"},{"location":"early-prototypes/single-target/#example","title":"Example","text":"<p>The example is generated with <code>gradle init</code>. It requires running Gradle with Java 17.</p> <p><code>./gradlew build</code> should compile and test the project.</p>"},{"location":"early-prototypes/single-target/#app","title":"App","text":"<p>Declares a few dependencies and the main class for a Java application.</p>"},{"location":"early-prototypes/single-target/#libraries-utilities-list","title":"Libraries utilities list","text":"<p>Declares a few dependencies for a Java library.</p>"},{"location":"early-prototypes/single-target/#conventions","title":"Conventions","text":"<p><code>javalibrary/build-logic/src/main/kotlin</code> Sets up some common conventions for a Java application and library.</p>"},{"location":"early-prototypes/workspace-settings/","title":"Declarative project structure","text":""},{"location":"early-prototypes/workspace-settings/#declarative-project-structure","title":"Declarative project structure","text":"<p>This implements the ideas described in the spec</p> <p>The spike implements new behavior and DSL as a settings plugin applied to some sample projects. </p> <p>Ideas that show promise will be copied into future prototypes or Gradle itself. </p>"},{"location":"early-prototypes/workspace-settings/#new-ideas","title":"New ideas","text":""},{"location":"early-prototypes/workspace-settings/#auto-detection","title":"Auto-detection","text":"<p>In simple project layouts, Gradle should be able to auto-detect all projects that need to be included.</p>"},{"location":"early-prototypes/workspace-settings/#physical-location-first","title":"Physical-location first","text":"<p>The existing APIs require users to specify a logical path that is interpretted as a physical path by convention.</p> <p>This DSL explores ideas to use the physical layout to include subprojects instead.</p>"},{"location":"early-prototypes/workspace-settings/#test-cases","title":"Test cases","text":"<p>These are common layouts we found in real projects.</p> <p>All of the test cases should be able to run on a recent version of Gradle. You can inspect the list of included projects by looking at <code>gradle projects</code>.</p>"},{"location":"early-prototypes/workspace-settings/#explicit-only","title":"explicit-only","text":"<p>In this example, all subprojects are explicitly included with a flat logical path and physical path.</p>"},{"location":"early-prototypes/workspace-settings/#logical-layout","title":"logical-layout","text":"<p>In this example, the logical path (<code>:myorg:app</code>) for the subproject is very different from its physical path.</p>"},{"location":"early-prototypes/workspace-settings/#platforms-subprojects","title":"platforms-subprojects","text":"<p>This example is close to Gradle's layout. Subprojects are automatically included from other directories than the root.</p>"},{"location":"early-prototypes/workspace-settings/#single-project","title":"single-project","text":"<p>This example only shows that the equivalent of <code>rootProject.name</code> is set outside the layout.</p>"},{"location":"early-prototypes/workspace-settings/#spring-boot-like","title":"spring-boot-like","text":"<p>This example follows a similar layout to Spring boot. There's a mix of subprojects that are found in subdirectories and under other projects.</p>"},{"location":"early-prototypes/workspace-settings/#subprojects-dir","title":"subprojects-dir","text":"<p>This example shows all subprojects being auto-discovered under a subdirectory (<code>subprojects/</code>).</p>"},{"location":"early-prototypes/workspace-settings/#top-level-projects","title":"top-level-projects","text":"<p>This example can auto-detect all subprojects with build files without any explicit configuration.</p>"},{"location":"unified-prototype/","title":"Declarative Gradle - Unified Plugin Prototypes","text":""},{"location":"unified-prototype/#declarative-gradle-unified-plugin-prototypes","title":"Declarative Gradle - Unified Plugin Prototypes","text":"<p>This directory of the <code>declarative-gradle</code> repository contains prototypes of plugins for JVM, Android, KMP and Swift projects built using \"unified\" plugins that all utilize a similar model and are implemented using the Declarative DSL.</p> <p>Currently, these different ecosystems still apply distinct plugins, but those plugins all share a common <code>plugin-common</code> dependency, which will gradually grow to contain more functionality.</p>"},{"location":"unified-prototype/#java","title":"Java","text":"<p>Sample Java projects live in the <code>testbed-java-library</code> and <code>testbed-java-application</code> directories.</p> <p>These samples show the definition of a simple Java application and library that target a single version of Java.</p> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew testbed-java-application:runAll\n</code></pre>"},{"location":"unified-prototype/#jvm","title":"JVM","text":"<p>Sample JVM projects live in the <code>testbed-jvm-library</code> and <code>testbed-jvm-application</code> directories.</p> <p>These samples show the definition of a simple Java application and library that are implemented using a mix of Java 11 and Java 17 source code.</p> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew testbed-jvm-application:runAll\n</code></pre>"},{"location":"unified-prototype/#kotlin-jvm","title":"Kotlin JVM","text":"<p>Sample Kotlin JVM projects live in the <code>testbed-kotlin-jvm-library</code> and <code>testbed-kotlin-jvm-application</code> directories.</p> <p>These samples show the definition of a simple Kotlin JVM application and library that target a single version of Kotlin and Java.</p> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew testbed-kotlin-jvm-application:runAll\n</code></pre>"},{"location":"unified-prototype/#kotlin-multiplatform","title":"Kotlin Multiplatform","text":"<p>The sample Kotlin Multiplatform projects live in the <code>testbed-kotlin-library</code> and <code>testbed-kotlin-application</code> directories.</p> <p>The <code>unified-prototype/plugin-kmp</code> plugin demonstrates creating extensions using the Declarative DSL, and loading the data from those extensions into the KMP project used by KGP.</p> <p>The sample project demonstrates setting properties, using a common dependencies block, and adding dependencies to specific targets.</p>"},{"location":"unified-prototype/#limitations","title":"Limitations","text":"<p>The KMP example is currently limited, and does not support any targets other than <code>nodeJs</code>, <code>jvm</code> and <code>macOsArm64</code>.</p>"},{"location":"unified-prototype/#running","title":"Running","text":"<p>To run the application, use:</p> <pre><code>../gradlew testbed-kotlin-application:runAll\n</code></pre>"},{"location":"unified-prototype/#building","title":"Building","text":"<p>From the <code>testbed-kotlin-application</code> directory, run <code>build</code> using the Gradle wrapper in the parent directory:</p> <pre><code>cd testbed-kotlin-application\n../gradlew build\n</code></pre> <p>to build the JS, JVM and KMP metadata jars for the example KMP project build in the <code>testbed-kotlin-application/build/libs</code> directory.</p> <p>You can also build the JS and JVM libs separately:</p> <pre><code>cd testbed-kotlin-application\n../gradlew jsJar\n</code></pre> <pre><code>cd testbed-kotlin-application\n../gradlew jvmJar\n</code></pre>"},{"location":"unified-prototype/#android","title":"Android","text":"<p>Sample Android projects live in the <code>testbed-android-library</code> and <code>testbed-android-application</code> directories. The <code>unified-prototype/plugin-android</code> plugin demonstrates creating extensions using the Declarative DSL, and loading the data from those extensions into the Android project used by AGP.</p> <p>The sample project demonstrates setting properties, using a common dependencies block, and adding dependencies to specific Android targets.</p>"},{"location":"unified-prototype/#implementation-notes","title":"Implementation Notes","text":"<p>Guava is declared as an implementation dependency. The OKHttp dep is used by the release build type's implementation, and is not necessary for the debug variant.</p> <p>Both plugin implementations work by using <code>project.afterEvaluate</code> to load data from the Declarative DSL extensions into AGP's model.</p>"},{"location":"unified-prototype/#limitations_1","title":"Limitations","text":"<p>The Android example is currently limited, and does not support many use cases such as adding tests or running the <code>publish</code> task. It requires JDK &gt;= 17 to build.</p>"},{"location":"unified-prototype/#running_1","title":"Running","text":"<p>From the <code>testbed-android-library</code> or <code>testbed-android-application</code> directory, run <code>build</code> using the Gradle wrapper in the parent directory:</p> <pre><code>cd testbed-android-application\n../gradlew build\n</code></pre> <p>to build debug and release <code>aar</code>s for the example Android project build in the <code>testbed-android/build/outputs/aar</code> directory.</p> <p>You can also build the <code>Debug</code> and <code>Release</code> variants separately:</p> <pre><code>gradlew :testbed-android-application:assembleDebug\n</code></pre> <pre><code>gradlew :testbed-android-application:assembleRelease\n</code></pre>"},{"location":"unified-prototype/#swift","title":"Swift","text":"<p>The sample Swift projects live in the <code>testbed-swift-library</code> and <code>testbed-swift-application</code> directories.</p> <p>To run the application, use:</p> <pre><code>../gradlew testbed-swift-application:runAll\n</code></pre>"},{"location":"unified-prototype/#c","title":"C++","text":"<p>The sample C++ projects live in the <code>testbed-cpp-library</code> and <code>testbed-cpp-application</code> directories.</p> <p>To run the application, use:</p> <pre><code>../gradlew testbed-cpp-application:runAll\n</code></pre>"},{"location":"unified-prototype/android-util/","title":"Unified Prototype: android-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/gradle/","title":"Unified Prototype: gradle","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/java-util/","title":"Unified Prototype: java-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/kotlin-js-store/","title":"Unified Prototype: kotlin-js-store","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/kotlin-jvm-util/","title":"Unified Prototype: kotlin-jvm-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/kotlin-util/","title":"Unified Prototype: kotlin-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/swift-util/","title":"Unified Prototype: swift-util","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-android-application/","title":"Unified Prototype: testbed-android-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-android-library/","title":"Unified Prototype: testbed-android-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-java-application/","title":"Unified Prototype: testbed-java-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-java-library/","title":"Unified Prototype: testbed-java-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-jvm-application/","title":"Unified Prototype: testbed-jvm-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-jvm-library/","title":"Unified Prototype: testbed-jvm-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-kotlin-application/","title":"Unified Prototype: testbed-kotlin-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-kotlin-jvm-application/","title":"Unified Prototype: testbed-kotlin-jvm-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-kotlin-jvm-library/","title":"Unified Prototype: testbed-kotlin-jvm-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-kotlin-library/","title":"Unified Prototype: testbed-kotlin-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-swift-application/","title":"Unified Prototype: testbed-swift-application","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/testbed-swift-library/","title":"Unified Prototype: testbed-swift-library","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/unified-plugin/","title":"Unified Prototype: unified-plugin","text":"<p>Click \"View the source of this page\" to check out this example on GitHub.</p>"},{"location":"unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application/","title":"declarative-samples-android-app","text":""},{"location":"unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application/#declarative-samples-android-app","title":"declarative-samples-android-app","text":"<p>A sample Android application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>androidApplication</code> Software Type defined in the <code>org.gradle.experimental.android-ecosystem</code> ecosystem plugin.</p>"},{"location":"unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a multiproject Android application implemented using Kotlin 2.0.21 source code. The project is the result of reproducing the project produced by the <code>gradle init</code> command in Gradle 8.9 as an Android project.</p> <p>To build the project without running, use:</p> <pre><code>  ./gradlew build\n</code></pre> <p>To run the application, first install it on a connected Android device using:</p> <pre><code>  :app:installDebug\n</code></pre> <p>Then search for \"Sample Declarative Gradle Android App\" and launch app to see a hello world message.</p>"},{"location":"unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application-agp-preview/","title":"declarative-samples-android-app","text":""},{"location":"unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application-agp-preview/#declarative-samples-android-app","title":"declarative-samples-android-app","text":"<p>A sample Android application written in the Declarative Gradle DSL, using the official Android Software Types Preview <code>androidApplication</code> and <code>androidLibrary</code> defined in the <code>com.android.ecosystem</code> ecosystem plugin.</p>"},{"location":"unified-prototype/unified-plugin/plugin-android-init/src/main/resources/templates/android-application-agp-preview/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a multiproject Android application implemented using Kotlin source code.</p> <p>To build the project without running, use:</p> <pre><code>./gradlew build\n</code></pre> <p>To run the application, first install it on a connected Android device using:</p> <pre><code>./gradlew :app:installDebug\n</code></pre> <p>In IntelliJ IDEA or Android Studio you can use the <code>app</code> run configuration to launch the app in an emulator to see a hello world message.</p>"},{"location":"unified-prototype/unified-plugin/plugin-jvm/src/main/resources/templates/java-application/","title":"declarative-samples-java-app","text":""},{"location":"unified-prototype/unified-plugin/plugin-jvm/src/main/resources/templates/java-application/#declarative-samples-java-app","title":"declarative-samples-java-app","text":"<p>A sample Java application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>javaApplication</code> Software Type defined in the <code>org.gradle.experimental.jvm-ecosystem</code> ecosystem plugin.</p>"},{"location":"unified-prototype/unified-plugin/plugin-jvm/src/main/resources/templates/java-application/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a multiproject Java application implemented using Java 17 source code. The project is the result of converting the project produced by the <code>gradle init</code> command in Gradle 8.9.</p> <p>To build and test the application without running, use:</p> <pre><code>&gt; ./gradlew build\n</code></pre> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew run\n</code></pre>"},{"location":"unified-prototype/unified-plugin/plugin-kmp/src/main/resources/templates/kotlin-application/","title":"declarative-samples-kotlin-app","text":""},{"location":"unified-prototype/unified-plugin/plugin-kmp/src/main/resources/templates/kotlin-application/#declarative-samples-kotlin-app","title":"declarative-samples-kotlin-app","text":"<p>A sample Kotlin application written in the Declarative Gradle DSL, using the prototype Declarative Gradle <code>kotlinJvmApplication</code> Software Type defined in the <code>org.gradle.experimental.kmp-ecosystem</code> ecosystem plugin.</p>"},{"location":"unified-prototype/unified-plugin/plugin-kmp/src/main/resources/templates/kotlin-application/#building-and-running","title":"Building and Running","text":"<p>This sample shows the definition of a Kotlin JVM application implemented using Kotlin 2.0.21 source code. The project is the result of converting the project produced by the <code>gradle init</code> command in Gradle 8.9.</p> <p>To build and test the application without running, use:</p> <pre><code>&gt; ./gradlew build\n</code></pre> <p>To run the application, use:</p> <pre><code>&gt; ./gradlew run\n</code></pre>"}]}