/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package orggradle.experiments;

import org.gradle.api.Action;
import org.gradle.api.NamedDomainObjectContainer;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.dsl.Dependencies;
import org.gradle.api.internal.plugins.DslObject;
import org.gradle.api.plugins.JavaPluginExtension;
import org.gradle.api.plugins.jvm.PlatformDependencyModifiers;
import org.gradle.api.plugins.jvm.TestFixturesDependencyModifiers;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Nested;
import org.gradle.api.tasks.compile.JavaCompile;

/**
 *
 */
public class SingleTargetJavaApplicationPlugin implements Plugin<Project> {
    public interface JvmApplicationDependencies extends PlatformDependencyModifiers, TestFixturesDependencyModifiers, Dependencies {
        @Nested DependencyCollector getImplementation();
        @Nested DependencyCollector getCompileOnly();
        @Nested DependencyCollector getRuntimeOnly();
    }

    public interface JavaApplicationTarget {
        Property<Boolean> getDebug();

        NamedDomainObjectContainer<SourceDirectorySet> getSources();
        default void sources(Action<? super NamedDomainObjectContainer<SourceDirectorySet>> action) {
            action.execute(getSources());
        }
        @Nested
        JvmApplicationDependencies getDependencies();
        default void dependencies(Action<? super JvmApplicationDependencies> action) {
            action.execute(getDependencies());
        }

        Property<String> getMainClass();
    }
   public interface JavaApplication extends JavaApplicationTarget {

//        @Nested
//        JavaTarget getTarget();
//
//        default void target(Action<? super JavaTarget> action) {
//            action.execute(getTarget());
//        }
    }

    public void apply(Project project) {
        project.getPluginManager().apply("application");

        var javaApplication = project.getExtensions().create("javaApplication", JavaApplication.class);
        project.getConfigurations().getByName("compileOnly").getDependencies().addAllLater(javaApplication.getDependencies().getCompileOnly().getDependencies());
        project.getConfigurations().getByName("implementation").getDependencies().addAllLater(javaApplication.getDependencies().getImplementation().getDependencies());
        project.getConfigurations().getByName("runtimeOnly").getDependencies().addAllLater(javaApplication.getDependencies().getRuntimeOnly().getDependencies());

        javaApplication.getDebug().convention(false);

        var javaSourceSetDirectory = javaApplication.getSources().create("java");
        // javaSourceSetDirectory.srcDir("src/main/java");

        var java = project.getExtensions().getByType(JavaPluginExtension.class);
        var mainSourceSet = java.getSourceSets().getByName("main");
        mainSourceSet.getJava().srcDirs(javaSourceSetDirectory.getSrcDirs());

        project.getTasks().named(mainSourceSet.getCompileJavaTaskName(), JavaCompile.class, task -> {
            new DslObject(task.getOptions()).getConventionMapping().map("debug", () -> javaApplication.getDebug().get());
        });

        var javaApplicationExtension = project.getExtensions().getByType(org.gradle.api.plugins.JavaApplication.class);
        javaApplicationExtension.getMainClass().convention(javaApplication.getMainClass());
        project.getTasks().register("printModel", PrintModel.class);
    }
}
